
   <rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
     <channel>
       <title>Posts on Matthew DiLoreto</title>
       <link>https://mjdiloreto.github.io/posts/</link>
       <description>Recent content in Posts on Matthew DiLoreto</description>
       <generator>Hugo -- gohugo.io</generator>
       <language>en-us</language>
       <lastBuildDate>Wed, 02 Jun 2021 21:44:00 -0400</lastBuildDate>
       
           <atom:link href="https://mjdiloreto.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
       
       
       <item>
         <title>Problems with Programming Books</title>
         <link>https://mjdiloreto.github.io/posts/problems-with-programming-books/</link>
         <pubDate>Wed, 02 Jun 2021 21:44:00 -0400</pubDate>
         
         <guid>https://mjdiloreto.github.io/posts/problems-with-programming-books/</guid>
         <description>&lt;p&gt;My girlfriend&amp;rsquo;s sister is taking her first programming course using an &amp;ldquo;interactive&amp;rdquo; online textbook (a &lt;a href=&#34;https://www.zybooks.com/&#34;&gt;Zybook&lt;/a&gt;) for school, and I offered to tutor her.&lt;/p&gt;
&lt;p&gt;When she needs help, she usually sends me 3 pictures:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The text of the problem statement.&lt;/li&gt;
&lt;li&gt;Her python code (some of it is prepopulated by the textbook).&lt;/li&gt;
&lt;li&gt;The error message (there is almost always an error message)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I then decipher what exactly the question is asking for, what the error message says, what her code is doing, and finally write up an explanation to help her understand all of it.&lt;/p&gt;
&lt;p&gt;Sometimes it&amp;rsquo;s easier to facetime.&lt;/p&gt;
&lt;p&gt;Throughout this process I&amp;rsquo;ve maintained notes about what trips her up, because it&amp;rsquo;s been so long since I started programming that I don&amp;rsquo;t actually remember what it was like not to know these things.
I&amp;rsquo;ve come to the conclusion that programming &amp;ldquo;books&amp;rdquo; (the hypertext document consisting of long passages of reading followed by graded problems &amp;mdash; which I will simply call books), or at least the one she is using, are seriously flawed.&lt;/p&gt;
&lt;p&gt;My perspective is also colored by my personal experience with &lt;a href=&#34;http://www.codecademy.com&#34;&gt;codecademy&lt;/a&gt; circa 2014, and later in 2019, as well as a few other courses from college (the names of which I cannot recall), so a lot might have changed in some of the better tools, but I&amp;rsquo;m certain there&amp;rsquo;s a lot more that can be done.&lt;/p&gt;
&lt;p&gt;The main ingredient they seem lack is &lt;em&gt;interactivity&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Any fan of Brett Victor will know the importance of interactivity, but for the unitiated, allow me (him) to enlighten you:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=PUv66718DII&#34;&gt;Brett Victor: Inventing on Principle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://worrydream.com/LadderOfAbstraction/&#34;&gt;The Ladder of Abstraction&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(Seriously, watch the video from Brett, and read this essay too while you&amp;rsquo;re at it. The ideas he presents are wonderfully &lt;em&gt;simple&lt;/em&gt;. I guarantee they will leave a lasting impression.)&lt;/p&gt;
&lt;p&gt;What interactivity does for a first-time programming language learner is remove barriers.
A good programming book empowers her to find answers to her questions on her own.
It provides endless &lt;em&gt;contextual information&lt;/em&gt; for every part of the interface, code, and errors (no, not just some static textual explanation of the topic at-hand 5 pages up in the document).
The fewer buttons she has to click to see a result, the more help she has decoding an error message, the more likely she is to keep going, and keep coding.&lt;/p&gt;
&lt;p&gt;I boiled down my experience tutoring to a few areas for improvement for a truly interactive programming book.&lt;/p&gt;
&lt;h2 id=&#34;language-specific-ergonomics&#34;&gt;Language-specific Ergonomics&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s start with something programming books usually get right &amp;mdash; isolating the beginner from the technology.&lt;/p&gt;
&lt;p&gt;As software developers, we love tinkering on the command line.
We like to connect services and write scripts and run test suites and version control source code files.
We like to be in control of a system.&lt;/p&gt;
&lt;p&gt;This is anathema to the first-time programming language learner.&lt;/p&gt;
&lt;p&gt;A beginner should not have to set up anything.
They should be presented immediately with the opportunity to read, execute, and write programs without any effort.
Most books at least solve this problem by providing code execution tools (a bare text-editor and a &amp;ldquo;RUN CODE&amp;rdquo; button usually) from the browser, and some tools like &lt;a href=&#34;http://www.repl.it&#34;&gt;repl.it&lt;/a&gt; are doing very cool things in this space.&lt;/p&gt;
&lt;p&gt;I do think there is more work to be done regarding in-context documentation of language features.&lt;/p&gt;
&lt;h2 id=&#34;partial-results&#34;&gt;Partial Results&lt;/h2&gt;
&lt;p&gt;One thing I wish more books emphasized is the &lt;em&gt;substitution model&lt;/em&gt; of programming.
That is, the iterative process of substituting subexpressions for their results to make up larger results in a program, e.g;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(+ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; (+ &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;))
&lt;span style=&#34;color:#75715e&#34;&gt;; becomes&lt;/span&gt;
(+ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;; becomes&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Technically this model only applies to expressions, so in a language like Python there are exceptions, but the same basic principle carries over at least somewhat in every programming language, and it is not an obvious principle.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s not obvious to a beginner that:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;age_input &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; input()
age &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(age_input)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;is exactly the same as:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;age &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(input())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;unless they are explicitly told so.
But the abstract knowledge does not stick immediately, because they will then balk at:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;ages &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; input()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&amp;ldquo;How come it isn&amp;rsquo;t&amp;rdquo;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;ages &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; split(input())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Good question. That&amp;rsquo;s why &lt;a href=&#34;https://htdp.org/&#34;&gt;How To Design Programs&lt;/a&gt; uses a Lisp as its teaching language.
Any syntax is overhead.
It distracts from the essence of programming.&lt;/p&gt;
&lt;p&gt;A good interactive programming book might not want to teach Lisp, but it should give insight into the results of each part of every expression.&lt;/p&gt;
&lt;h2 id=&#34;error-messages&#34;&gt;Error Messages&lt;/h2&gt;
&lt;p&gt;This is what infuriates me about every single book I&amp;rsquo;ve come across &amp;mdash; they all forward the bare error messages from the interpreter/compiler/VM/whatever straight to the user.
This in and of itself is not really an issue, but the problem is that they all &lt;em&gt;stop&lt;/em&gt; there.&lt;/p&gt;
&lt;p&gt;What do software developers do when they get an error message?
Well, it depends on the error:&lt;/p&gt;
&lt;h4 id=&#34;syntax-errors&#34;&gt;Syntax errors:&lt;/h4&gt;
&lt;p&gt;My IDE catches this &lt;em&gt;in context&lt;/em&gt; AND usually provides a quick fix.
A beginner is already used to this common paradigm (e.g. spellcheck).
There is no reason for any programming book not to have this feature (Zybooks does not have it).&lt;/p&gt;
&lt;h4 id=&#34;runtime-errors&#34;&gt;Runtime errors:&lt;/h4&gt;
&lt;p&gt;StackOverflow.
There is no avoiding the value of google-searching the error message.
I would like to see a book that does this on behalf of the user, suggesting a search whenever an error occurs; or preferably suggesting a &lt;em&gt;useful&lt;/em&gt; search from a previous user of the book i.e. a post which solved &lt;em&gt;this&lt;/em&gt; specific error in &lt;em&gt;this&lt;/em&gt; specific graded problem.&lt;/p&gt;
&lt;p&gt;One error message is usually tolerable, but it&amp;rsquo;s when the beginner tries 2, 3, or 4 different things, and gets &lt;em&gt;different&lt;/em&gt; errors that they quit.
My role as a tutor is essentially an error explainer.
I explain what the error means generally, then what it means in this context, then &lt;em&gt;why&lt;/em&gt; it happened in this context, what line of code is &lt;em&gt;really&lt;/em&gt; to blame (you got a SynaxError on line 11 because you forgot a &lt;code&gt;:&lt;/code&gt; on line 10), and finally prompt with a leading question toward a solution (or just give the solution if it isn&amp;rsquo;t obvious).
There&amp;rsquo;s no reason the book can&amp;rsquo;t do a lot of this work.&lt;/p&gt;
&lt;h2 id=&#34;case-analysis&#34;&gt;Case Analysis&lt;/h2&gt;
&lt;p&gt;This is where the actual programming work begins.
Alan Perlis famously &lt;a href=&#34;http://www.cs.yale.edu/homes/perlis-alan/quotes.html&#34;&gt;said&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Programmers are not to be measured by their ingenuity and their logic but by the completeness of their case analysis.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The problem is that it&amp;rsquo;s very difficult for beginners to differentiate between errors due to incomplete case analysis and &amp;ldquo;programming&amp;rdquo; errors (like using the wrong variable, forgetting a &lt;code&gt;+1&lt;/code&gt; somewhere, etc.)&lt;/p&gt;
&lt;p&gt;Software developers write tests in order to increase their confidence in their case analysis, and run those tests when the relevant code changes.
Beginners do not write tests, because they do not yet know the value of doing so.&lt;/p&gt;
&lt;p&gt;Most books I&amp;rsquo;ve come across usually provide some mechanism for user-supplied inputs, and typically include a short test suite for graded problems, but this is not enough.
Books should provide this list of cases and run the tests whenever the code is updated.
The beginner should know &lt;em&gt;immediately&lt;/em&gt; whenever one of their changes influenced the outcome of a test case.&lt;/p&gt;
&lt;p&gt;The book should also provide test cases for the functions relevant to a solution, i.e. I should be able to hover over `pow` in some Python code and see:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;pow(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# -&amp;gt; 4&lt;/span&gt;
pow(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# -&amp;gt; 8&lt;/span&gt;
pow(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# -&amp;gt; 16&lt;/span&gt;
pow(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# -&amp;gt; 27&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# ... etc.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So far I have not come across any books which have immediate feedback like this.&lt;/p&gt;
&lt;h2 id=&#34;exploration&#34;&gt;Exploration&lt;/h2&gt;
&lt;p&gt;This is by far the most important aspect of programming that books fail at.
Almost every one of my tutoring texts includes the phrase &amp;ldquo;open up your terminal and type &lt;code&gt;python3&lt;/code&gt;&amp;rdquo; (I demonstrated the REPL live a couple times; I&amp;rsquo;m not a sadist).
I then say, &amp;ldquo;See what happens when you do:&amp;rdquo; and provide a verbatim copy of a repl session demonstrating whatever concept I was discussing.&lt;/p&gt;
&lt;p&gt;You might be skeptical about the merits of REPL-driven development as a style of software-engineering, and prefer TDD or something. That&amp;rsquo;s fine.
It is undeniable though that a repl is &lt;em&gt;more interactive&lt;/em&gt; than TDD, and in our hypothetical programming book we&amp;rsquo;ve already provided the user with a live test suite.
The code editors these programming books use really need to integrate something like &lt;a href=&#34;https://quokkajs.com/&#34;&gt;Quokka&lt;/a&gt; or &lt;a href=&#34;http://lighttable.com/&#34;&gt;Lighttable&lt;/a&gt; for whatever language the book uses.&lt;/p&gt;
&lt;p&gt;They should also suggest other things to try.
This might have to be problem-specific, but if the preceding chapter discusses the &lt;code&gt;split&lt;/code&gt; and &lt;code&gt;join&lt;/code&gt; functions, then wherever a list appears in the code, the editor should show it &lt;code&gt;join&lt;/code&gt;&#39;ed, and wherever there is a string, the editor should show it &lt;code&gt;split&lt;/code&gt;&#39;ed.
If there is a string in the code, the editor should should each of the characters and how to access them.&lt;/p&gt;
&lt;p&gt;I assumed since the REPL is such a simple piece of interactive software that it would be super useful for beginners, but what I noticed is that, when presented with an empty prompt, she just didn&amp;rsquo;t know what to type next.
I realized suggestions are imperative.&lt;/p&gt;
&lt;h2 id=&#34;memory&#34;&gt;Memory&lt;/h2&gt;
&lt;p&gt;Disclaimer: I&amp;rsquo;ve never seen &lt;em&gt;any&lt;/em&gt; programming interface (let alone a beginner&amp;rsquo;s programming book) which solves this problem.
Once the beginner has solved a problem and submitted their program, it is lost in the ether.
She goes about her life and (to no fault of her own) effectively purges whatever arcane knowledge she gleaned from the homework.
This is really more of a problem with books in general, but there is no place other than your own brain to keep the knowledge you learned.&lt;/p&gt;
&lt;p&gt;Well, computers have memory, and a sufficiently interactive programming environment should really &lt;em&gt;remember&lt;/em&gt; the code it runs.&lt;/p&gt;
&lt;p&gt;Whenever a beginner correctly uses a function, syntactic construct, or other piece of source code, the book ought to remember that.
Whenever a beginner writes some code that generates an error, and then fixes that error with a code change, that&amp;rsquo;s a huge success! The book ought to congratulate and remember that.
They should then have the immediate ability to recall that success in another context.&lt;/p&gt;
&lt;p&gt;If I used &lt;code&gt;input().split()&lt;/code&gt; on problem 1.c, I should be reminded of it when I write &lt;code&gt;input().split()&lt;/code&gt; on problem 13.a.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;m sure there is a ton of work going on in the digital textbook space, but from what I see, the majority of &amp;ldquo;Teach yourself Python!&amp;rdquo; books/courses online fall into the MVP-product with Superstar-marketing category.
There seem to be tons of books, videos, and blog posts for every concept a beginner would ever want to know about Python, but none satisfy the level of interactivity I feel is really needed.
My sister&amp;rsquo;s girlfriend said to me &amp;ldquo;I have no idea how the other students are managing without a &lt;em&gt;professional software engineer&lt;/em&gt; helping them.&amp;rdquo;
I don&amp;rsquo;t know either, but the book definitely is not sufficient.&lt;/p&gt;
</description>
       </item>
       
       <item>
         <title>Libraries for Web Development</title>
         <link>https://mjdiloreto.github.io/posts/libraries-for-web-development/</link>
         <pubDate>Sun, 18 Apr 2021 21:09:00 -0400</pubDate>
         
         <guid>https://mjdiloreto.github.io/posts/libraries-for-web-development/</guid>
         <description>&lt;p&gt;A list of neat and nifty libraries I&amp;rsquo;ve stumbled across which have piqued my interest enough for me to save them.
Keeping track of them here in this list for my future reference.&lt;/p&gt;
&lt;h2 id=&#34;in-the-browser&#34;&gt;In the Browser&lt;/h2&gt;
&lt;h3 id=&#34;analytics&#34;&gt;Analytics&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://counter.dev&#34;&gt;counter.dev&lt;/a&gt;: Simple, open-source, free (as in beer), privacy-focused analytics.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;built-on-react&#34;&gt;Built on React&lt;/h3&gt;
&lt;p&gt;React wins the web by converting the problem of UI to a function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;V = F(D)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here are some projects which compose with that simple function.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blitzjs.com&#34;&gt;Blitz.js&lt;/a&gt;: Full-stack batteries-included React Framework. 0-API. Comes with Routing, Authentication (sign-up, log in, password reset) preconfigured. Would use for a hackathon project.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;data-visualization&#34;&gt;Data Visualization&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://formidable.com/open-source/victory/&#34;&gt;Victory&lt;/a&gt;: Easy to use Charts and data visualization components for React. Works with React Native too(!)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.highcharts.com/demo&#34;&gt;Highcharts&lt;/a&gt;: Modular library of many chart types with React or plain js bindings.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chartscss.org/&#34;&gt;Charts.scss&lt;/a&gt;: Boom, no need for React at all. Charts directly in css baby. Could be really cool in conjuction with htmx.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://reactflow.dev/examples&#34;&gt;React flow&lt;/a&gt;: Node editor for building flowcharts / graph-based diagrams with interactive editing, minimap, and more.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://riccardoscalco.it/textures/&#34;&gt;Textures.js&lt;/a&gt;: SVG patterns for data visualization. Trivial to use and beautiful.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dates&#34;&gt;Dates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;//js-joda.github.io/js-joda/&#34;&gt;JS-Joda&lt;/a&gt;: Lower adoption than date-fns.
Immutable implementation of dates (Does not wrap the native JS &lt;code&gt;Date&lt;/code&gt; object.
Different classes of dates for different use-cases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LocalDate (dates like birthdays or holidays)&lt;/li&gt;
&lt;li&gt;Period (between 2 dates)&lt;/li&gt;
&lt;li&gt;Duration (scalar time)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://date-fns.org&#34;&gt;Date-fns:&lt;/a&gt; Consistent, complete, immutable.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;High adoption (recommended from &lt;code&gt;moment.js&lt;/code&gt; (the easiest/most intuitive date library I&amp;rsquo;ve encountered)).
Wraps the Native &lt;code&gt;Date&lt;/code&gt; object.
Has an FP submodule providing convenience for functional-style programming.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dom-styling&#34;&gt;DOM styling&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://styled-components.com&#34;&gt;Styled Components&lt;/a&gt;: Directly associate React Components with styles without the need for global style sheets.
Good for building highly modular (read standalone) components.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://react.semantic-ui.com&#34;&gt;Semantic UI:&lt;/a&gt; words &lt;code&gt;=&lt;/code&gt; classnames. Create highly readable &amp;ldquo;semantic&amp;rdquo; UI code with a decent selection of components&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dwyl/learn-tachyons&#34;&gt;Tachyons&lt;/a&gt;: Functional terse css classes. Might be based off tailwind, not sure.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://roughnotation.com/&#34;&gt;Rough Notation&lt;/a&gt;: Create + animate &amp;ldquo;hand-drawn&amp;rdquo; annotations on top of html.
Super simple and cool effect.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dope-stylesheets&#34;&gt;Dope stylesheets&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://nostalgic-css.github.io/NES.css/&#34;&gt;NES.css&lt;/a&gt;: Stylesheet to emulate old NES style interface. Certified dope.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;react-alternatives&#34;&gt;React alternatives&lt;/h3&gt;
&lt;p&gt;Alternatives to the classic client-side rendered react SPA.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://htmx.org/examples/&#34;&gt;htmx&lt;/a&gt;: Build SPAs directly onto html elements using attributes.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;htmx allows you to access AJAX, CSS Transitions, WebSockets and Server Sent Events directly in HTML, using attributes, so you can build modern user interfaces with the simplicity and power of hypertext.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;small - 10k minified + gzipped. Cool author.&lt;/p&gt;
&lt;h3 id=&#34;misc-dot&#34;&gt;Misc.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://quotebacks.net/&#34;&gt;Quotebacks&lt;/a&gt;: Create nice-looking and functional quotes to external resources. Mostly used in the blogosphere.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;not-the-browser&#34;&gt;Not the Browser&lt;/h2&gt;
&lt;h3 id=&#34;web-hosting&#34;&gt;Web hosting&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.netlify.com/&#34;&gt;Netlify&lt;/a&gt;: The best. use it.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://coollabs.io/coolify&#34;&gt;Coolify&lt;/a&gt;: Open-source, indie-hacker-esque Netlify alternative. Not clear what pricing is like.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githack.com/&#34;&gt;raw.githack.com&lt;/a&gt;: CDN for files hosted in github repos. Good for indie-dev type projects.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;databases&#34;&gt;Databases&lt;/h3&gt;
&lt;h4 id=&#34;sql&#34;&gt;SQL&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://walkable.gitlab.io&#34;&gt;Walkable&lt;/a&gt;: hiccup-style sql (use EDN to describe SQL statements).&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://massivejs.org/&#34;&gt;Massive.js&lt;/a&gt;: A powerful &lt;code&gt;Node.js&lt;/code&gt; wrapper for (only) &lt;code&gt;postgres&lt;/code&gt; that doesn&amp;rsquo;t get in the way.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;replication&#34;&gt;Replication&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://litestream.io/getting-started/&#34;&gt;litestream&lt;/a&gt;: Replicate SQLite databases automatically in the background as a separate process.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;fun--data-sources&#34;&gt;(Fun) Data sources&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.rijksmuseum.nl/en/rijksstudio&#34;&gt;Rijksmuseum&lt;/a&gt;: Searchable compilation of over 700k high-res copies of famous paintings.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://omar.website/tabfs/&#34;&gt;Tabfs&lt;/a&gt;: Mount browser tabs as a local filesystem.
Allows easy querying of multiple open tabs, saving+reloading tabs + manipulating + communicating with browser.
Your own browsing sessions become the data source.
Literally endless possibilities for scripting.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://everynoise.com/&#34;&gt;Everynoise&lt;/a&gt;: Literally every spotify genre, with links to relevant artists / song snippets, and the relations between them all.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;machine-learning&#34;&gt;Machine learning&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://lobe.ai/&#34;&gt;Lobe&lt;/a&gt;: Easiest (superlative, yes) online training of machine learning models. It&amp;rsquo;s free for now.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/nidhaloff/igel&#34;&gt;Igel&lt;/a&gt;: Train + fit, test + use machine learning models at the command line without writing code.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alicevision.org/#meshroom&#34;&gt;Meshroom&lt;/a&gt;: Reconstruct images as 3D models, aka &lt;code&gt;Photogrammetry&lt;/code&gt; (your $2 word for the day).
Free (as in freedom, and also beer).&lt;/li&gt;
&lt;/ul&gt;
</description>
       </item>
       
       <item>
         <title>Emacs and Org-Mode</title>
         <link>https://mjdiloreto.github.io/posts/org-mode/</link>
         <pubDate>Sun, 01 Mar 2020 15:41:00 -0500</pubDate>
         
         <guid>https://mjdiloreto.github.io/posts/org-mode/</guid>
         <description>&lt;p&gt;Before this year I was always a vim guy.
I used vim for almost everything except JVM programming (Java, Scala. For those tasks I really prefer IntelliJ), but this year I installed emacs.
I figured if I really wanted to participate in the &lt;a href=&#34;https://wiki.c2.com/?EmacsVsVi&#34;&gt;holy flame war&lt;/a&gt; I better spend some time learning the other tool as well.
I used a few different tool for all my electronic tasks, and here&amp;rsquo;s what that landscape looked like for me before emacs:&lt;/p&gt;
&lt;h2 id=&#34;before-emacs&#34;&gt;Before Emacs&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Task&lt;/th&gt;
&lt;th&gt;Software&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Taking Notes&lt;/td&gt;
&lt;td&gt;vim, Github-flavored Markdown&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Keeping an agenda&lt;/td&gt;
&lt;td&gt;A simple note widget on my phone, Google Tasks&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Text file manipulation&lt;/td&gt;
&lt;td&gt;vim&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;python, C++&lt;/td&gt;
&lt;td&gt;vim with &lt;a href=&#34;https://github.com/ycm-core/YouCompleteMe&#34;&gt;YouCompleteMe&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Java, Scala, javascript&lt;/td&gt;
&lt;td&gt;IntelliJ&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;I was generally happy using this configuration, with the exception of my agenda.
I was too disorganized, with short-term tasks on a note widget on my phone&amp;rsquo;s home screen, and longer term tasks in Google Tasks.
Putting time constraints on the short-term tasks was basically impossible since the note app had no integrations with the calendar, and putting those things in Google Tasks was too onerous.
Also, I do most of my work on my laptop, so having to keep my phone by my side while working was a big pain.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;d recently watched a talk from &lt;a href=&#34;https://www.youtube.com/watch?v=SzA2YODtgK4&amp;amp;t=2851s&#34;&gt;Harry Schwartz&lt;/a&gt; on org-mode, and the simple plain-text markup with powerful keyboard shortcuts convinced me to give it a shot.
Actually, the keyboard shortcut for inserting timestamps, &lt;code&gt;C-u C-c .&lt;/code&gt;, is the single thing I saw in that talk that I &lt;em&gt;had&lt;/em&gt; to try.
So I opened emacs and&amp;hellip; couldn&amp;rsquo;t figure out how to make a new file.
So back to what I knew, &lt;code&gt;vim agenda.org&lt;/code&gt;, insert some markup, save, &lt;em&gt;then&lt;/em&gt; &lt;code&gt;emacs agenda.org&lt;/code&gt;.
I haven&amp;rsquo;t gone back to another way of organizing my tasks.&lt;/p&gt;
&lt;p&gt;I ought to write about my workflow with org-mode, but that&amp;rsquo;s for another day.
In fact, I liked it so much that I started taking all my class notes with emacs too.
So it begins, I&amp;rsquo;ve chosen a side on the holy war, and emacs is slowly conquering territory that used to belong firmly to vim.&lt;/p&gt;
&lt;h2 id=&#34;now-3-months-of-emacs&#34;&gt;Now, 3 months of emacs&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Task&lt;/th&gt;
&lt;th&gt;Software&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Taking Notes&lt;/td&gt;
&lt;td&gt;emacs, org-mode&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Keeping an agenda&lt;/td&gt;
&lt;td&gt;emacs, org-mode&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Text file manipulation&lt;/td&gt;
&lt;td&gt;vim&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;python, C++&lt;/td&gt;
&lt;td&gt;vim with &lt;a href=&#34;https://github.com/ycm-core/YouCompleteMe&#34;&gt;YouCompleteMe&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Java, Scala, javascript&lt;/td&gt;
&lt;td&gt;IntelliJ&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Actually, these changes coincided with me teaching myself Clojure, so the landscape &lt;em&gt;really&lt;/em&gt; looks like:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Task&lt;/th&gt;
&lt;th&gt;Software&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Taking Notes&lt;/td&gt;
&lt;td&gt;emacs, org-mode&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Keeping an agenda&lt;/td&gt;
&lt;td&gt;emacs, org-mode&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Clojure&lt;/td&gt;
&lt;td&gt;emacs, CIDR&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Text file manipulation&lt;/td&gt;
&lt;td&gt;vim&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;python, C++&lt;/td&gt;
&lt;td&gt;vim with &lt;a href=&#34;https://github.com/ycm-core/YouCompleteMe&#34;&gt;YouCompleteMe&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Java, Scala, javascript&lt;/td&gt;
&lt;td&gt;IntelliJ&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;And it&amp;rsquo;s definitely not looking good for vim down the road.
Right now my vim/emacs ratio is around 1:1, but I imagine this will shift more in emacs&amp;rsquo;s favor soon.
I &lt;em&gt;really&lt;/em&gt; like emacs.
It&amp;rsquo;s almost apples and oranges to vim, or maybe a more apt analogy would be &lt;em&gt;crab-apples&lt;/em&gt; to oranges, where you&amp;rsquo;ve only been eating crab-apples for years and didn&amp;rsquo;t know how good oranges tasted yet.&lt;/p&gt;
</description>
       </item>
       
     </channel>
   </rss>
