
   <rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
     <channel>
       <title>Posts on Matthew DiLoreto</title>
       <link>https://mjdiloreto.github.io/posts/</link>
       <description>Recent content in Posts on Matthew DiLoreto</description>
       <generator>Hugo -- gohugo.io</generator>
       <language>en-us</language>
       <lastBuildDate>Thu, 12 May 2022 08:25:00 -0500</lastBuildDate>
       
           <atom:link href="https://mjdiloreto.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
       
       
       <item>
         <title>Bees and Spiders; Software Developer Archetypes</title>
         <link>https://mjdiloreto.github.io/posts/bees-and-spiders/</link>
         <pubDate>Thu, 12 May 2022 08:25:00 -0500</pubDate>
         
         <guid>https://mjdiloreto.github.io/posts/bees-and-spiders/</guid>
         <description>&lt;figure&gt;&lt;img src=&#34;https://mjdiloreto.github.io/ox-hugo/spider_fighting_a_bee_on_a_green_leaf.png&#34;
         alt=&#34;spider fighting a bee on a green leaf&#34;/&gt;&lt;figcaption&gt;
            &lt;h4&gt;The spiders and bees going about their individual tasks, putting the world in order as best they can&lt;/h4&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;bees&#34;&gt;Bees&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Automatons&lt;/li&gt;
&lt;li&gt;Pluggable&lt;/li&gt;
&lt;li&gt;Super-organism more capable than the parts&lt;/li&gt;
&lt;li&gt;Cannot survive on their own&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I could have chosen ants for this group, but I feel they have a slightly worse cultural bias (no one likes ants in their house for example), whereas bees have earned more respect, from honey-production to essential pollination.&lt;/p&gt;
&lt;p&gt;As far as superorganisms go bees are certainly cooler than ants.&lt;/p&gt;
&lt;p&gt;And that&amp;rsquo;s the point I want to get across. Unlike the patronizing &lt;em&gt;&lt;a href=&#34;http://www.paulgraham.com/avg.html&#34;&gt;blub-programmer&lt;/a&gt;&lt;/em&gt; term (though the circumstances of almost all bees requires them to use &lt;em&gt;blub&lt;/em&gt; exclusively), &lt;em&gt;bee&lt;/em&gt; is not a term of derision. On the contrary, to be a bee is to be essential, to contribute to the most complex systems created by humanity. Contributing to projects beyond the prowess of any single spider. Crafting at the same time a community and social order protecting and guiding other bees inexorably toward their shared goal.&lt;/p&gt;
&lt;p&gt;Bee-like behavior is responsible for most of humanity&amp;rsquo;s great accomplishments:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the pyramids were built from stones chiseled, hauled, and assembled one by one over generations&lt;/li&gt;
&lt;li&gt;the human genome was (at least at first) mapped one base-pair at a time over decades&lt;/li&gt;
&lt;li&gt;Empires were created, wars fought and won, cities built to extraordinary size and complexity - none of these things attributable to a single individual&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is a humble honor in being a bee, in doing the right things daily for the good of the hive.&lt;/p&gt;
&lt;p&gt;Spiders don&amp;rsquo;t get it. They seem self aggrandizing and elitist to bees. They make comments like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&amp;ldquo;[Twitter|Instagram|&amp;hellip;|Any beeish enterprise] is so simple! I could make a clone in a weekend&amp;hellip;&amp;rdquo;&lt;/p&gt;
&lt;p&gt;The bees know better. They know the bulk of the effort lies in extra-technical work, in &lt;em&gt;the healthy running of the superorganisms itself&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;ldquo;Ew, &lt;em&gt;Blub&lt;/em&gt;?! Why are you using &lt;em&gt;Blub&lt;/em&gt;? Can&amp;rsquo;t you see the power of &lt;em&gt;[Lisp|Haskell|Prolog|Assembly|Any spiderish language]&lt;/em&gt;?!&amp;rdquo;&lt;/p&gt;
&lt;p&gt;The bees know better than to chase power. Individuals get drunk on power, corrupting the joint effort. Allow too much spiderishness and the tower of Babel will fall, scattering the bees among the world (or Silicon Valley).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;spiders&#34;&gt;Spiders&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Individual/self-reliant&lt;/li&gt;
&lt;li&gt;Masters&lt;/li&gt;
&lt;li&gt;Construct wonders alone&lt;/li&gt;
&lt;li&gt;Individually more capable than bee, but in aggregate less so&lt;/li&gt;
&lt;li&gt;Cannot work effectively in a large community&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As an individual, a spider is extraordinary, accomplishing by herself feats beyond the wildest dreams of a single bee.&lt;/p&gt;
&lt;p&gt;She toils alone, weaving her web in the location &lt;em&gt;she desires&lt;/em&gt;, with the intricate patterns &lt;em&gt;only she can conjure&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;She catches bees and eats them for breakfast.
In this way she resents them as inferior:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;there&amp;rsquo;s nothing any bee can do which I cannot do &lt;em&gt;better&lt;/em&gt;&amp;rdquo; - and she&amp;rsquo;s right&lt;/li&gt;
&lt;li&gt;&amp;ldquo;They don&amp;rsquo;t even &lt;em&gt;understand&lt;/em&gt; the technology they&amp;rsquo;re using! Not like I do.&amp;rdquo; - and she&amp;rsquo;s right&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Many spiders put on the bee suit and work for their rich enterprises, despising it.&lt;/p&gt;
&lt;p&gt;It seems that motivated bees can become &lt;em&gt;spiderish&lt;/em&gt;, but spiders resent becoming &lt;em&gt;beeish&lt;/em&gt;. Given that programmer contribution in large organizations follows a pareto distribution, it might even be appropriate to consider these most high-performing &amp;ldquo;bees&amp;rdquo; &lt;em&gt;hostage spiders&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;From my experience though, bees largely do not want to become spiders. They don&amp;rsquo;t get it. It seems many are born without innate Frisian spirit: for freedom, individuality, and self-determination in work.&lt;/p&gt;
&lt;p&gt;Domains which favor spiders:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open-source&lt;/li&gt;
&lt;li&gt;Research&lt;/li&gt;
&lt;li&gt;Indie game dev&lt;/li&gt;
&lt;li&gt;Small-business entrepreneurship (The solo-founder). This might technically subsume Indie game dev&lt;/li&gt;
&lt;/ul&gt;
</description>
       </item>
       
       <item>
         <title>Thin Client</title>
         <link>https://mjdiloreto.github.io/posts/thin-client/</link>
         <pubDate>Wed, 09 Feb 2022 09:17:00 -0600</pubDate>
         
         <guid>https://mjdiloreto.github.io/posts/thin-client/</guid>
         <description>&lt;p&gt;After working with React applications for almost 5 years, I have a certain morbid attraction to the idea that React - along with all other SPA libraries, development, and progress - is unnecessary.&lt;/p&gt;
&lt;p&gt;Obviously React exists in a very complex ecosystem.
To write the React applications the &lt;em&gt;right way&lt;/em&gt; requires:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;javascript transpilers/bundlers&lt;/li&gt;
&lt;li&gt;hundreds of npm libraries,&lt;/li&gt;
&lt;li&gt;(potentially) SSR, SSG frameworks and tools&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I can&amp;rsquo;t help but feel that the vast majority of web apps that use React do not actually need it.
Most apps are just not that complex, and the amount of SPA features that most apps provide is actually pretty minimal.&lt;/p&gt;
&lt;p&gt;Another feeling I can&amp;rsquo;t shake recently is that the robustness of React components, their reusability, is also not usually necessary.&lt;/p&gt;
&lt;p&gt;Apart from the base UI components in whatever project I&amp;rsquo;m working on (buttons, modals, dropdowns, etc.), the vast majority of my components are not reused.
Most web apps don&amp;rsquo;t really share that many features between different views, and if they do, it&amp;rsquo;s only in one or two other places.
The cost benefit of React apps, considering the vast resources organizations spend to create them, just doesn&amp;rsquo;t seem worth it.&lt;/p&gt;
&lt;p&gt;Then there&amp;rsquo;s the problem of AJAX.&lt;/p&gt;
&lt;p&gt;When the backend of an application spits out JSON for the frontend to consume, only to convert it back to recreate the same types on the frontend (which is admittedly ameliorated by a NodeJs backend), there&amp;rsquo;s duplicated work - often very time-consuming work as well.&lt;/p&gt;
&lt;p&gt;SPA frontends often end up resorting to something like Redux (or even the Apollo Client cache), as a global database.
The problem is this frontend database needs to be kept in sync with the real backend database, which ends up being a cause for much of the complexity in these apps.
Whenever I see Redux used in a project, I almost never see a well-laid out set of truly reactive data that percolates through the entire app. No, the store almost always becomes a sprawling hierarchy of nested data which inevitably ends up being used by a single page, and usually only a single component in a single instance. I&amp;rsquo;d estimate this is probably the case for 95% of the data in the Redux store for every project I&amp;rsquo;ve worked on.
One could argue that the base domain objects (User, Cart, etc.) are invaluable pieces of global state usually kept in Redux state, so any changes to permissions for example would percolate through the app without the need for a refresh, but I wonder if that&amp;rsquo;s really worth it&amp;hellip;&lt;/p&gt;
&lt;p&gt;Almost all the features I see in the average SPA are actually reproducible with a simpler stack, and a little bit of conscientious page design, which is why I like to call them &amp;ldquo;SPA-lite&amp;rdquo; apps.&lt;/p&gt;
&lt;p&gt;A lot of other people are noticing this too.
The phenomenon is &amp;ldquo;SPA fatigue&amp;rdquo;, and it&amp;rsquo;s been stirring in the web development community.&lt;/p&gt;
&lt;p&gt;There has been great progress over the last couple years in alternatives, like &lt;code&gt;htmx&lt;/code&gt;, supporting a true HATEOAS paradigm, and &lt;code&gt;elixir&lt;/code&gt; (especially paired with &lt;code&gt;LiveView&lt;/code&gt;), both of which provide almost all of the SPA features that most apps currently use.&lt;/p&gt;
&lt;p&gt;GraphQL is almost the antithesis of the principles of &lt;code&gt;htmx&lt;/code&gt;, but it is still an improvement over the current state of REST-based SPAs.&lt;/p&gt;
&lt;p&gt;Whereas htmx and elixir LiveView move most of the frontend&amp;rsquo;s responsibility back to the backend, graphql moves the most of the backend&amp;rsquo;s responsibility to the frontend.&lt;/p&gt;
&lt;p&gt;As a frontend developer who works in an SPA-lite organization, I advocate for GraphQL so that my job (and my colleagues&#39;) becomes easier.
As someone who is interested in building apps on his own, I reach for alternatives.
Because I&amp;rsquo;m the only developer, I need to use the simplest tools available that provide the most power, and &lt;code&gt;htmx&lt;/code&gt; fits the bill.&lt;/p&gt;
&lt;p&gt;Over and over I see folks overestimating the resources their servers require, overestimating the power and complexity their frontend application necessitates, overestimating the scale to which their organization will grow, overestimating the number of customers they will be able to reach and convert, overestimating the valuation of their startup&amp;hellip;&lt;/p&gt;
&lt;p&gt;The tech world is obsessed with overestimating.
If I&amp;rsquo;m going to be an anti-mimetic developer - if I&amp;rsquo;m going to be a 10x developer - if I&amp;rsquo;m going to be a solo developer - then I need to shrug the yoke of overestimation.
I need to reach for the &lt;em&gt;simplest&lt;/em&gt; tools available.&lt;/p&gt;
</description>
       </item>
       
       <item>
         <title>Mondegreen Generator</title>
         <link>https://mjdiloreto.github.io/posts/literate/</link>
         <pubDate>Tue, 28 Dec 2021 00:00:00 -0600</pubDate>
         
         <guid>https://mjdiloreto.github.io/posts/literate/</guid>
         <description>&lt;figure&gt;&lt;img src=&#34;https://mjdiloreto.github.io/ox-hugo/word_salad.png&#34;
         alt=&#34;letters made out of salad ingredients&#34;/&gt;&lt;figcaption&gt;
            &lt;h4&gt;Word Salad&lt;/h4&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;rationale&#34;&gt;Rationale&lt;/h2&gt;
&lt;p&gt;Back in early 2019, when the &amp;ldquo;&lt;a href=&#34;https://duckduckgo.com/?t=ffab&amp;amp;q=gibberish+challenge&amp;amp;iax=videos&amp;amp;ia=videos&#34;&gt;gibberish challenge&lt;/a&gt;&amp;rdquo; was bubbling up through the nascent &amp;ldquo;TikTok&amp;rdquo; milieu, I was compelled to discover an algorithm which, given arbitrary English input, could produce a &amp;ldquo;gibberish&amp;rdquo; phrase appropriate for the challenge.&lt;/p&gt;
&lt;p&gt;I searched the web for such an algorithm, since surely someone had to have done this previously, but I didn&amp;rsquo;t find any results on GitHub, nor any discussions elsewhere.&lt;/p&gt;
&lt;p&gt;There is a popular card game which operates on the same principle, cards have &amp;ldquo;gibberish&amp;rdquo; phrases and players must speak the phrases out loud to figure out the true meaning of what they are saying.
This game has hundreds of cards, so I figured there was no way someone sat down and manually translated those into gibberish, but I could not find an answer to this online either.
If the company which makes this card game does have such an algorithm, they are apparently not sharing it on the web.&lt;/p&gt;
&lt;p&gt;I hate starting side-projects that already have satisfactory solutions available for free, since they seem to be a waste of my time, but this project presented enough of an interesting challenge to really pursue for at least a weekend.&lt;/p&gt;
&lt;p&gt;So, I wrote the program, but haven&amp;rsquo;t really done anything with it since then (besides &lt;a href=&#34;https://github.com/mjdiloreto/mondegreen&#34;&gt;post the code to GitHub&lt;/a&gt;).
I haven&amp;rsquo;t actively shared it in any way.&lt;/p&gt;
&lt;p&gt;At first I wanted to create a website which would run the algorithm for the &amp;ldquo;TikTok&amp;rdquo; crowd to share, but by the time I was done with the implementation they had already moved past the fad.
You have to be quick to catch the social media tidal waves I suppose.
So, I left the project alone, content with the unfinished project and the single GitHub star from my college buddy.&lt;/p&gt;
&lt;p&gt;⭐&lt;/p&gt;
&lt;p&gt;But now it&amp;rsquo;s December 2021 &amp;ndash; I&amp;rsquo;m reflecting on my year of coding and I&amp;rsquo;m ashamed to say that, besides adding ~2000 lines to my Emacs configuration and a single blog post I haven&amp;rsquo;t actually &lt;em&gt;finished&lt;/em&gt; any side projects!&lt;/p&gt;
&lt;p&gt;I think it&amp;rsquo;s time I change that.&lt;/p&gt;
&lt;p&gt;I originally wrote the program in Clojure, partly to learn the idioms of the language, and partly to try out REPL-driven development, which Clojurians always claim is a &amp;ldquo;super power&amp;rdquo;.
I don&amp;rsquo;t think I used enough tooling to consider myself a repl-superman, but I did find the experience to be satisfying, conducive to &lt;em&gt;flow&lt;/em&gt;, and &lt;strong&gt;very&lt;/strong&gt; fun.&lt;/p&gt;
&lt;p&gt;For the uninitiated (or even the moderately initiated, like I was when I started), reading Clojure can be tricky, and as I documented my code with comments, I quickly realized the comments amounted to more lines than the code itself!&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s when I learned about literate programming.
Well, I had read some Knuth, so I was actually familiar with the &lt;em&gt;concept&lt;/em&gt; of literate programming (did you know TeX was originally written as a single file?), but I didn&amp;rsquo;t actually realize it was easy with Clojure until I watched &lt;a href=&#34;https://www.youtube.com/watch?v=bhNvwxFV5vU&#34;&gt;this video&lt;/a&gt; explaining the process plainly.
It looked like something I could do (especially since I had been using org-mode for notes for over 2 years by that point), so I did it.&lt;/p&gt;
&lt;h2 id=&#34;meta&#34;&gt;Meta&lt;/h2&gt;
&lt;p&gt;The following document will explain the entire process of developing the mondegreen generator algorithm, and include the code and results.&lt;/p&gt;
&lt;h2 id=&#34;what-am-i-doing&#34;&gt;What am I doing?&lt;/h2&gt;
&lt;p&gt;The first step in any problem-solving endeavor is to outline exactly what the problem is, and the scope of the solution.&lt;/p&gt;
&lt;p&gt;So what is the problem?
Well, I want a function that can take English text and produce English text which &lt;em&gt;sounds like&lt;/em&gt; the first, but is composed of different words.&lt;/p&gt;
&lt;p&gt;After some Googling, I discovered that this type of language trick is known as a &lt;em&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Mondegreen&#34;&gt;Mondegreen&lt;/a&gt;&lt;/em&gt; (or maybe more appropriately an &lt;em&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Mondegreen#Reverse_mondegreen&#34;&gt;Oronym&lt;/a&gt;&lt;/em&gt;, but I decided to go with &lt;em&gt;Mondegreen&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;So, what I want to create is a &lt;em&gt;Mondegreen generator&lt;/em&gt;, a function which produces a &lt;em&gt;Mondegreen&lt;/em&gt; given a list of words.&lt;/p&gt;
&lt;h2 id=&#34;overview-of-the-problem-solving-process&#34;&gt;Overview of the problem-solving process&lt;/h2&gt;
&lt;p&gt;Because I didn&amp;rsquo;t know exactly how to solve this problem when I began, I needed to enable myself to explore the problem space.&lt;/p&gt;
&lt;p&gt;This is where choice of technology becomes relevant.
I needed a highly &lt;em&gt;interactive&lt;/em&gt; environment, in order to develop solutions (and failures) as I went along.&lt;/p&gt;
&lt;p&gt;I chose Clojure as my implementation language, partly because I just wanted to use it (after binging Rich Hickey&amp;rsquo;s talks on YouTube), and partly because the REPL-driven development paradigm fit my problem nicely.&lt;/p&gt;
&lt;p&gt;So, I fired up a repl with &lt;code&gt;clj&lt;/code&gt;, and got to work.&lt;/p&gt;
&lt;h2 id=&#34;data&#34;&gt;Data&lt;/h2&gt;
&lt;p&gt;Well, I got my repl started, and realized I had no data to work with.
Data being the core of any program, I needed to make sure my sources would be sufficient.&lt;/p&gt;
&lt;h3 id=&#34;dictionary&#34;&gt;Dictionary&lt;/h3&gt;
&lt;p&gt;The first thing I knew I would need was an English dictionary.
Because my program would have to consume English text, it needed a way to distinguish English words from non-English words.&lt;/p&gt;
&lt;h3 id=&#34;phonemes&#34;&gt;Phonemes&lt;/h3&gt;
&lt;p&gt;Unfortunately for the English language, the way a word is spelled has little to do with how it &lt;em&gt;sounds&lt;/em&gt;, and for Mondegreens, the &lt;strong&gt;most important&lt;/strong&gt; thing about the words is how they sound!&lt;/p&gt;
&lt;p&gt;Luckily for me, I took an introduction to Linguistics course at my university, so I knew about &lt;em&gt;phonemes&lt;/em&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In phonology and linguistics, a phoneme &lt;em&gt;ˈfoʊniːm&lt;/em&gt; is a unit of sound that can distinguish one word from another in a particular language.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Phonemes are like the atoms of &lt;em&gt;phonetics&lt;/em&gt;, the indivisible &lt;em&gt;sounds&lt;/em&gt; a speaker makes to construct and distinguish words.&lt;/p&gt;
&lt;p&gt;For example, even though &amp;ldquo;read&amp;rdquo; and &amp;ldquo;read&amp;rdquo; are spelled the same, the constituent &lt;em&gt;phonemes&lt;/em&gt; help listeners discriminate between them:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;read -&amp;gt; rēd
read -&amp;gt; rĕd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The first is the &amp;ldquo;long-e&amp;rdquo; sound, like in the word &amp;ldquo;reed&amp;rdquo;, while the other is the &amp;ldquo;short-e&amp;rdquo; sound, like in the word &amp;ldquo;red&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;For my program, I would also need a way to map a word to the list of phonemes that compose it.
I searched Google (again) and came across the amazing &lt;strong&gt;Carnegie Melon Phonetic Dictionary&lt;/strong&gt;, which is free to use and download &lt;a href=&#34;http://www.speech.cs.cmu.edu/cgi-bin/cmudict&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;the-carnegie-melon-phonetic-dictionary&#34;&gt;The Carnegie Melon Phonetic Dictionary&lt;/h4&gt;
&lt;p&gt;The dictionary actually solves both of my data needs! First, it is a dictionary, a function with the signature:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;word -&amp;gt; boolean
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;verifying if a word is valid English, and also a &lt;em&gt;phonetic dictionary&lt;/em&gt;, a function with the signature:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;word -&amp;gt; [phoneme]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;giving the list of phonemes that compose a valid English word.
Lets explore the dictionary a bit.&lt;/p&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Phones&lt;/p&gt;
&lt;p&gt;This file (&lt;code&gt;cmudict-0.7b.phones&lt;/code&gt;) describes the phonemes in the English language, it isn&amp;rsquo;t very large, which is kind of amazing given the huge diversity of words their composition can produce:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;AA	vowel
AE	vowel
AH	vowel
AO	vowel
AW	vowel
AY	vowel
B	stop
CH	affricate
D	stop
DH	fricative
EH	vowel
ER	vowel
EY	vowel
F	fricative
G	stop
HH	aspirate
IH	vowel
IY	vowel
JH	affricate
K	stop
L	liquid
M	nasal
N	nasal
NG	nasal
OW	vowel
OY	vowel
P	stop
R	liquid
S	fricative
SH	fricative
T	stop
TH	fricative
UH	vowel
UW	vowel
V	fricative
W	semivowel
Y	semivowel
Z	fricative
ZH	fricative
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The first column is the symbol the dictionary uses to represent that phoneme.
Using the examples from earlier, we could translate to phonemes like so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;read -&amp;gt; &amp;#34;R IY D&amp;#34;
read -&amp;gt; &amp;#34;R EH D&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Exploring through code&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s parse this file to get a list of all the valid phonemes in our repl session.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(slurp &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;resources/cmudict-0.7b.phones&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&amp;#34;AA\tvowel\nAE\tvowel\nAH\tvowel\nAO\tvowel\nAW\tvowel\nAY\tvowel\nB\tstop\nCH\taffricate\nD\tstop\nDH\tfricative\nEH\tvowel\nER\tvowel\nEY\tvowel\nF\tfricative\nG\tstop\nHH\taspirate\nIH\tvowel\nIY\tvowel\nJH\taffricate\nK\tstop\nL\tliquid\nM\tnasal\nN\tnasal\nNG\tnasal\nOW\tvowel\nOY\tvowel\nP\tstop\nR\tliquid\nS\tfricative\nSH\tfricative\nT\tstop\nTH\tfricative\nUH\tvowel\nUW\tvowel\nV\tfricative\nW\tsemivowel\nY\tsemivowel\nZ\tfricative\nZH\tfricative\n&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Of course we will want to split the string by newlines:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;clojure.string/split-lines&lt;/span&gt; (slurp &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;resources/cmudict-0.7b.phones&amp;#34;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;[&amp;#34;AA\tvowel&amp;#34; &amp;#34;AE\tvowel&amp;#34; &amp;#34;AH\tvowel&amp;#34; &amp;#34;AO\tvowel&amp;#34; &amp;#34;AW\tvowel&amp;#34; &amp;#34;AY\tvowel&amp;#34; &amp;#34;B\tstop&amp;#34; &amp;#34;CH\taffricate&amp;#34; &amp;#34;D\tstop&amp;#34; &amp;#34;DH\tfricative&amp;#34; &amp;#34;EH\tvowel&amp;#34; &amp;#34;ER\tvowel&amp;#34; &amp;#34;EY\tvowel&amp;#34; &amp;#34;F\tfricative&amp;#34; &amp;#34;G\tstop&amp;#34; &amp;#34;HH\taspirate&amp;#34; &amp;#34;IH\tvowel&amp;#34; &amp;#34;IY\tvowel&amp;#34; &amp;#34;JH\taffricate&amp;#34; &amp;#34;K\tstop&amp;#34; &amp;#34;L\tliquid&amp;#34; &amp;#34;M\tnasal&amp;#34; &amp;#34;N\tnasal&amp;#34; &amp;#34;NG\tnasal&amp;#34; &amp;#34;OW\tvowel&amp;#34; &amp;#34;OY\tvowel&amp;#34; &amp;#34;P\tstop&amp;#34; &amp;#34;R\tliquid&amp;#34; &amp;#34;S\tfricative&amp;#34; &amp;#34;SH\tfricative&amp;#34; &amp;#34;T\tstop&amp;#34; &amp;#34;TH\tfricative&amp;#34; &amp;#34;UH\tvowel&amp;#34; &amp;#34;UW\tvowel&amp;#34; &amp;#34;V\tfricative&amp;#34; &amp;#34;W\tsemivowel&amp;#34; &amp;#34;Y\tsemivowel&amp;#34; &amp;#34;Z\tfricative&amp;#34; &amp;#34;ZH\tfricative&amp;#34;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And we also want to split on tabs (since this is a tab-separated file):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt; (mapcat &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;clojure.string/split&lt;/span&gt; % &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\t&amp;#34;&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;clojure.string/split-lines&lt;/span&gt; (slurp &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;resources/cmudict-0.7b.phones&amp;#34;&lt;/span&gt;)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;(&amp;#34;AA&amp;#34; &amp;#34;vowel&amp;#34; &amp;#34;AE&amp;#34; &amp;#34;vowel&amp;#34; &amp;#34;AH&amp;#34; &amp;#34;vowel&amp;#34; &amp;#34;AO&amp;#34; &amp;#34;vowel&amp;#34; &amp;#34;AW&amp;#34; &amp;#34;vowel&amp;#34; &amp;#34;AY&amp;#34; &amp;#34;vowel&amp;#34; &amp;#34;B&amp;#34; &amp;#34;stop&amp;#34; &amp;#34;CH&amp;#34; &amp;#34;affricate&amp;#34; &amp;#34;D&amp;#34; &amp;#34;stop&amp;#34; &amp;#34;DH&amp;#34; &amp;#34;fricative&amp;#34; &amp;#34;EH&amp;#34; &amp;#34;vowel&amp;#34; &amp;#34;ER&amp;#34; &amp;#34;vowel&amp;#34; &amp;#34;EY&amp;#34; &amp;#34;vowel&amp;#34; &amp;#34;F&amp;#34; &amp;#34;fricative&amp;#34; &amp;#34;G&amp;#34; &amp;#34;stop&amp;#34; &amp;#34;HH&amp;#34; &amp;#34;aspirate&amp;#34; &amp;#34;IH&amp;#34; &amp;#34;vowel&amp;#34; &amp;#34;IY&amp;#34; &amp;#34;vowel&amp;#34; &amp;#34;JH&amp;#34; &amp;#34;affricate&amp;#34; &amp;#34;K&amp;#34; &amp;#34;stop&amp;#34; &amp;#34;L&amp;#34; &amp;#34;liquid&amp;#34; &amp;#34;M&amp;#34; &amp;#34;nasal&amp;#34; &amp;#34;N&amp;#34; &amp;#34;nasal&amp;#34; &amp;#34;NG&amp;#34; &amp;#34;nasal&amp;#34; &amp;#34;OW&amp;#34; &amp;#34;vowel&amp;#34; &amp;#34;OY&amp;#34; &amp;#34;vowel&amp;#34; &amp;#34;P&amp;#34; &amp;#34;stop&amp;#34; &amp;#34;R&amp;#34; &amp;#34;liquid&amp;#34; &amp;#34;S&amp;#34; &amp;#34;fricative&amp;#34; &amp;#34;SH&amp;#34; &amp;#34;fricative&amp;#34; &amp;#34;T&amp;#34; &amp;#34;stop&amp;#34; &amp;#34;TH&amp;#34; &amp;#34;fricative&amp;#34; &amp;#34;UH&amp;#34; &amp;#34;vowel&amp;#34; &amp;#34;UW&amp;#34; &amp;#34;vowel&amp;#34; &amp;#34;V&amp;#34; &amp;#34;fricative&amp;#34; &amp;#34;W&amp;#34; &amp;#34;semivowel&amp;#34; &amp;#34;Y&amp;#34; &amp;#34;semivowel&amp;#34; &amp;#34;Z&amp;#34; &amp;#34;fricative&amp;#34; &amp;#34;ZH&amp;#34; &amp;#34;fricative&amp;#34;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You know what, let&amp;rsquo;s ignore the second column entirely, i.e. every 2nd entry (since we are only after the phonemes themselves):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(take-nth &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; (mapcat &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;clojure.string/split&lt;/span&gt; % &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\t&amp;#34;&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;clojure.string/split-lines&lt;/span&gt; (slurp &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;resources/cmudict-0.7b.phones&amp;#34;&lt;/span&gt;))))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;(&amp;#34;AA&amp;#34; &amp;#34;AE&amp;#34; &amp;#34;AH&amp;#34; &amp;#34;AO&amp;#34; &amp;#34;AW&amp;#34; &amp;#34;AY&amp;#34; &amp;#34;B&amp;#34; &amp;#34;CH&amp;#34; &amp;#34;D&amp;#34; &amp;#34;DH&amp;#34; &amp;#34;EH&amp;#34; &amp;#34;ER&amp;#34; &amp;#34;EY&amp;#34; &amp;#34;F&amp;#34; &amp;#34;G&amp;#34; &amp;#34;HH&amp;#34; &amp;#34;IH&amp;#34; &amp;#34;IY&amp;#34; &amp;#34;JH&amp;#34; &amp;#34;K&amp;#34; &amp;#34;L&amp;#34; &amp;#34;M&amp;#34; &amp;#34;N&amp;#34; &amp;#34;NG&amp;#34; &amp;#34;OW&amp;#34; &amp;#34;OY&amp;#34; &amp;#34;P&amp;#34; &amp;#34;R&amp;#34; &amp;#34;S&amp;#34; &amp;#34;SH&amp;#34; &amp;#34;T&amp;#34; &amp;#34;TH&amp;#34; &amp;#34;UH&amp;#34; &amp;#34;UW&amp;#34; &amp;#34;V&amp;#34; &amp;#34;W&amp;#34; &amp;#34;Y&amp;#34; &amp;#34;Z&amp;#34; &amp;#34;ZH&amp;#34;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, I think we will want a Set of phonemes, instead of a list, since there is really no order to these entries.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(set (take-nth &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; (mapcat &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;clojure.string/split&lt;/span&gt; % &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\t&amp;#34;&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;clojure.string/split-lines&lt;/span&gt; (slurp &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;resources/cmudict-0.7b.phones&amp;#34;&lt;/span&gt;)))))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;#{&amp;#34;T&amp;#34; &amp;#34;CH&amp;#34; &amp;#34;K&amp;#34; &amp;#34;HH&amp;#34; &amp;#34;UH&amp;#34; &amp;#34;AY&amp;#34; &amp;#34;AH&amp;#34; &amp;#34;OW&amp;#34; &amp;#34;L&amp;#34; &amp;#34;JH&amp;#34; &amp;#34;UW&amp;#34; &amp;#34;G&amp;#34; &amp;#34;EH&amp;#34; &amp;#34;M&amp;#34; &amp;#34;OY&amp;#34; &amp;#34;S&amp;#34; &amp;#34;Y&amp;#34; &amp;#34;EY&amp;#34; &amp;#34;Z&amp;#34; &amp;#34;R&amp;#34; &amp;#34;F&amp;#34; &amp;#34;AW&amp;#34; &amp;#34;IY&amp;#34; &amp;#34;B&amp;#34; &amp;#34;SH&amp;#34; &amp;#34;P&amp;#34; &amp;#34;V&amp;#34; &amp;#34;TH&amp;#34; &amp;#34;IH&amp;#34; &amp;#34;AA&amp;#34; &amp;#34;AO&amp;#34; &amp;#34;N&amp;#34; &amp;#34;DH&amp;#34; &amp;#34;W&amp;#34; &amp;#34;ZH&amp;#34; &amp;#34;NG&amp;#34; &amp;#34;D&amp;#34; &amp;#34;ER&amp;#34; &amp;#34;AE&amp;#34;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That looks pretty good, let&amp;rsquo;s save it into a variable:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;def &lt;/span&gt;phonemes (set (take-nth &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; (mapcat &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;clojure.string/split&lt;/span&gt; % &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\t&amp;#34;&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;clojure.string/split-lines&lt;/span&gt; (slurp &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;resources/cmudict-0.7b.phones&amp;#34;&lt;/span&gt;))))))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;#&amp;#39;user/phonemes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Fixing the &amp;ldquo;nested s-expressions&amp;rdquo; problem&lt;/p&gt;
&lt;p&gt;One ugly thing about the solution we just composed is that every time we want to apply a new function to the previous result, we have to nest that previous result &lt;em&gt;inside&lt;/em&gt; the new function call.
This leads to deeply nested expressions which can be difficult to read.&lt;/p&gt;
&lt;p&gt;Clojure&amp;rsquo;s answer to this problem is called the &amp;ldquo;threading macro&amp;rdquo; &lt;code&gt;-&amp;gt;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The below expression is equivalent to what we created above:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;def &lt;/span&gt;phonemes
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;-&amp;gt;&amp;gt;&lt;/span&gt;
   (slurp &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;resources/cmudict-0.7b.phones&amp;#34;&lt;/span&gt;)
   (&lt;span style=&#34;color:#a6e22e&#34;&gt;clojure.string/split-lines&lt;/span&gt;)
   (mapcat &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;clojure.string/split&lt;/span&gt; % &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\t&amp;#34;&lt;/span&gt;))
   (take-nth &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
   (&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;#&amp;#39;user/phonemes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Dict&lt;/p&gt;
&lt;p&gt;This is the mapping of English words to their phonemes, using the phones described above.&lt;/p&gt;
&lt;p&gt;It begins with a few lines of licensing comments (denoted by &amp;lsquo;;;;&#39;).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;;;; # CMUdict  --  Major Version: 0.07
;;;
;;; # $HeadURL: http://svn.code.sf.net/p/cmusphinx/code/trunk/cmudict/cmudict-0.7b $
;;; # $Date:: 2015-02-18 20:42:08 -0500 (Wed, 18 Feb 2015)      $:
;;; # $Id:: cmudict-0.7b 12857 2015-02-19 01:42:08Z air         $:
;;; # $Rev:: 12857                                              $:
;;; # $Author:: air                                             $:
;;;
;;; #
;;; # ========================================================================
;;; # Copyright (C) 1993-2015 Carnegie Mellon University. All rights reserved.
;;; #
;;; # Redistribution and use in source and binary forms, with or without
;;; # modification, are permitted provided that the following conditions
;;; # are met:
;;; #
;;; # 1. Redistributions of source code must retain the above copyright
;;; #    notice, this list of conditions and the following disclaimer.
;;; #    The contents of this file are deemed to be source code.
;;; #
;;; # 2. Redistributions in binary form must reproduce the above copyright
;;; #    notice, this list of conditions and the following disclaimer in
;;; #    the documentation and/or other materials provided with the
;;; #    distribution.
;;; #
;;; # This work was supported in part by funding from the Defense Advanced
;;; # Research Projects Agency, the Office of Naval Research and the National
;;; # Science Foundation of the United States of America, and by member
;;; # companies of the Carnegie Mellon Sphinx Speech Consortium. We acknowledge
;;; # the contributions of many volunteers to the expansion and improvement of
;;; # this dictionary.
;;; #
;;; # THIS SOFTWARE IS PROVIDED BY CARNEGIE MELLON UNIVERSITY ``AS IS&amp;#39;&amp;#39; AND
;;; # ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
;;; # THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
;;; # PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL CARNEGIE MELLON UNIVERSITY
;;; # NOR ITS EMPLOYEES BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
;;; # SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
;;; # LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
;;; # DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
;;; # THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
;;; # (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
;;; # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;;; #
;;; # ========================================================================
;;; #
;;;
;;;  NOTES  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;;  [20080401] (air)  New dict file format introduced
;;;   - comments (like this section) are allowed
;;;   - file name is major version; vers/rev information is now in the header
;;;
;;;
;;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And then continues to the dictionary itself, &lt;code&gt;cmudict-0.7b&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The first few-dozen lines are actually the phonetic pronunciations of symbols like &amp;ldquo;!&amp;rdquo;, &amp;ldquo;#&amp;rdquo;, etc. so they are a bit strange, but we can still see the structure the dictionary:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;!EXCLAMATION-POINT  EH2 K S K L AH0 M EY1 SH AH0 N P OY2 N T
&amp;#34;CLOSE-QUOTE  K L OW1 Z K W OW1 T
&amp;#34;DOUBLE-QUOTE  D AH1 B AH0 L K W OW1 T
&amp;#34;END-OF-QUOTE  EH1 N D AH0 V K W OW1 T
&amp;#34;END-QUOTE  EH1 N D K W OW1 T
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You might be asking &amp;ldquo;Why do some of the phonemes have numbers?&amp;rdquo;,
this is meant to indicate which phonemes are stressed, something I want to completely disregard (the whole point of a mondegreen is to stress different phonemes from the statement being deciphered).&lt;/p&gt;
&lt;p&gt;So, when we parse the dictionary, let&amp;rsquo;s make sure not to include those characters:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;def &lt;/span&gt;dictionary-chars &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;^[A-Z&amp;#39;\-\.\_]+&amp;#34;&lt;/span&gt;)

(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;normalize-string
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Converts a symbol found in the dictionary to just it&amp;#39;s phonetic part
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  (i.e. no stress)&amp;#34;&lt;/span&gt;
  [sym]
  (re-find dictionary-chars sym))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;#&amp;lsquo;user/dictionary-chars&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;#&amp;lsquo;user/normalize-string&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;normalize-string&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AH0&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&amp;#34;AH&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s test some examples in the repl to make sure the substitutions produce valid phonemes.
First, we need to get a list of all the lines in the dictionary:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;def &lt;/span&gt;dictionary-lines
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;-&amp;gt;&amp;gt;&lt;/span&gt;
  (slurp &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;resources/cmudict-0.7b&amp;#34;&lt;/span&gt;)
   (&lt;span style=&#34;color:#a6e22e&#34;&gt;clojure.string/split-lines&lt;/span&gt;)
   (filter (complement &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;.startsWith&lt;/span&gt; % &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;;&amp;#34;&lt;/span&gt;)))))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;#&amp;#39;user/dictionary-lines
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(take &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; dictionary-lines)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;(&amp;#34;!EXCLAMATION-POINT  EH2 K S K L AH0 M EY1 SH AH0 N P OY2 N T&amp;#34; &amp;#34;\&amp;#34;CLOSE-QUOTE  K L OW1 Z K W OW1 T&amp;#34; &amp;#34;\&amp;#34;DOUBLE-QUOTE  D AH1 B AH0 L K W OW1 T&amp;#34; &amp;#34;\&amp;#34;END-OF-QUOTE  EH1 N D AH0 V K W OW1 T&amp;#34; &amp;#34;\&amp;#34;END-QUOTE  EH1 N D K W OW1 T&amp;#34; &amp;#34;\&amp;#34;IN-QUOTES  IH1 N K W OW1 T S&amp;#34; &amp;#34;\&amp;#34;QUOTE  K W OW1 T&amp;#34; &amp;#34;\&amp;#34;UNQUOTE  AH1 N K W OW1 T&amp;#34; &amp;#34;#HASH-MARK  HH AE1 M AA2 R K&amp;#34; &amp;#34;#POUND-SIGN  P AW1 N D S AY2 N&amp;#34;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, what happens when a word has multiple possible pronunciations?
Let&amp;rsquo;s look at the entry for &amp;ldquo;THE&amp;rdquo;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;THE  DH AH0
THE(1)  DH AH1
THE(2)  DH IY0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We need to remove the &lt;code&gt;(1)&lt;/code&gt; and &lt;code&gt;(2)&lt;/code&gt; so that these spellings will be the same.
Luckily, we can normalize the spellings in the same way we normalized the phonemes, by disallowing numerics and parentheses.&lt;/p&gt;
&lt;p&gt;Then, we ought to split the dictionary lines into &lt;code&gt;(spelling phonemes)&lt;/code&gt; pairs, being sure to transform the spellings and phonemes into the normalized form we want (no numbered spellings, and no stress indicators on phonemes):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;def &lt;/span&gt;spellings+phonemes
  (map (&lt;span style=&#34;color:#66d9ef&#34;&gt;fn &lt;/span&gt;[line]
         (&lt;span style=&#34;color:#a6e22e&#34;&gt;-&amp;gt;&amp;gt;&lt;/span&gt;
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;clojure.string/split&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\s&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;; split lines by space&lt;/span&gt;
          (filter &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;not-empty&lt;/span&gt; %))           &lt;span style=&#34;color:#75715e&#34;&gt;; remove empty strings (from whitespace separation)&lt;/span&gt;
          (map normalize-string)            &lt;span style=&#34;color:#75715e&#34;&gt;; normalize&lt;/span&gt;
          (split-at &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)                      &lt;span style=&#34;color:#75715e&#34;&gt;; split into spelling + phonemes&lt;/span&gt;
          ((&lt;span style=&#34;color:#66d9ef&#34;&gt;fn &lt;/span&gt;[[[spelling] phonemes]] [spelling phonemes])))) &lt;span style=&#34;color:#75715e&#34;&gt;; destructure the spelling list&lt;/span&gt;
       dictionary-lines))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;#&amp;#39;user/spellings+phonemes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;rand-nth&lt;/span&gt; spellings+phonemes)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;[&amp;#34;SOUTHERN&amp;#39;S&amp;#34; (&amp;#34;S&amp;#34; &amp;#34;AH&amp;#34; &amp;#34;DH&amp;#34; &amp;#34;ER&amp;#34; &amp;#34;N&amp;#34; &amp;#34;Z&amp;#34;)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Much better.
I should check that all the &amp;ldquo;spellings&amp;rdquo; and &amp;ldquo;phonemes&amp;rdquo; are each non-empty, in case there were some other data anomalies I didn&amp;rsquo;t find at the beginning of the file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(filter (&lt;span style=&#34;color:#66d9ef&#34;&gt;fn &lt;/span&gt;[[spelling phonemes]] (or (&lt;span style=&#34;color:#a6e22e&#34;&gt;empty?&lt;/span&gt; spelling) (&lt;span style=&#34;color:#a6e22e&#34;&gt;empty?&lt;/span&gt; phonemes))) spellings+phonemes)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;(EH K S K L AH M EY SH AH N P OY N T)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;(K L OW Z K W OW T)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(D AH B AH L K W OW T)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(EH N D AH V K W OW T)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(EH N D K W OW T)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(IH N K W OW T S)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(K W OW T)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(AH N K W OW T)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(HH AE M AA R K)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(P AW N D S AY N)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(SH AA R P S AY N)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(P ER S EH N T)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(AE M P ER S AE N D)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(B IH G IH N P ER EH N Z)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(IH N P ER EH N TH AH S IY Z)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(L EH F T P ER EH N)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(OW P AH N P ER EH N TH AH S IY Z)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(P ER EH N)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(P ER EH N Z)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(P ER EH N TH AH S IY Z)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(K L OW Z P ER EH N)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(K L OW Z P ER EH N TH AH S IY Z)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(EH N D P ER EH N)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(EH N D P ER EH N Z)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(EH N D P ER EH N TH AH S IY Z)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(EH N D DH AH P ER EH N)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(P ER EH N)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(P ER EH N Z)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(R AY T P EH R AH N)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(AH N P ER EH N TH AH S IY Z)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(P L UH S)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(K AA M AH)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(S L AE SH)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(TH R IY D IY)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(TH R IY D IY)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(K OW L AH N)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(K W EH S CH AH N M AA R K)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(B R EY S)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(L EH F T B R EY S)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(OW P EH N B R EY S)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(K L OW Z B R EY S)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(R AY T B R EY S)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Ah, because those first bunch of entries in the dictionary contain special characters, their spelling maps to &lt;code&gt;nil&lt;/code&gt;. That&amp;rsquo;s fine, we can adjust our definition to simply omit the pairs starting with &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;def &lt;/span&gt;spellings+phonemes
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;-&amp;gt;&amp;gt;&lt;/span&gt;
   dictionary-lines
   (map (&lt;span style=&#34;color:#66d9ef&#34;&gt;fn &lt;/span&gt;[line]
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;-&amp;gt;&amp;gt;&lt;/span&gt;
           (&lt;span style=&#34;color:#a6e22e&#34;&gt;clojure.string/split&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\s&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;; split lines by space&lt;/span&gt;
           (filter &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;not-empty&lt;/span&gt; %))           &lt;span style=&#34;color:#75715e&#34;&gt;; remove empty strings (from whitespace separation)&lt;/span&gt;
           (map normalize-string)            &lt;span style=&#34;color:#75715e&#34;&gt;; normalize&lt;/span&gt;
           (split-at &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)                      &lt;span style=&#34;color:#75715e&#34;&gt;; split into spelling + phonemes&lt;/span&gt;
           ((&lt;span style=&#34;color:#66d9ef&#34;&gt;fn &lt;/span&gt;[[[spelling] phonemes]] [spelling phonemes]))))) &lt;span style=&#34;color:#75715e&#34;&gt;; destructure the spelling list&lt;/span&gt;
   (filter &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;((complement nil?) (first %)))))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;#&amp;#39;user/spellings+phonemes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;homo-phone-graph-s&#34;&gt;Homo[phone|graph]s&lt;/h2&gt;
&lt;p&gt;Something we haven&amp;rsquo;t contended with yet are &lt;em&gt;homophones&lt;/em&gt;, that is, words which have the same pronunciation, but distinct spellings (e.g. red and read).&lt;/p&gt;
&lt;p&gt;Dually, there is the problem of &lt;em&gt;homographs&lt;/em&gt;, that is, words which have the same spelling, but distinct pronunciations (e.g. the &amp;ldquo;long-e&amp;rdquo; read and the &amp;ldquo;short-e&amp;rdquo; read).&lt;/p&gt;
&lt;p&gt;Our dictionary has entries of each kind, let&amp;rsquo;s check them out&lt;/p&gt;
&lt;h3 id=&#34;homophones&#34;&gt;Homophones&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s look at homophones first.
Finding these things is not actually a trivial thing with such a large data set.
A naive solution might go through each entry and check the rest of the list to see if that spelling occurs again.&lt;/p&gt;
&lt;p&gt;However, because &lt;code&gt;spellings+phonemes&lt;/code&gt; is a list, this would mean &lt;code&gt;n&lt;/code&gt; comparisons for each of the &lt;code&gt;n&lt;/code&gt; entries, that&amp;rsquo;s &lt;code&gt;O(n^2)&lt;/code&gt;, and in this case &lt;code&gt;n&lt;/code&gt; is a large number (all words in the English dictionary), so that&amp;rsquo;s not quite going to work out for us.&lt;/p&gt;
&lt;p&gt;Luckily this is a &lt;em&gt;classic&lt;/em&gt; algorithms problem, and probably, like, question 3 on hackerrank or leetcode. I&amp;rsquo;ll spoil it for you.&lt;/p&gt;
&lt;p&gt;The answer is to use a map.&lt;/p&gt;
&lt;p&gt;As we traverse the list of &lt;code&gt;[spelling phonemes]&lt;/code&gt;, we insert each &lt;code&gt;spelling&lt;/code&gt; as the key of a map (ostensibly a constant-time operation), and use the &lt;code&gt;[phonemes]&lt;/code&gt; as the value. If we find another &lt;code&gt;spelling&lt;/code&gt; which is exactly the same, the key will match in our list, and we can append the newer &lt;code&gt;phonemes&lt;/code&gt; to the value.&lt;/p&gt;
&lt;p&gt;Clojure has an awesome standard library, and maps are bread-and-butter Clojure data structures, so I can avoid the whole &amp;ldquo;look up the key in the map, if it does not exist insert an array, otherwise append to that array&amp;rdquo; by using the standard function &lt;code&gt;merge-with&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the clojuredoc for &lt;code&gt;merge-with&lt;/code&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;clojure.core/merge-with
[f &amp;amp; maps]
Added in 1.0
Returns a map that consists of the rest of the maps conj-ed onto
the first.  If a key occurs in more than one map, the mapping(s)
from the latter (left-to-right) will be combined with the mapping in
the result by calling (f val-in-result val-in-latter).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ok, so how am I going to use this function to solve my problem?
I am going to convert each &lt;code&gt;[spelling phonemes]&lt;/code&gt; pair (which at this point more accurately represents a &lt;code&gt;[spelling pronunciation]&lt;/code&gt; pair) into a map of &lt;code&gt;{spelling [pronunciation]}&lt;/code&gt;, and then merge &lt;em&gt;all of those maps&lt;/em&gt; using the &lt;code&gt;into&lt;/code&gt; function to conjoin all the &lt;code&gt;[pronunciations]&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(into [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] [&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;[1 2 3 4 5 6]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s try it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;rand-nth&lt;/span&gt; (map (&lt;span style=&#34;color:#66d9ef&#34;&gt;fn &lt;/span&gt; [[spelling pronunciation]] {spelling [pronunciation]}) spellings+phonemes))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;{&amp;#34;HUGGED&amp;#34; [(&amp;#34;HH&amp;#34; &amp;#34;AH&amp;#34; &amp;#34;G&amp;#34; &amp;#34;D&amp;#34;)]}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Cool, so now we have a list of maps with 1 key-value pair each, we have to &lt;code&gt;reduce&lt;/code&gt; that to a single map with &lt;code&gt;merge-with&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;def &lt;/span&gt;word-&amp;gt;pronunciations
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;reduce&lt;/span&gt;
   (partial merge-with into)
   (map (&lt;span style=&#34;color:#66d9ef&#34;&gt;fn &lt;/span&gt; [[spelling pronunciation]] {spelling [pronunciation]}) spellings+phonemes)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;#&amp;#39;user/word-&amp;gt;pronunciations
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;.get&lt;/span&gt; word-&amp;gt;pronunciations &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ICE&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;.get&lt;/span&gt; word-&amp;gt;pronunciations &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CREAM&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;[(&amp;ldquo;AY&amp;rdquo; &amp;ldquo;S&amp;rdquo;)]&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;[(&amp;ldquo;K&amp;rdquo; &amp;ldquo;R&amp;rdquo; &amp;ldquo;IY&amp;rdquo; &amp;ldquo;M&amp;rdquo;)]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Hooray! We can now find the pronunciation for any English word.&lt;/p&gt;
&lt;h4 id=&#34;exploring-the-pronunciations&#34;&gt;Exploring the pronunciations&lt;/h4&gt;
&lt;p&gt;Let&amp;rsquo;s see if we can get a word with multiple pronunciations:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;rand-nth&lt;/span&gt; (filter (&lt;span style=&#34;color:#66d9ef&#34;&gt;fn &lt;/span&gt;[[k v]] (&amp;gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;.length&lt;/span&gt; v) &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)) word-&amp;gt;pronunciations))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;[&amp;#34;AYDAR&amp;#34; [(&amp;#34;AY&amp;#34; &amp;#34;D&amp;#34; &amp;#34;AA&amp;#34; &amp;#34;R&amp;#34;) (&amp;#34;EY&amp;#34; &amp;#34;D&amp;#34; &amp;#34;AA&amp;#34; &amp;#34;R&amp;#34;)]]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Hmm, I&amp;rsquo;m curious which word has the most pronunciations?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;[maxlen (apply max (map (&lt;span style=&#34;color:#66d9ef&#34;&gt;fn &lt;/span&gt;[[k v]] (&lt;span style=&#34;color:#a6e22e&#34;&gt;.length&lt;/span&gt; v)) word-&amp;gt;pronunciations))]
  (filter (&lt;span style=&#34;color:#66d9ef&#34;&gt;fn &lt;/span&gt;[[k v]] (&lt;span style=&#34;color:#a6e22e&#34;&gt;.equals&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;.length&lt;/span&gt; v) maxlen)) word-&amp;gt;pronunciations))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;([&amp;#34;M&amp;#34; [(&amp;#34;EH&amp;#34; &amp;#34;M&amp;#34;) (&amp;#34;EH&amp;#34; &amp;#34;M&amp;#34; &amp;#34;W&amp;#34; &amp;#34;AH&amp;#34; &amp;#34;N&amp;#34;) (&amp;#34;EH&amp;#34; &amp;#34;M&amp;#34; &amp;#34;T&amp;#34; &amp;#34;UW&amp;#34;) (&amp;#34;EH&amp;#34; &amp;#34;M&amp;#34; &amp;#34;TH&amp;#34; &amp;#34;R&amp;#34; &amp;#34;IY&amp;#34;) (&amp;#34;EH&amp;#34; &amp;#34;M&amp;#34; &amp;#34;F&amp;#34; &amp;#34;AO&amp;#34; &amp;#34;R&amp;#34;) (&amp;#34;EH&amp;#34; &amp;#34;M&amp;#34; &amp;#34;F&amp;#34; &amp;#34;AY&amp;#34; &amp;#34;V&amp;#34;)]] [&amp;#34;C&amp;#34; [(&amp;#34;S&amp;#34; &amp;#34;IY&amp;#34;) (&amp;#34;S&amp;#34; &amp;#34;IY&amp;#34; &amp;#34;W&amp;#34; &amp;#34;AH&amp;#34; &amp;#34;N&amp;#34;) (&amp;#34;S&amp;#34; &amp;#34;IY&amp;#34; &amp;#34;T&amp;#34; &amp;#34;UW&amp;#34;) (&amp;#34;S&amp;#34; &amp;#34;IY&amp;#34; &amp;#34;TH&amp;#34; &amp;#34;R&amp;#34; &amp;#34;IY&amp;#34;) (&amp;#34;S&amp;#34; &amp;#34;IY&amp;#34; &amp;#34;F&amp;#34; &amp;#34;AO&amp;#34; &amp;#34;R&amp;#34;) (&amp;#34;S&amp;#34; &amp;#34;IY&amp;#34; &amp;#34;F&amp;#34; &amp;#34;AY&amp;#34; &amp;#34;V&amp;#34;)]])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Oh, I guess &amp;ldquo;M1&amp;rdquo;, &amp;ldquo;M2&amp;rdquo;, &amp;ldquo;M3&amp;rdquo;&amp;hellip; and &amp;ldquo;C1&amp;rdquo;, &amp;ldquo;C2&amp;rdquo;, &amp;ldquo;C3&amp;rdquo; &amp;hellip; are all valid words in the dictionary and I broke them by removing the numbers. Whatever.&lt;/p&gt;
&lt;p&gt;How about the next-most pronunciations?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;[maxlen (apply max (map (&lt;span style=&#34;color:#66d9ef&#34;&gt;fn &lt;/span&gt;[[k v]] (&lt;span style=&#34;color:#a6e22e&#34;&gt;.length&lt;/span&gt; v)) word-&amp;gt;pronunciations))]
  (filter (&lt;span style=&#34;color:#66d9ef&#34;&gt;fn &lt;/span&gt;[[k v]] (= (&lt;span style=&#34;color:#a6e22e&#34;&gt;.length&lt;/span&gt; v) (- maxlen &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))) word-&amp;gt;pronunciations))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;([&amp;#34;CAT-&amp;#34; [(&amp;#34;K&amp;#34; &amp;#34;AE&amp;#34; &amp;#34;T&amp;#34; &amp;#34;W&amp;#34; &amp;#34;AO&amp;#34; &amp;#34;N&amp;#34;) (&amp;#34;K&amp;#34; &amp;#34;AE&amp;#34; &amp;#34;T&amp;#34; &amp;#34;T&amp;#34; &amp;#34;UW&amp;#34;) (&amp;#34;K&amp;#34; &amp;#34;AE&amp;#34; &amp;#34;T&amp;#34; &amp;#34;TH&amp;#34; &amp;#34;R&amp;#34; &amp;#34;IY&amp;#34;) (&amp;#34;K&amp;#34; &amp;#34;AE&amp;#34; &amp;#34;T&amp;#34; &amp;#34;F&amp;#34; &amp;#34;AO&amp;#34; &amp;#34;R&amp;#34;) (&amp;#34;K&amp;#34; &amp;#34;AE&amp;#34; &amp;#34;T&amp;#34; &amp;#34;S&amp;#34; &amp;#34;IH&amp;#34; &amp;#34;K&amp;#34; &amp;#34;S&amp;#34;)]])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Hurricanes, cool. Again, I removed the numeric value from the word itself, but that shouldn&amp;rsquo;t really matter.&lt;/p&gt;
&lt;p&gt;I want to find the first real word though&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;[maxlen (apply max (map (&lt;span style=&#34;color:#66d9ef&#34;&gt;fn &lt;/span&gt;[[k v]] (&lt;span style=&#34;color:#a6e22e&#34;&gt;.length&lt;/span&gt; v)) word-&amp;gt;pronunciations))]
  (take &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; (filter (&lt;span style=&#34;color:#66d9ef&#34;&gt;fn &lt;/span&gt;[[k v]] (= (&lt;span style=&#34;color:#a6e22e&#34;&gt;.length&lt;/span&gt; v) (- maxlen &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;))) word-&amp;gt;pronunciations)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;([&amp;#34;GRANTED&amp;#34; [(&amp;#34;G&amp;#34; &amp;#34;R&amp;#34; &amp;#34;AE&amp;#34; &amp;#34;N&amp;#34; &amp;#34;T&amp;#34; &amp;#34;AH&amp;#34; &amp;#34;D&amp;#34;) (&amp;#34;G&amp;#34; &amp;#34;R&amp;#34; &amp;#34;AE&amp;#34; &amp;#34;N&amp;#34; &amp;#34;T&amp;#34; &amp;#34;IH&amp;#34; &amp;#34;D&amp;#34;) (&amp;#34;G&amp;#34; &amp;#34;R&amp;#34; &amp;#34;AE&amp;#34; &amp;#34;N&amp;#34; &amp;#34;AH&amp;#34; &amp;#34;D&amp;#34;) (&amp;#34;G&amp;#34; &amp;#34;R&amp;#34; &amp;#34;AE&amp;#34; &amp;#34;N&amp;#34; &amp;#34;IH&amp;#34; &amp;#34;D&amp;#34;)]])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is pretty interesting! The last two pronunciations completely omit the &amp;ldquo;T&amp;rdquo; sound from &amp;ldquo;GRANTED&amp;rdquo;, which is known linguistically as &lt;em&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Elision&#34;&gt;elision&lt;/a&gt;&lt;/em&gt;.
We say that the &amp;ldquo;T&amp;rdquo; was &lt;em&gt;elided&lt;/em&gt; from the pronunciation of &amp;ldquo;GRANTED&amp;rdquo;.&lt;/p&gt;
&lt;h4 id=&#34;what-makes-a-map&#34;&gt;What makes a Map?&lt;/h4&gt;
&lt;p&gt;Why did I name our data structure &lt;code&gt;word-&amp;gt;pronunciations&lt;/code&gt;?
The &lt;code&gt;A-&amp;gt;B&lt;/code&gt; naming convention is common in Lisp-like languages to describe functions which map one data type to another, but what we&amp;rsquo;ve created is supposed to be a map, not a function, right?
Well, Clojure doesn&amp;rsquo;t make the distinction so severe, since the map data structure is basically a function that converts from the &lt;code&gt;key&lt;/code&gt; type to the &lt;code&gt;value&lt;/code&gt; type.&lt;/p&gt;
&lt;p&gt;In most languages, (like JavaScript), if you want to get a value out of a map (object in JavaScript), you have to write code that looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;my_map&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and to call a function you have to write code that looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;my_function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;but in Clojure, if you have a map, you can call it like you would a function (since it &lt;em&gt;is&lt;/em&gt; a function):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;({&lt;span style=&#34;color:#e6db74&#34;&gt;:a&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;} &lt;span style=&#34;color:#e6db74&#34;&gt;:a&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We are using this fact to our advantage in our definition of &lt;code&gt;word-&amp;gt;pronunciations&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; A map is a data structure (object)...&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;.get&lt;/span&gt; word-&amp;gt;pronunciations &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ICE&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;;; ...but also a function!&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;word-&amp;gt;pronunciations&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ICE&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;[(&amp;ldquo;AY&amp;rdquo; &amp;ldquo;S&amp;rdquo;)]&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;[(&amp;ldquo;AY&amp;rdquo; &amp;ldquo;S&amp;rdquo;)]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;homographs&#34;&gt;Homographs&lt;/h3&gt;
&lt;p&gt;Now, homographs are a very similar problem, except in reverse. This time, we want words which have the same pronunciation to be associated.&lt;/p&gt;
&lt;p&gt;Lucky for us, Clojure&amp;rsquo;s maps and lists are fantastic data structures, and compose beautifully.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(= &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AY&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;S&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AY&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;S&amp;#34;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is awesome. If two lists contain the same strings, then they&amp;rsquo;re treated as equivalent!&lt;/p&gt;
&lt;p&gt;JavaScript (arrays, since there are no &amp;ldquo;lists&amp;rdquo;) is not so friendly:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AY&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;S&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AY&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;S&amp;#34;&lt;/span&gt;]);
&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AY&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;S&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AY&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;S&amp;#34;&lt;/span&gt;]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;false
false
undefined
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The implication here is that our lists &lt;strong&gt;will collide in our map&lt;/strong&gt;, meaning to get a function mapping &lt;code&gt;pronunciation-&amp;gt;words&lt;/code&gt;, all we need to do is reverse the keys and values:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;def &lt;/span&gt;pronunciation-&amp;gt;words
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;reduce&lt;/span&gt;
   (partial merge-with into)
   (map (&lt;span style=&#34;color:#66d9ef&#34;&gt;fn &lt;/span&gt; [[spelling pronunciation]] {pronunciation [spelling]}) spellings+phonemes)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;#&amp;#39;user/pronunciation-&amp;gt;words
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;pronunciation-&amp;gt;words&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AY&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;S&amp;#34;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;[&amp;#34;ICE&amp;#34;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;sentence-pronunciations&#34;&gt;&lt;code&gt;sentence-&amp;gt;pronunciations&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Now that we can go from a word to a list of pronunciations (&lt;code&gt;word-&amp;gt;pronunciation&lt;/code&gt;), it shouldn&amp;rsquo;t be too hard to go from a list of words (AKA a sentence) to a list of pronunciations (&lt;code&gt;sentence-&amp;gt;pronunciations&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;The only complication: what should we do if a word has multiple pronunciations? How should you pronounce that sentence?&lt;/p&gt;
&lt;p&gt;Well, each time a word has multiple pronunciations, we should probably return a new pronunciation for the whole sentence.
The word &amp;ldquo;READ&amp;rdquo; has 2 pronunciations:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;word-&amp;gt;pronunciations&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;READ&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;[(&amp;#34;R&amp;#34; &amp;#34;EH&amp;#34; &amp;#34;D&amp;#34;) (&amp;#34;R&amp;#34; &amp;#34;IY&amp;#34; &amp;#34;D&amp;#34;)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So the (nonsensical) sentence &amp;ldquo;READ READ&amp;rdquo; should produce 4 pronunciations:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;(&amp;#34;R&amp;#34; &amp;#34;EH&amp;#34; &amp;#34;D&amp;#34; &amp;#34;R&amp;#34; &amp;#34;EH&amp;#34; &amp;#34;D&amp;#34;)
(&amp;#34;R&amp;#34; &amp;#34;EH&amp;#34; &amp;#34;D&amp;#34; &amp;#34;R&amp;#34; &amp;#34;IY&amp;#34; &amp;#34;D&amp;#34;)
(&amp;#34;R&amp;#34; &amp;#34;IY&amp;#34; &amp;#34;D&amp;#34; &amp;#34;R&amp;#34; &amp;#34;EH&amp;#34; &amp;#34;D&amp;#34;)
(&amp;#34;R&amp;#34; &amp;#34;IY&amp;#34; &amp;#34;D&amp;#34; &amp;#34;R&amp;#34; &amp;#34;IY&amp;#34; &amp;#34;D&amp;#34;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This type of combination is a &lt;em&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Cartesian_product&#34;&gt;cartesian product&lt;/a&gt;&lt;/em&gt;, and Clojure has an implementation built into the &lt;code&gt;clojure.math.combinatorics&lt;/code&gt; &lt;a href=&#34;https://github.com/clojure/math.combinatorics&#34;&gt;namespace&lt;/a&gt;.
Unfortunately that namespace needs to be included as a leiningen dependency, and I haven&amp;rsquo;t figured out yet how to get that to work correctly with the literate programming environment I&amp;rsquo;m using (org-babel), so I&amp;rsquo;ll just include a cartesian-product function in this script&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;cart [colls]
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Cartesian product on the list of collections&amp;#34;&lt;/span&gt;
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;empty?&lt;/span&gt; colls)
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(())
    (for [more (&lt;span style=&#34;color:#a6e22e&#34;&gt;cart&lt;/span&gt; (rest colls))
          x (first colls)]
      (cons x more))))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;#&amp;#39;user/cart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;cart&lt;/span&gt; [[]])
(&lt;span style=&#34;color:#a6e22e&#34;&gt;cart&lt;/span&gt; [[] [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]])
(&lt;span style=&#34;color:#a6e22e&#34;&gt;cart&lt;/span&gt; [[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]])
(&lt;span style=&#34;color:#a6e22e&#34;&gt;cart&lt;/span&gt; [[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]])
(&lt;span style=&#34;color:#a6e22e&#34;&gt;cart&lt;/span&gt; [[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]])
(&lt;span style=&#34;color:#a6e22e&#34;&gt;cart&lt;/span&gt; [[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] [&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;]])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;()&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;((1 2))&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;((1 2) (3 2))&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;((1 2) (3 2) (1 4) (3 4))&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;((1 2 5) (3 2 5) (1 4 5) (3 4 5) (1 2 6) (3 2 6) (1 4 6) (3 4 6))&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Given this definition, the pronunciations of a sentence are merely the cartesian product of the pronunciations of all the words (normalized to capital letters and split by spaces, of course):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;sentence-&amp;gt;words
  [sentence]
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;-&amp;gt;&lt;/span&gt;
   sentence
   (&lt;span style=&#34;color:#a6e22e&#34;&gt;clojure.string/upper-case&lt;/span&gt;)
   (&lt;span style=&#34;color:#a6e22e&#34;&gt;clojure.string/split&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\s&amp;#34;&lt;/span&gt;)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;#&amp;#39;user/sentence-&amp;gt;words
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sentence-&amp;gt;words&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Luke I am your father.&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;[&amp;#34;LUKE&amp;#34; &amp;#34;I&amp;#34; &amp;#34;AM&amp;#34; &amp;#34;YOUR&amp;#34; &amp;#34;FATHER.&amp;#34;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;sentence-&amp;gt;pronunciation
  [sentence]
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;cart&lt;/span&gt; (map word-&amp;gt;pronunciations (&lt;span style=&#34;color:#a6e22e&#34;&gt;sentence-&amp;gt;words&lt;/span&gt; sentence))))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;#&amp;#39;user/sentence-&amp;gt;pronunciation
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sentence-&amp;gt;pronunciation&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;READ READ&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;(((&amp;#34;R&amp;#34; &amp;#34;EH&amp;#34; &amp;#34;D&amp;#34;) (&amp;#34;R&amp;#34; &amp;#34;EH&amp;#34; &amp;#34;D&amp;#34;)) ((&amp;#34;R&amp;#34; &amp;#34;IY&amp;#34; &amp;#34;D&amp;#34;) (&amp;#34;R&amp;#34; &amp;#34;EH&amp;#34; &amp;#34;D&amp;#34;)) ((&amp;#34;R&amp;#34; &amp;#34;EH&amp;#34; &amp;#34;D&amp;#34;) (&amp;#34;R&amp;#34; &amp;#34;IY&amp;#34; &amp;#34;D&amp;#34;)) ((&amp;#34;R&amp;#34; &amp;#34;IY&amp;#34; &amp;#34;D&amp;#34;) (&amp;#34;R&amp;#34; &amp;#34;IY&amp;#34; &amp;#34;D&amp;#34;)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Actually, we should flatten each of those results as well, to get a list of strings instead:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;sentence-&amp;gt;pronunciation
  [sentence]
  (map flatten (&lt;span style=&#34;color:#a6e22e&#34;&gt;cart&lt;/span&gt; (map word-&amp;gt;pronunciations (&lt;span style=&#34;color:#a6e22e&#34;&gt;sentence-&amp;gt;words&lt;/span&gt; sentence)))))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;#&amp;#39;user/sentence-&amp;gt;pronunciation
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sentence-&amp;gt;pronunciation&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;READ READ&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;R&lt;/th&gt;
&lt;th&gt;EH&lt;/th&gt;
&lt;th&gt;D&lt;/th&gt;
&lt;th&gt;R&lt;/th&gt;
&lt;th&gt;EH&lt;/th&gt;
&lt;th&gt;D&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;R&lt;/td&gt;
&lt;td&gt;IY&lt;/td&gt;
&lt;td&gt;D&lt;/td&gt;
&lt;td&gt;R&lt;/td&gt;
&lt;td&gt;EH&lt;/td&gt;
&lt;td&gt;D&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;R&lt;/td&gt;
&lt;td&gt;EH&lt;/td&gt;
&lt;td&gt;D&lt;/td&gt;
&lt;td&gt;R&lt;/td&gt;
&lt;td&gt;IY&lt;/td&gt;
&lt;td&gt;D&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;R&lt;/td&gt;
&lt;td&gt;IY&lt;/td&gt;
&lt;td&gt;D&lt;/td&gt;
&lt;td&gt;R&lt;/td&gt;
&lt;td&gt;IY&lt;/td&gt;
&lt;td&gt;D&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sentence-&amp;gt;pronunciation&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Please not while I&amp;#39;m eating&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;P&lt;/th&gt;
&lt;th&gt;L&lt;/th&gt;
&lt;th&gt;IY&lt;/th&gt;
&lt;th&gt;Z&lt;/th&gt;
&lt;th&gt;N&lt;/th&gt;
&lt;th&gt;AA&lt;/th&gt;
&lt;th&gt;T&lt;/th&gt;
&lt;th&gt;W&lt;/th&gt;
&lt;th&gt;AY&lt;/th&gt;
&lt;th&gt;L&lt;/th&gt;
&lt;th&gt;AY&lt;/th&gt;
&lt;th&gt;M&lt;/th&gt;
&lt;th&gt;IY&lt;/th&gt;
&lt;th&gt;T&lt;/th&gt;
&lt;th&gt;IH&lt;/th&gt;
&lt;th&gt;NG&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;P&lt;/td&gt;
&lt;td&gt;L&lt;/td&gt;
&lt;td&gt;IY&lt;/td&gt;
&lt;td&gt;Z&lt;/td&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;td&gt;AA&lt;/td&gt;
&lt;td&gt;T&lt;/td&gt;
&lt;td&gt;HH&lt;/td&gt;
&lt;td&gt;W&lt;/td&gt;
&lt;td&gt;AY&lt;/td&gt;
&lt;td&gt;L&lt;/td&gt;
&lt;td&gt;AY&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;IY&lt;/td&gt;
&lt;td&gt;T&lt;/td&gt;
&lt;td&gt;IH&lt;/td&gt;
&lt;td&gt;NG&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P&lt;/td&gt;
&lt;td&gt;L&lt;/td&gt;
&lt;td&gt;IY&lt;/td&gt;
&lt;td&gt;Z&lt;/td&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;td&gt;AA&lt;/td&gt;
&lt;td&gt;T&lt;/td&gt;
&lt;td&gt;W&lt;/td&gt;
&lt;td&gt;AY&lt;/td&gt;
&lt;td&gt;L&lt;/td&gt;
&lt;td&gt;AH&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;IY&lt;/td&gt;
&lt;td&gt;T&lt;/td&gt;
&lt;td&gt;IH&lt;/td&gt;
&lt;td&gt;NG&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P&lt;/td&gt;
&lt;td&gt;L&lt;/td&gt;
&lt;td&gt;IY&lt;/td&gt;
&lt;td&gt;Z&lt;/td&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;td&gt;AA&lt;/td&gt;
&lt;td&gt;T&lt;/td&gt;
&lt;td&gt;HH&lt;/td&gt;
&lt;td&gt;W&lt;/td&gt;
&lt;td&gt;AY&lt;/td&gt;
&lt;td&gt;L&lt;/td&gt;
&lt;td&gt;AH&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;IY&lt;/td&gt;
&lt;td&gt;T&lt;/td&gt;
&lt;td&gt;IH&lt;/td&gt;
&lt;td&gt;NG&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;pronunciation-sentence&#34;&gt;&lt;code&gt;pronunciation-&amp;gt;sentence&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Now that we can generate the pronunciation of a sentence, we will want to be able to go from a pronunciation to a sentence.&lt;/p&gt;
&lt;p&gt;The way I imagine the mondegreen generator working is roughly:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;sentence -&amp;gt; pronunciation -&amp;gt; sentence
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;where the first &lt;code&gt;sentence&lt;/code&gt; and last &lt;code&gt;sentence&lt;/code&gt; are different.
Consider the classic:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;I scream -&amp;gt; ice cream
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As we can see, their pronunciations match exactly:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sentence-&amp;gt;pronunciation&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;I scream&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;sentence-&amp;gt;pronunciation&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ice cream&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;((&amp;ldquo;AY&amp;rdquo; &amp;ldquo;S&amp;rdquo; &amp;ldquo;K&amp;rdquo; &amp;ldquo;R&amp;rdquo; &amp;ldquo;IY&amp;rdquo; &amp;ldquo;M&amp;rdquo;))&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;((&amp;ldquo;AY&amp;rdquo; &amp;ldquo;S&amp;rdquo; &amp;ldquo;K&amp;rdquo; &amp;ldquo;R&amp;rdquo; &amp;ldquo;IY&amp;rdquo; &amp;ldquo;M&amp;rdquo;))&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;So how can we go from that representation to either of the two sentences?&lt;/p&gt;
&lt;h3 id=&#34;trie&#34;&gt;Trie&lt;/h3&gt;
&lt;p&gt;What we will need is a way to, given a phoneme, get a list of the possible phonemes which are &lt;strong&gt;part of a valid English word&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;So, if given just &lt;code&gt;&amp;quot;AY&amp;quot;&lt;/code&gt;, this function should tell us that, indeed &lt;code&gt;&amp;quot;AY&amp;quot;&lt;/code&gt; is part of the valid word &lt;code&gt;I&lt;/code&gt;, but &lt;em&gt;also&lt;/em&gt; that &lt;code&gt;&amp;quot;S&amp;quot;&lt;/code&gt; is a valid continuation after &lt;code&gt;&amp;quot;AY&amp;quot;&lt;/code&gt; (since &lt;code&gt;&amp;quot;S&amp;quot;&lt;/code&gt; is the next phoneme in &lt;code&gt;&amp;quot;ICE&amp;quot;&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;I think it was my freshman-year &lt;em&gt;Fundamentals of Computer Programming&lt;/em&gt; professor &lt;a href=&#34;https://www.ccs.neu.edu/home/shivers/&#34;&gt;Olin Shivers&lt;/a&gt; (but he might have been quoting someone) who said (and I&amp;rsquo;m probably poorly paraphrasing):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Your data structures must be smart so your algorithms can be dumb.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I thought this was a &lt;em&gt;&lt;a href=&#34;http://www.cs.yale.edu/homes/perlis-alan/quotes.html&#34;&gt;perlism&lt;/a&gt;&lt;/em&gt; (whom professor Shivers was fond of), but I couldn&amp;rsquo;t find it in the list.&lt;/p&gt;
&lt;p&gt;Well, what we want here is a data structure which is smart enough to answer our question.&lt;/p&gt;
&lt;p&gt;I immediately considered the &lt;em&gt;trie&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s awesome, just a nested map, but powerful enough to be the core data structure powering &lt;a href=&#34;https://lucene.apache.org/&#34;&gt;Lucene&lt;/a&gt; (which in turn &lt;a href=&#34;https://www.endava.com/en/blog/Engineering/2021/Elasticsearch-and-apache-lucene-fundamentals-behind-the-relevance-score&#34;&gt;powers ElasticSearch&lt;/a&gt;).
Tries are all about &lt;em&gt;re(trie)val&lt;/em&gt;, they retrieve information based on partial data.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://mjdiloreto.github.io/ox-hugo/2021-12-27_17-59-32_.jpeg&#34; alt=&#34;&#34;&gt;
(excuse the German, it was the best diagram I could find on DuckDuckGo)&lt;/p&gt;
&lt;p&gt;Our trie will be a potentially 26-ary tree (one for each possible next letter), which we will choose to represent as nested maps, with nodes representing either letters or complete terms.&lt;/p&gt;
&lt;p&gt;In our case though, the nodes won&amp;rsquo;t be letters, but phonemes!
That way, we can traverse the trie, looking for the next phoneme in our sentence.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s try constructing the trie.
We can use the same map-merging trick we used to create &lt;code&gt;word-&amp;gt;phonemes&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I want to create the following map for the word &amp;ldquo;READ&amp;rdquo;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;{ &amp;#34;R&amp;#34; { &amp;#34;EH&amp;#34; { &amp;#34;D&amp;#34; &amp;#34;What to associate here?&amp;#34; }}}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This should embed the phoneme structure, but when we actually finish a word we have to indicate that, while not blocking any further phonemes.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll choose to use the keyword &lt;code&gt;:word&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;{ &amp;#34;R&amp;#34; { &amp;#34;EH&amp;#34; { &amp;#34;D&amp;#34; { :word &amp;#34;RED&amp;#34; &amp;#34;IY&amp;#34; { :word &amp;#34;READY&amp;#34; ... more phonemes ... } } }}}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;word-&amp;gt;nested-map
  [phones word]
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;empty?&lt;/span&gt; phones)
    { &lt;span style=&#34;color:#e6db74&#34;&gt;:word&lt;/span&gt; word }
    { &lt;span style=&#34;color:#e6db74&#34;&gt;:word&lt;/span&gt; nil
      (first phones) (&lt;span style=&#34;color:#a6e22e&#34;&gt;word-&amp;gt;nested-map&lt;/span&gt; (rest phones) word)}))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;#&amp;#39;user/word-&amp;gt;nested-map
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;word-&amp;gt;nested-map&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;R&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;EH&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;D&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RED&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;{:word , &amp;#34;R&amp;#34; {:word , &amp;#34;EH&amp;#34; {:word , &amp;#34;D&amp;#34; {:word &amp;#34;RED&amp;#34;}}}}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now to merge.&lt;/p&gt;
&lt;p&gt;Unfortunately Clojure&amp;rsquo;s &lt;code&gt;merge-with&lt;/code&gt; function only works for a single level of map, but we will want to &lt;code&gt;deep-merge&lt;/code&gt; them.
Actually, we&amp;rsquo;ll have to &lt;code&gt;deep-merge-with&lt;/code&gt; them, since some of the phoneme maps are bound to collide.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m not above using other people&amp;rsquo;s code, and the &lt;a href=&#34;https://clojuredocs.org&#34;&gt;clojuredocs&lt;/a&gt; website has awesome comments with community suggestions.
I pulled this implementation from the comments on the built-in &lt;code&gt;merge-with&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;deep-merge-with
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://clojuredocs.org/clojure.core/merge-with#example-5b80843ae4b00ac801ed9e74
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  Like merge-with, but merges maps recursively, applying the given fn
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  only when there&amp;#39;s a non-map at a particular level.&amp;#34;&lt;/span&gt;
  [f &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; maps]
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;apply&lt;/span&gt;
   (&lt;span style=&#34;color:#66d9ef&#34;&gt;fn &lt;/span&gt;m [&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; maps]
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(every? map? maps)
       (apply merge-with m maps)
       (apply f maps)))
   maps))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;#&amp;#39;user/deep-merge-with
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;deep-merge-with&lt;/span&gt; + {&lt;span style=&#34;color:#e6db74&#34;&gt;:a&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;:b&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;:c&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:d&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;:x&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:y&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;}} &lt;span style=&#34;color:#e6db74&#34;&gt;:e&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;} &lt;span style=&#34;color:#e6db74&#34;&gt;:f&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;}
                   {&lt;span style=&#34;color:#e6db74&#34;&gt;:a&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;:b&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;:c&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:d&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;:z&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;} &lt;span style=&#34;color:#e6db74&#34;&gt;:z&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;} &lt;span style=&#34;color:#e6db74&#34;&gt;:e&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;}})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;{:a {:b {:c 3, :d {:x 1, :y 2, :z 9}, :z 3}, :e 103}, :f 4}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, we will also need a way to handle our &lt;em&gt;homophones&lt;/em&gt;, so &lt;code&gt;:word&lt;/code&gt; will actually have to be an array, and the function we &lt;code&gt;merge-with&lt;/code&gt; will have to be able to handle insert into that array.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;merge-with-nil
  [a b]
  (cond (nil? a) b
        (nil? b) a
        &lt;span style=&#34;color:#e6db74&#34;&gt;:else&lt;/span&gt; (into a b)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;#&amp;#39;user/merge-with-
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;merge-with-nil&lt;/span&gt; nil nil)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;merge-with-nil&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] nil)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;merge-with-nil&lt;/span&gt; nil [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])
(&lt;span style=&#34;color:#a6e22e&#34;&gt;merge-with-nil&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;[1]&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;[1]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[1 2]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;So now creating our trie is simple:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;def &lt;/span&gt;pronunciations-trie
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;apply&lt;/span&gt;
   deep-merge-with
   merge-with-nil
   (map (&lt;span style=&#34;color:#66d9ef&#34;&gt;fn &lt;/span&gt;[[pronunciation word]] (&lt;span style=&#34;color:#a6e22e&#34;&gt;word-&amp;gt;nested-map&lt;/span&gt; pronunciation word)) pronunciation-&amp;gt;words)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;#&amp;#39;user/pronunciations-trie
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To get at words in the trie, we need to recursively &lt;code&gt;get&lt;/code&gt; phonemes, and finally select the word:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;-&amp;gt;&lt;/span&gt;
 pronunciations-trie
 (&lt;span style=&#34;color:#a6e22e&#34;&gt;.get&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;R&amp;#34;&lt;/span&gt;)
 (&lt;span style=&#34;color:#a6e22e&#34;&gt;.get&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;EH&amp;#34;&lt;/span&gt;)
 (&lt;span style=&#34;color:#a6e22e&#34;&gt;.get&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;D&amp;#34;&lt;/span&gt;)
 (&lt;span style=&#34;color:#e6db74&#34;&gt;:word&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;[&amp;#34;READ&amp;#34; &amp;#34;READE&amp;#34; &amp;#34;RED&amp;#34; &amp;#34;REDD&amp;#34;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can use Clojure&amp;rsquo;s &lt;code&gt;loop&lt;/code&gt; macro to define a function which will check if a list of phonemes is a valid pronunciation of some English word.&lt;/p&gt;
&lt;p&gt;In our case we don&amp;rsquo;t just want to return &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;, but the actual trie structure that the pronunciation results in.
This will let us continue to look up words based on where we leave off.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;lookup-pronunciation
  [pronunciation]
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;loop &lt;/span&gt;[remaining pronunciation
         trie pronunciations-trie]
    (cond (&lt;span style=&#34;color:#a6e22e&#34;&gt;empty?&lt;/span&gt; remaining) trie
          (nil? trie) nil
          &lt;span style=&#34;color:#e6db74&#34;&gt;:else&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;recur&lt;/span&gt; (rest remaining) (&lt;span style=&#34;color:#a6e22e&#34;&gt;trie&lt;/span&gt; (first remaining))))))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;#&amp;#39;user/lookup-pronunciation
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;:word&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;lookup-pronunciation&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;R&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;EH&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;D&amp;#34;&lt;/span&gt;]))
(&lt;span style=&#34;color:#e6db74&#34;&gt;:word&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;lookup-pronunciation&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;D&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;EY&amp;#34;&lt;/span&gt;]))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;[&amp;ldquo;READ&amp;rdquo; &amp;ldquo;READE&amp;rdquo; &amp;ldquo;RED&amp;rdquo; &amp;ldquo;REDD&amp;rdquo;]&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;[&amp;ldquo;DAE&amp;rdquo; &amp;ldquo;DAY&amp;rdquo; &amp;ldquo;DAYE&amp;rdquo; &amp;ldquo;DE&amp;rdquo; &amp;ldquo;DEY&amp;rdquo;]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;weird-results&#34;&gt;Weird Results&lt;/h4&gt;
&lt;p&gt;Honestly, some of  these results are weird.
If I was playing this game and came across &amp;ldquo;DE&amp;rdquo; I would probably pronounce it as &lt;code&gt;[&amp;quot;D&amp;quot; &amp;quot;EE&amp;quot;]&lt;/code&gt; not &lt;code&gt;[&amp;quot;D&amp;quot; &amp;quot;EY&amp;quot;]&lt;/code&gt;.
One way we can consider fixing this is by finding a list of the &lt;em&gt;most common&lt;/em&gt; English words, and filter our original dictionary to only include those words.
That &lt;em&gt;ought&lt;/em&gt; to exclude the weirder words like &lt;code&gt;&amp;quot;DE&amp;quot;, &amp;quot;READE&amp;quot;, &amp;quot;REDD&amp;quot;&lt;/code&gt; etc.&lt;/p&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt;  Do that. I don&amp;rsquo;t have a list of the most common words yet.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;substitutions&#34;&gt;Substitutions&lt;/h3&gt;
&lt;p&gt;A key aspect of the Mondegreens which I haven&amp;rsquo;t discussed yet are sound substitutions.
For example, many Mondegreens will slightly change a syllable here or there to through the reader off slightly, but usually the sound will be sufficiently close so the reader can still guess correctly.
The type of substitutions I see are usually phonetically similar, like &lt;code&gt;&amp;quot;D&amp;quot;-&amp;gt;&amp;quot;T&amp;quot;&lt;/code&gt; (both are known linguistically as &lt;code&gt;frontal stops&lt;/code&gt;, where &lt;code&gt;&amp;quot;D&amp;quot;&lt;/code&gt; is the &lt;em&gt;alveolar stop&lt;/em&gt; and &lt;code&gt;&amp;quot;T&amp;quot;&lt;/code&gt; is the &lt;em&gt;dental stop&lt;/em&gt;. &lt;code&gt;&amp;quot;D&amp;quot;&lt;/code&gt; is &lt;em&gt;voiced&lt;/em&gt; (your throat hums when you pronounce it), and &lt;code&gt;&amp;quot;T&amp;quot;&lt;/code&gt; is &lt;em&gt;unvoiced&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Mathematically, when we want to express equivalence between objects, we can put them in the same &lt;em&gt;Set&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve created a list of Sets of phonemes which I consider to be valid substitutions for each other in our game, but these, while guided by my limited knowledge of phonetics, are more or less arbitrary.&lt;/p&gt;
&lt;p&gt;Singleton classes represent phonemes which I don&amp;rsquo;t think should be replaced with anything else.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;def &lt;/span&gt;equivalence-classes
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;It would be better to base these substitutions on some kind of linguistic data. I bet it exists.&amp;#34;&lt;/span&gt;
  [&lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AA&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AO&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AW&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AH&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;UH&amp;#34;&lt;/span&gt;} &lt;span style=&#34;color:#75715e&#34;&gt;; all pretty similar vowel sounds&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AY&amp;#34;&lt;/span&gt;}
   &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;B&amp;#34;&lt;/span&gt;}
   &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CH&amp;#34;&lt;/span&gt;}
   &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;D&amp;#34;&lt;/span&gt;}
   &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DH&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TH&amp;#34;&lt;/span&gt;} &lt;span style=&#34;color:#75715e&#34;&gt;; The difference in the &amp;#34;TH&amp;#34; sound between &amp;#34;these&amp;#34; and &amp;#34;teeth&amp;#34;&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;EH&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IH&amp;#34;&lt;/span&gt;}
   &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;EY&amp;#34;&lt;/span&gt;} &lt;span style=&#34;color:#75715e&#34;&gt;; Maybe can be paired up?&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ER&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;R&amp;#34;&lt;/span&gt;}
   &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;F&amp;#34;&lt;/span&gt;}
   &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;G&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;K&amp;#34;&lt;/span&gt;} &lt;span style=&#34;color:#75715e&#34;&gt;; voiced vs. unvoiced glottal stops&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HH&amp;#34;&lt;/span&gt; nil} &lt;span style=&#34;color:#75715e&#34;&gt;; The &amp;#34;H&amp;#34; sounds often gets deleted from mondegreens, so this indicates it is equivalent to no sound.&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IY&amp;#34;&lt;/span&gt;} &lt;span style=&#34;color:#75715e&#34;&gt;; Maybe goes with &amp;#34;IH&amp;#34;, but probably not &amp;#34;EH&amp;#34;... Maybe these shouldn&amp;#39;t be sets?&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;JH&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ZH&amp;#34;&lt;/span&gt;} &lt;span style=&#34;color:#75715e&#34;&gt;; I forget the linguistic difference between these, but it&amp;#39;s &amp;#34;EDGE&amp;#34; vs. &amp;#34;JACQUE&amp;#34;&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;L&amp;#34;&lt;/span&gt;}
   &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;M&amp;#34;&lt;/span&gt;}
   &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;N&amp;#34;&lt;/span&gt;}
   &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NG&amp;#34;&lt;/span&gt;} &lt;span style=&#34;color:#75715e&#34;&gt;; Can go with N+G when splitting one phoneme into multiple is allowed.&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;OW&amp;#34;&lt;/span&gt;} &lt;span style=&#34;color:#75715e&#34;&gt;; All diphthongs can probably go with their constituent monophthongs. e.g. AA+UW&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;OY&amp;#34;&lt;/span&gt;}
   &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;P&amp;#34;&lt;/span&gt;}
   &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SH&amp;#34;&lt;/span&gt;} &lt;span style=&#34;color:#75715e&#34;&gt;; Maybe belongs with &amp;#34;S&amp;#34;&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;T&amp;#34;&lt;/span&gt;} &lt;span style=&#34;color:#75715e&#34;&gt;; Can this go with &amp;#34;D&amp;#34;? Is that too jarring?&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;V&amp;#34;&lt;/span&gt;}
   &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;W&amp;#34;&lt;/span&gt;}
   &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Y&amp;#34;&lt;/span&gt;}
   &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;S&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Z&amp;#34;&lt;/span&gt;}])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;#&amp;#39;user/equivalence-classes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is honestly a pretty conservative interpretation of which phonemes are close enough for our game, and if I were to really perfect this program, this is where I would focus.&lt;/p&gt;
&lt;p&gt;Now that we have the classes, we can answer the question &amp;ldquo;Given a phoneme, what are its valid replacements for our game?&amp;quot;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;valid-replacements
  [phoneme]
  (mapcat (partial apply vector) (filter &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;%&lt;/span&gt; phoneme) equivalence-classes)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;#&amp;#39;user/valid-replacements
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;valid-replacements&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AY&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;valid-replacements&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AA&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;valid-replacements&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;S&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;valid-replacements&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Z&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;valid-replacements&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HH&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;(&amp;ldquo;AY&amp;rdquo;)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;(&amp;ldquo;UH&amp;rdquo; &amp;ldquo;AH&amp;rdquo; &amp;ldquo;AW&amp;rdquo; &amp;ldquo;AA&amp;rdquo; &amp;ldquo;AO&amp;rdquo;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(&amp;ldquo;S&amp;rdquo; &amp;ldquo;Z&amp;rdquo;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(&amp;ldquo;S&amp;rdquo; &amp;ldquo;Z&amp;rdquo;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;( &amp;ldquo;HH&amp;rdquo;)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;finding-a-sentence-given-a-pronunciation&#34;&gt;Finding a sentence given a pronunciation&lt;/h3&gt;
&lt;p&gt;Now to combine what we have done so far.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s manually walk through an example sentence that we know works so that we can piece together our algorithm.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&amp;#34;I SCREAM&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;First, we turn it into a pronunciation:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sentence-&amp;gt;pronunciation&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;I SCREAM&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;((&amp;#34;AY&amp;#34; &amp;#34;S&amp;#34; &amp;#34;K&amp;#34; &amp;#34;R&amp;#34; &amp;#34;IY&amp;#34; &amp;#34;M&amp;#34;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Cool, only 1 possible pronunciation to worry about.&lt;/p&gt;
&lt;p&gt;Next, we need to recursively ask whether our phonemes make up a word:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;lookup-pronunciation&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AY&amp;#34;&lt;/span&gt;])
 &lt;span style=&#34;color:#75715e&#34;&gt;; no?&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;lookup-pronunciation&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AY&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;S&amp;#34;&lt;/span&gt;])
 &lt;span style=&#34;color:#75715e&#34;&gt;; no?&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;lookup-pronunciation&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AY&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;S&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;K&amp;#34;&lt;/span&gt;])
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Or whether any of the valid replacements for each of our phonemes make up a word:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;pronunciation-&amp;gt;sentence
  [pronunciation]
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;letfn&lt;/span&gt; [(&lt;span style=&#34;color:#a6e22e&#34;&gt;find-pronuns&lt;/span&gt;
            [prev-phones next-phones]
            (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;[answer (&lt;span style=&#34;color:#e6db74&#34;&gt;:word&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;lookup-pronunciation&lt;/span&gt; prev-phones))]
              (cond (&lt;span style=&#34;color:#a6e22e&#34;&gt;empty?&lt;/span&gt; next-phones) answer  &lt;span style=&#34;color:#75715e&#34;&gt;; whether or not it is valid, we have no more phonemes to work with&lt;/span&gt;
                    answer (cons answer (&lt;span style=&#34;color:#a6e22e&#34;&gt;find-pronuns&lt;/span&gt; [] next-phones)) &lt;span style=&#34;color:#75715e&#34;&gt;; we found a real word, just worry about the next set of phonemes then&lt;/span&gt;
                    &lt;span style=&#34;color:#e6db74&#34;&gt;:else&lt;/span&gt; (reduce (&lt;span style=&#34;color:#66d9ef&#34;&gt;fn &lt;/span&gt;[acc x] (or acc (&lt;span style=&#34;color:#a6e22e&#34;&gt;find-pronuns&lt;/span&gt; (conj prev-phones x) (rest next-phones))))
                                  nil
                                  (&lt;span style=&#34;color:#a6e22e&#34;&gt;valid-replacements&lt;/span&gt; (first next-phones))))))]
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;find-pronuns&lt;/span&gt; [] pronunciation)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;#&amp;#39;user/pronunciation-&amp;gt;sentence
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;pronunciation-&amp;gt;sentence&lt;/span&gt; (first (&lt;span style=&#34;color:#a6e22e&#34;&gt;sentence-&amp;gt;pronunciation&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;I SCREAM&amp;#34;&lt;/span&gt;)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;([&amp;#34;AI&amp;#34; &amp;#34;AY&amp;#34; &amp;#34;AYE&amp;#34; &amp;#34;EYE&amp;#34; &amp;#34;I&amp;#34; &amp;#34;I.&amp;#34;] &amp;#34;SCREAM&amp;#34;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ok, so we got our original sentence more or less.
To prevent that, let&amp;rsquo;s pass in the a set of the words in the original sentence, and make sure we don&amp;rsquo;t return any of those.
Technically this will exclude a set of potential solutions where a word in the original sentence occurs somewhere completely different in the Mondegreen sentence, e.g. if you had the sentence &amp;ldquo;I SCREAM ICE-CREAM&amp;rdquo;, a valid Mondegreen would technically be &amp;ldquo;ICE-CREAM I SCREAM&amp;rdquo;, but I&amp;rsquo;ll just ignore that set of solutions in favor of something which doesn&amp;rsquo;t contain &lt;em&gt;any&lt;/em&gt; words from the original.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;pronunciation-&amp;gt;sentence
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Can this series of phonemes be parsed as a collection of English words? Find one answer containing no words from the set of words in the original sentence.&amp;#34;&lt;/span&gt;
  [pronunciation original-sentence]
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;letfn&lt;/span&gt; [(&lt;span style=&#34;color:#a6e22e&#34;&gt;word?&lt;/span&gt; [phones]
            (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;[words (&lt;span style=&#34;color:#e6db74&#34;&gt;:word&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;lookup-pronunciation&lt;/span&gt; phones))]
              (and (not (some &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;original-sentence&lt;/span&gt; %) words)) (first words))))
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;search-substitutions&lt;/span&gt;
            [prev-phones next-phones]
            (reduce (&lt;span style=&#34;color:#66d9ef&#34;&gt;fn &lt;/span&gt;[acc x] (or acc (&lt;span style=&#34;color:#a6e22e&#34;&gt;find-pronuns&lt;/span&gt; (conj prev-phones x) (rest next-phones))))
                    nil
                    (&lt;span style=&#34;color:#a6e22e&#34;&gt;valid-replacements&lt;/span&gt; (first next-phones))))
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;find-pronuns&lt;/span&gt; [prev-phones next-phones]
            (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;[answer (&lt;span style=&#34;color:#a6e22e&#34;&gt;word?&lt;/span&gt; prev-phones)]
              (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
                (&lt;span style=&#34;color:#a6e22e&#34;&gt;empty?&lt;/span&gt; next-phones) (when answer (list answer))
                answer (if-let [rest-of-sentence (&lt;span style=&#34;color:#a6e22e&#34;&gt;find-pronuns&lt;/span&gt; [] next-phones)]
                         (cons answer rest-of-sentence)
                         (&lt;span style=&#34;color:#a6e22e&#34;&gt;search-substitutions&lt;/span&gt; prev-phones next-phones))
                &lt;span style=&#34;color:#e6db74&#34;&gt;:else&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;search-substitutions&lt;/span&gt; prev-phones next-phones))))]
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;find-pronuns&lt;/span&gt; [] pronunciation)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;#&amp;#39;user/pronunciation-&amp;gt;sentence
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We achieve this by taking the set of words from the original sentence and comparing the possible word for the phonemes so far against that set.&lt;/p&gt;
&lt;p&gt;So in the &lt;code&gt;&amp;quot;I SCREAM&amp;quot;&lt;/code&gt; example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;pronunciation-&amp;gt;sentence&lt;/span&gt; (first (&lt;span style=&#34;color:#a6e22e&#34;&gt;sentence-&amp;gt;pronunciation&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;I SCREAM&amp;#34;&lt;/span&gt;)) (set (&lt;span style=&#34;color:#a6e22e&#34;&gt;sentence-&amp;gt;words&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;I SCREAM&amp;#34;&lt;/span&gt;)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;(&amp;#34;ICE&amp;#34; &amp;#34;CREAM&amp;#34;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So in this case, the algorithm found &lt;code&gt;&amp;quot;I&amp;quot;&lt;/code&gt; as a possible word for the phoneme list  &lt;code&gt;&#39;(&amp;quot;AY&amp;quot;)&lt;/code&gt;, but since that was part of our original sentence, it disregarded it and continued until it found &lt;code&gt;&amp;quot;ICE&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(set (&lt;span style=&#34;color:#a6e22e&#34;&gt;sentence-&amp;gt;words&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;I SCREAM&amp;#34;&lt;/span&gt;))
(&lt;span style=&#34;color:#e6db74&#34;&gt;:word&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;lookup-pronunciation&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AY&amp;#34;&lt;/span&gt;)))
(some &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;((set (&lt;span style=&#34;color:#a6e22e&#34;&gt;sentence-&amp;gt;words&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;I SCREAM&amp;#34;&lt;/span&gt;)) %) (&lt;span style=&#34;color:#e6db74&#34;&gt;:word&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;lookup-pronunciation&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AY&amp;#34;&lt;/span&gt;))))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;#{&amp;ldquo;SCREAM&amp;rdquo; &amp;ldquo;I&amp;rdquo;}&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;[&amp;ldquo;AI&amp;rdquo; &amp;ldquo;AY&amp;rdquo; &amp;ldquo;AYE&amp;rdquo; &amp;ldquo;EYE&amp;rdquo; &amp;ldquo;I&amp;rdquo; &amp;ldquo;I.&amp;quot;]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ldquo;I&amp;rdquo;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;mondegreen&#34;&gt;Mondegreen&lt;/h2&gt;
&lt;p&gt;Now that we have &lt;code&gt;pronunciation-&amp;gt;sentence&lt;/code&gt;, we basically have our entire mondegreen generator.
All that&amp;rsquo;s left is to expose a convenient wrapper to do the parsing of inputs.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;mondegreen
  [sentence]
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;[sentence-phonemes (&lt;span style=&#34;color:#a6e22e&#34;&gt;sentence-&amp;gt;pronunciation&lt;/span&gt; sentence)
        sentence-words (set (&lt;span style=&#34;color:#a6e22e&#34;&gt;sentence-&amp;gt;words&lt;/span&gt; sentence))]
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;pronunciation-&amp;gt;sentence&lt;/span&gt; (first sentence-phonemes) sentence-words)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;#&amp;#39;user/mondegreen
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;mondegreen&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;I SCREAM&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;mondegreen&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ICE-CREAM&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;mondegreen&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PLEASE NOT WHILE I&amp;#39;M EATING&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;mondegreen&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SOMEONE STOLE MY LEMON TREE&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;(&amp;ldquo;ICE&amp;rdquo; &amp;ldquo;CREAM&amp;rdquo;)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;(&amp;ldquo;AI&amp;rdquo; &amp;ldquo;SCREAM&amp;rdquo;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(&amp;ldquo;PLEA&amp;rdquo; &amp;ldquo;SNOUT&amp;rdquo; &amp;ldquo;WAI&amp;rdquo; &amp;ldquo;LAI&amp;rdquo; &amp;ldquo;ME&amp;rdquo; &amp;ldquo;TENG&amp;rdquo;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(&amp;ldquo;SOME&amp;rdquo; &amp;ldquo;ONCE&amp;rdquo; &amp;ldquo;TOAL&amp;rdquo; &amp;ldquo;MILE&amp;rdquo; &amp;ldquo;EH&amp;rdquo; &amp;ldquo;MUN&amp;rdquo; &amp;ldquo;TER&amp;rdquo; &amp;ldquo;E&amp;rdquo;)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;One of the implications of this particular algorithm is that it will prefer the shortest words first. This also decreases search time, but could lead to boring results over time. The same short words, like &amp;ldquo;EH&amp;rdquo;, &amp;ldquo;E&amp;rdquo;, &amp;ldquo;TER&amp;rdquo;, comprising only one or two phonemes will appear most often. You would be hard-pressed to find two- or three-syllable results ever appear. Maybe these will be improvements I will make, but I&amp;rsquo;m actually working on an implementation of the same exact program in SBCL Prolog, so I might never need to put in that work here ;)&lt;/p&gt;
</description>
       </item>
       
       <item>
         <title>Meditations: Selected Quotations</title>
         <link>https://mjdiloreto.github.io/posts/meditations-quotations/</link>
         <pubDate>Sun, 25 Jul 2021 20:26:00 -0500</pubDate>
         
         <guid>https://mjdiloreto.github.io/posts/meditations-quotations/</guid>
         <description>&lt;p&gt;While reading Marcus Aurelius&amp;rsquo;s &lt;em&gt;Meditations&lt;/em&gt;, I was struck by the consistent focus on a few central themes.
It reminded me of the propaganda technique, &amp;ldquo;What I say three times is true&amp;rdquo;.
Marcus repeated the same ideas over and over, drilling into himself the mindset he was trying to cultivate.
It&amp;rsquo;s a glimpse not only into the life of a great man, but a personal journey into the person he &lt;span class=&#34;underline&#34;&gt;strove&lt;/span&gt; to be.&lt;/p&gt;
&lt;p&gt;I picked up the Gregory Hays translation at Barnes and Noble by chance.
I was about to go on vacation, it was a paperback for under $10, and I needed something to read on the beach. I recommend this translation over the older translations for ease of reading, and the excellent introduction.&lt;/p&gt;
&lt;p&gt;During my first reading I only managed a few pages in each sitting, since I would often have to think through the terse yet illuminating verses, but I quickly found myself returning to the book after a few hours for another session.
I&amp;rsquo;m normally a habitual reader, only reading for an hour or so each night, and half-an-hour in the morning, but with &lt;em&gt;Meditations&lt;/em&gt; I was captivated.&lt;/p&gt;
&lt;p&gt;Immediately after I finished the twelfth book (each book comprising only around a dozen pages), I knew I had to start back at the beginning, rereading every sentence with an understanding of the gestalt the first readthrough had given me.
I felt the repetition solidify my understanding, and like dogma, strengthen my confidence in the ancient truths revealed by the short passages.&lt;/p&gt;
&lt;p&gt;I was reminded of men I admired in my life.
I saw the strongest features of my mother - her steadfastness and indifference to the opinions of others.&lt;/p&gt;
&lt;p&gt;On this second reading I began to mark passages that I found particularly poignant.
On the third, I again marked passages in the same way.
After the third reading, I kept the set of quotations which I had marked on both my second and third readings, resulting in the list of meditations which I found most compelling.
With this list I ascribed names to the themes that I saw in each one, things like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Self-Determination&lt;/li&gt;
&lt;li&gt;Work&lt;/li&gt;
&lt;li&gt;Virtue&lt;/li&gt;
&lt;li&gt;Truth&lt;/li&gt;
&lt;li&gt;Death&lt;/li&gt;
&lt;li&gt;Eternity&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The rest of this document is that list of meditations, marked with the themes I found and small notes I wrote along the way. They are presented in the order they appear in the book. I have also marked some as &lt;em&gt;favorites&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Like Hunter S. Thompson&amp;rsquo;s practice of copying Hemingway and Fitzgerald hoping that reenacting their genius would have some profound effect on his own writing, I hope that the practice of writing (and rewriting) this selection of meditations will help me think and act in their principled way.&lt;/p&gt;
&lt;div class=&#34;icons&#34; data-icons=&#34;sins virtue&#34; data-chapter=&#34;2.10&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;In comparing sins (the way people do) Theophrastus says that the ones committed out of desire are worse than the ones committed out of anger: which is good philosophy. The angry man seems to turn his back on reason out of a kind of pain and inner convulsion. But the man motivated by desire, who is mastered by pleasure, seems somehow more self-indulgent, less manly in his sins. Theophrastus is right, and philosophically sound, to say that the sin committed out of pleasure deserves a harsher rebuke than the one committed out of pain. The angry man is more like a victim of wrongdoing, provoked by pain to anger. The other man rushes into wrongdoing on his own, moved to action by desire.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;Hays notes that this technically is not a stoic viewpoint, since stoicism maintains no metric on the &amp;ldquo;wrongness&amp;rdquo; of sins. Somehow it seems even more stoic for Marcus to hold positions contrary to the school he is associated with. Even if contradictory, whatever resonates with Reason, or aligns with his own nature is truthful.&lt;/p&gt;
&lt;div class=&#34;icons&#34; data-icons=&#34;work happiness expedience&#34; data-chapter=&#34;3.12&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;If you do the job in a principled way, with diligence, energy and patience, if you keep yourself free of distractions, and keep the spirit inside you undamaged, as if you might have to give it back at any moment &amp;ndash;
If you can embrace this without fear or expectation &amp;ndash; can find fulfillment in what you&amp;rsquo;re doing now, as Nature intended, and in superhuman truthfulness (every word, every utterance) &amp;ndash; then your life will be happy.
No one can prevent that.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;I love that Marcus uses &amp;ldquo;diligence, energy and patience&amp;rdquo; here. I find it very easy - when I&amp;rsquo;m eager - to let energy take over, and lead me down the wrong path, whether it&amp;rsquo;s biting off more than I can chew, &lt;em&gt;scope creep&lt;/em&gt;, or just doing a rushed job.&lt;/p&gt;
&lt;p&gt;There is something very appealing about the type of absolute focus Marcus displays in his meditations, as though his every waking moment is spent reflecting on his nature and on doing the right things.&lt;/p&gt;
&lt;div class=&#34;icons&#34; data-icons=&#34;harm self-determination&#34; data-chapter=&#34;4.7&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;Choose not to be harmed &amp;ndash; and you won&amp;rsquo;t feel harmed.
Don&amp;rsquo;t feel harmed &amp;ndash; and you haven&amp;rsquo;t been harmed.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;A principle I&amp;rsquo;ve held since I was a child, taught to me by my mother.&lt;/p&gt;
&lt;div class=&#34;icons&#34; data-icons=&#34;harm character&#34; data-chapter=&#34;4.8&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;It can ruin your life only if it ruins your character.
Otherwise it cannot harm you &amp;ndash; inside or out.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;!--quoteend--&gt;
&lt;div class=&#34;icons&#34; data-icons=&#34;death&#34; data-chapter=&#34;4.41&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;A little wisp of soul carrying a corpse.&amp;rdquo; - Epictetus&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Memento mori&lt;/em&gt; - a powerful motivator too often ignored as macabre. We can choose to accept and remind ourselves of our mortality, or ignore it until the terrifying day we cannot, wishing we had, and acted on it.&lt;/p&gt;
&lt;div class=&#34;icons&#34; data-icons=&#34;eternity favorite&#34; data-chapter=&#34;4.43&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;Time is a river, a violent current of events, glimpsed once and already carried past us.
Another follows and is gone.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;I reread this meditation more than any other - memorized it and repeated it to myself.&lt;/p&gt;
&lt;p&gt;I like the imagery here, and strangely recognized its relation to software.&lt;/p&gt;
&lt;p&gt;Rich Hickey&amp;rsquo;s opinion of software design centers around time as a process, &amp;ldquo;a violent current of events&amp;rdquo;, and holds that software should &lt;em&gt;glimpse&lt;/em&gt; the immutable world in those instances, and let the world continue to evolve as events carry it forward. Software should not stop the world in order to change it, just as we cannot stop the world to impose our will on it.&lt;/p&gt;
&lt;div class=&#34;icons&#34; data-icons=&#34;self-determination&#34; data-chapter=&#34;5.19&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;Things have no hold on the soul. They have no access to it, cannot move or direct it. It is moved and directed by itself alone. It takes the things before it and interprets them as it sees fit.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;!--quoteend--&gt;
&lt;div class=&#34;icons&#34; data-icons=&#34;truth&#34; data-chapter=&#34;6.3&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;Look inward. Don&amp;rsquo;t let the true nature or value of anything elude you.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;This meditation is a good example of why the Gregory Hays translation is the best in my opinion for modern readers. The older translations are:&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Look to what is within: do not allow the intrinsic quality or the worth of any one fact to escape you.&amp;rdquo; translated by Arthur Spenser Loat Farquharson in his 1994 &lt;em&gt;The Meditations of the Empereror Marcus Antoninus&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The George Long translation &lt;em&gt;The Meditations of Marcus Aurelius&lt;/em&gt; written in 1910, says &amp;ldquo;Look within. Let neither the peculiar quality of anything nor its value escape thee.&amp;rdquo; All the other meditations are obscured in this translation as well.&lt;/p&gt;
&lt;p&gt;Even older is Meric Casaubon&amp;rsquo;s 1634 translation in &lt;em&gt;Marcus Aurelius Antoninus, His Meditations concerning himselfe&lt;/em&gt;, &amp;ldquo;Look in, let not either the proper quality, or the true worth
of anything pass thee, before thou hast fully apprehended it&amp;rdquo;. I actually prefer this particular translation to the George Long one.&lt;/p&gt;
&lt;p&gt;If I had read any of these older translations first I might not have been as enthralled as I was with the &lt;em&gt;Meditations&lt;/em&gt;. Hays clearly substituted modern phrases, and took great care to simplify the translation as clearly and concisely as possible. I think the shorter passage has the greatest impact as well.&lt;/p&gt;
&lt;div class=&#34;icons&#34; data-icons=&#34;virtue favorite&#34; data-chapter=&#34;6.6&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;The best revenge is not to be like that.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;!--quoteend--&gt;
&lt;div class=&#34;icons&#34; data-icons=&#34;virtue favorite&#34; data-chapter=&#34;6.16&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;What is it in ourselves that we should prize?&lt;/p&gt;
&lt;p&gt;Not just transpiration (even plants do that).
Or respiration (even beasts and wild animals breathe).
Or being struck by passing thoughts.
Or jerked like a puppet by your own impulses.
Or moving in herds.
Or eating, and relieving yourself afterwards.&lt;/p&gt;
&lt;p&gt;Then what is to be prized?
An audience clapping? No. No more than the clacking of their tongues. Which is all that public praise amounts to &amp;ndash; a clacking of tongues.
So we throw out other people&amp;rsquo;s recognition. What&amp;rsquo;s left for us to prize?
I think it&amp;rsquo;s this: to do (and not do) what we were designed for.
That&amp;rsquo;s the goal of all trades, all arts, and what each of them aims at: that the thing they create should do what it was designed to do. The nurseryman who cares for the vines, the horse trainer, the dog breeder &amp;ndash; this is what they aim at. And teaching and education &amp;ndash; what else are they trying to accomplish?
So that&amp;rsquo;s what we should prize. Hold on to that, and you won&amp;rsquo;t be tempted to aim at anything else.
And if you can&amp;rsquo;t stop prizing a lot of other things? Then you&amp;rsquo;ll never be free &amp;ndash; free, independent, imperturbable. Because you&amp;rsquo;ll always be envious and jealous, afraid that people might come and take it all away from you. Plotting against those who have them &amp;ndash; those things you prize. People who need those things are bound to be a mess &amp;ndash; and bound to take out their frustrations on the gods. Whereas to respect your own mind &amp;ndash; to prize it &amp;ndash; will leave you satisfied with your own self, well integrated into your community and in tune with the gods as well &amp;ndash; embracing what they allot you, and what they ordain.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;If only one meditation could have an effect on me, I hope it would be this one.&lt;/p&gt;
&lt;div class=&#34;icons&#34; data-icons=&#34;work&#34; data-chapter=&#34;6.19&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;Not to assume it&amp;rsquo;s impossible because you find it hard. But to recognize that if it&amp;rsquo;s humanly possible, you can do it too.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;!--quoteend--&gt;
&lt;div class=&#34;icons&#34; data-icons=&#34;truth harm&#34; data-chapter=&#34;6.21&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;If you can refute me &amp;ndash; show me I&amp;rsquo;m making a mistake or looking at things from the wrong perspective &amp;ndash; I&amp;rsquo;ll gladly change. It&amp;rsquo;s the truth I&amp;rsquo;m after, and the truth never harmed anyone. What harms us is to persist in self-deceit and ignorance.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;Important to keep in mind during the ongoing culture wars.&lt;/p&gt;
&lt;div class=&#34;icons&#34; data-icons=&#34;eternity change&#34; data-chapter=&#34;6.37&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;If you&amp;rsquo;ve seen the present then you&amp;rsquo;ve seen everything &amp;ndash; as it&amp;rsquo;s been since the beginning, as it will be forever. The same substance, the same form. All of it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;I&amp;rsquo;m amazed by the &lt;em&gt;correctness&lt;/em&gt; of Marcus&amp;rsquo;s view of eternity. Over a thousand years before the discovery of the laws of thermodynamics, he saw that processes &amp;ldquo;in the small&amp;rdquo; never changed the whole.&lt;/p&gt;
&lt;div class=&#34;icons&#34; data-icons=&#34;optimism virtue&#34; data-chapter=&#34;6.48&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;When you need encouragement, think of the qualities the people around you have: this one&amp;rsquo;s energy, that one&amp;rsquo;s modesty, another&amp;rsquo;s generosity, and so on. Nothing is as encouraging as when virtues are visibly embodied in the people around us, when we&amp;rsquo;re practically showered with them
It&amp;rsquo;s good to keep this in mind.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;I would like to live this way.&lt;/p&gt;
&lt;div class=&#34;icons&#34; data-icons=&#34;help favorite&#34; data-chapter=&#34;7.7&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;Don&amp;rsquo;t be ashamed to need help. Like a soldier storming a wall, you have a mission to accomplish. And if you&amp;rsquo;ve been wounded and you need a comrade to pull you up? So what?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;!--quoteend--&gt;
&lt;div class=&#34;icons&#34; data-icons=&#34;present&#34; data-chapter=&#34;7.8&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;Forget the future. When and if it comes, you&amp;rsquo;ll have the same resources to draw on &amp;ndash; the same &lt;em&gt;logos&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;I have actually successfully implemented this meditation in my daily life since reading it, at least as it applies to software development. In that light it&amp;rsquo;s a bit like the addage &amp;ldquo;premature optimization is the root of all evil&amp;rdquo;. More generally I guess that would be &amp;ldquo;prematurely thinking about the future is unhelpful&amp;rdquo;.&lt;/p&gt;
&lt;div class=&#34;icons&#34; data-icons=&#34;character virtue favorite&#34; data-chapter=&#34;7.12&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;Straight, not straightened.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;The best people I know live this way. Doing the right thing not because of &lt;em&gt;any&lt;/em&gt; external motivator. It just seems to be a part of &lt;em&gt;who they are&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&#34;icons&#34; data-icons=&#34;possessions&#34; data-chapter=&#34;7.27&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;Treat what you don&amp;rsquo;t have as nonexistent. Look at what you have, the things you value most, and think of how much you&amp;rsquo;d crave them if you didn&amp;rsquo;t have them. But be careful. Don&amp;rsquo;t feel such satisfaction that you start to overvalue them &amp;ndash; that it would upset you to lose them.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;I&amp;rsquo;ve always been unsentimental about my belongings.
Maybe it&amp;rsquo;s a learned behavior from moving six times in the last six years - every thing I have is another thing I have to &lt;em&gt;move&lt;/em&gt;.
But I do have things I feel protective of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;my cast iron pans&lt;/li&gt;
&lt;li&gt;my collection of books&lt;/li&gt;
&lt;li&gt;my leather boots and hiking pants&lt;/li&gt;
&lt;li&gt;an engraved watch from my fiance (girlfriend at the time)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All these things are technically replaceable, but it would upset me to lose them.
But the point here is that even &lt;em&gt;irreplaceable&lt;/em&gt; things should not be valued so highly.
My takeaway is not to own nothing and live like Diogenes, but to be content &lt;em&gt;no matter what I do (or do not) have&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&#34;icons&#34; data-icons=&#34;virtue truth self-determination&#34; data-chapter=&#34;7.29&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;Discard your misconceptions.
Stop being jerked like a puppet.
Limit yourself to the present.
Understand what happens &amp;ndash; to you, to others.
Analyze what exists, break it all down: material and cause.
Anticipate your final hours.
Other people&amp;rsquo;s mistakes? Leave them to their masters.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;I quit social media altogether after reading &lt;em&gt;Meditations&lt;/em&gt;. I felt like I &lt;em&gt;was&lt;/em&gt; being &amp;ldquo;jerked like a puppet&amp;rdquo;, especially in 2020 when every post, video, and article inflamed me. For what?&lt;/p&gt;
&lt;div class=&#34;icons&#34; data-icons=&#34;virtue self-determination&#34; data-chapter=&#34;7.54&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;Everywhere, at each moment, you have the option:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;to accept this event with humility&lt;/li&gt;
&lt;li&gt;to treat this person as he should be treated&lt;/li&gt;
&lt;li&gt;to approach this thought with care, so that nothing irrational creeps in.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;It always amazes me that these thoughts came from the most powerful man in the most powerful empire the world had ever known - that he should be concerned with humility, and treating others appropriately.&lt;/p&gt;
&lt;p&gt;Even as someone with a more humble life it would be difficult to follow this advice &amp;ldquo;everywhere, at each moment&amp;rdquo;, let alone in his deified position.&lt;/p&gt;
&lt;div class=&#34;icons&#34; data-icons=&#34;acceptance favorite&#34; data-chapter=&#34;7.57&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;To love only what happens, what was destined. No greater harmony.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;I think this maxim summarizes stoicism perfectly. Everything which happens is governed by logos - the &amp;ldquo;violent current of events&amp;rdquo; all predetermined. You have no control over what happens, only the way you react to it. While most people struggle against the inevitable, a stoic doesn&amp;rsquo;t just accept it, but &lt;em&gt;loves&lt;/em&gt; it, even when what happens is terrible or painful.&lt;/p&gt;
&lt;div class=&#34;icons&#34; data-icons=&#34;virtue favorite&#34; data-chapter=&#34;7.69&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;Perfection of character: to live your last day, every day, without frenzy, or sloth, or pretense.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;I think about this passage a lot.
What I like most about it is &amp;ldquo;without frenzy&amp;rdquo;.
Sloth is a well-established sin, even in modern society; Good people place value on hard work, and despise laziness.
But the opposite is also harmful, because we cannot keep up frenetic activity.&lt;/p&gt;
&lt;p&gt;Marcus is warning us about &lt;em&gt;burnout&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&#34;icons&#34; data-icons=&#34;obstacles self-determination&#34; data-chapter=&#34;8.32&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;You have to assemble your life yourself &amp;ndash; action by action. And be satisfied if each one achieves its goal, as far as it can. No one can keep that from happening.&lt;/p&gt;
&lt;p&gt;&amp;ndash; But there are external obstacles&amp;hellip;&lt;/p&gt;
&lt;p&gt;Not to behaving with justice, self-control, and good sense.&lt;/p&gt;
&lt;p&gt;&amp;ndash; Well, but perhaps to some more concrete action.&lt;/p&gt;
&lt;p&gt;But if you accept the obstacle and work with what you&amp;rsquo;re given, an alternative will present itself&lt;/p&gt;
&lt;p&gt;&amp;ndash; another piece of what you&amp;rsquo;re trying to assemble. Action by action.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;!--quoteend--&gt;
&lt;div class=&#34;icons&#34; data-icons=&#34;endurance pain&#34; data-chapter=&#34;8.36&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;Don&amp;rsquo;t let your imagination be crushed by life as a whole. Don&amp;rsquo;t try to picture everything bad that could possibly happen. Stick with the situation at hand, and ask, &amp;ldquo;Why is this so unbearable? Why can&amp;rsquo;t I endure it?&amp;rdquo; You&amp;rsquo;ll be embarrassed to answer.
Then remind yourself that past and future have no power over you. Only the present &amp;ndash; and even that can be minimized. Just mark off its limits. And if your mind tries to claim that it can&amp;rsquo;t hold out against &lt;em&gt;that&lt;/em&gt;&amp;hellip; well, then, heap shame upon it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;There is a movie (or maybe a TV show, I can&amp;rsquo;t remember which) with a quotation that always stuck out to me (though obviously not enough for me to remember the specific film or show itself). A character describes how she tolerates some unpleasant thing. She says something along the lines of, &amp;ldquo;When I feel like I can&amp;rsquo;t take anymore I think, &amp;lsquo;just ten more seconds&amp;rsquo;, and I can inevitably tolerate such a short amount of time. Then, at the end of those ten seconds I think again, &amp;lsquo;just ten more seconds&amp;rsquo;&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;I wanted to say this was from the 2015 movie &lt;em&gt;Room&lt;/em&gt; (not the infamous 2003 &lt;em&gt;The Room&lt;/em&gt;, subject of James Franco&amp;rsquo;s &lt;em&gt;The Disaster Artist&lt;/em&gt;), but searching the script for &amp;ldquo;seconds&amp;rdquo; or &amp;ldquo;minutes&amp;rdquo; didn&amp;rsquo;t turn up anything.&lt;/p&gt;
&lt;p&gt;This meditation reminds me of that strategy, whatever the source.&lt;/p&gt;
&lt;div class=&#34;icons&#34; data-icons=&#34;self-determination control&#34; data-chapter=&#34;8.47&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;External things are not the problem. It&amp;rsquo;s your assessment of them. Which you can erase right now.
If the problem is something in your own character, who&amp;rsquo;s stopping you from setting your mind straight?
And if it&amp;rsquo;s that you&amp;rsquo;re not doing something you think you should be, why not just do it?
&amp;ndash; But there are insuperable obstacles.
Then it&amp;rsquo;s not a problem. The cause of your inaction lies outside you.
&amp;ndash; But how can I go on living with that undone?
Then depart, with a good conscience, as if you&amp;rsquo;d done it, embracing the obstacles too.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;!--quoteend--&gt;
&lt;div class=&#34;icons&#34; data-icons=&#34;truth favorite&#34; data-chapter=&#34;9.17&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;A rock thrown in the air. It loses nothing by coming down, gained nothing by going up.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;It isn&amp;rsquo;t the destination, &lt;em&gt;nor&lt;/em&gt; the journey it would seem.&lt;/p&gt;
&lt;div class=&#34;icons&#34; data-icons=&#34;death&#34; data-chapter=&#34;9.21&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;When we cease from activity, or follow a thought to its conclusion, it&amp;rsquo;s a kind of death. And it doesn&amp;rsquo;t harm us. Think about your life: childhood, boyhood, youth, old age. Every transformation a kind of dying. Was that so terrible?
Think about life with your grandfather, your mother, your adopted father. Realize how many other deaths and transformations and endings there have been and ask youself: Was that so terrible?
Then neither will the close of your life be &amp;ndash; its ending and transformation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;!--quoteend--&gt;
&lt;div class=&#34;icons&#34; data-icons=&#34;eternity&#34; data-chapter=&#34;9.32&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;You can discard most of the junk that clutters your mind &amp;ndash; things that exist only there &amp;ndash; and clear out space for yourself:&lt;/p&gt;
&lt;p&gt;&amp;hellip;by comprehending the scale of the world
&amp;hellip;by contemplating infinite time
&amp;hellip;by thinking of the speed with which things change &amp;ndash; each part of every thing; the narrow space between our birth and death; the infinite time before the equally unbounded time that follows.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;!--quoteend--&gt;
&lt;div class=&#34;icons&#34; data-icons=&#34;eternity&#34; data-chapter=&#34;10.17&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;Continual awareness of all time and space, of the size and life of the things around us. A grape seed in infinite space. A half twist of a corkscrew against eternity.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;The preceding two meditations form an excellent strategy for controlling one&amp;rsquo;s emotions, but it is very difficult to implement. I think it&amp;rsquo;s a prerequisite for developing the &lt;em&gt;superego&lt;/em&gt; - taking oneself out of the current situation and shifting perspective to the macro. With this perspective emotions seem so small.&lt;/p&gt;
&lt;div class=&#34;icons&#34; data-icons=&#34;death&#34; data-chapter=&#34;10.29&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;Stop whatever you&amp;rsquo;re doing for a moment and ask yourself: Am I afraid of death because I won&amp;rsquo;t be able to do &lt;em&gt;this&lt;/em&gt; anymore?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;!--quoteend--&gt;
&lt;div class=&#34;icons&#34; data-icons=&#34;honesty favorite&#34; data-chapter=&#34;11.15&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;The despicable phoniness of people who say, &amp;ldquo;Listen, I&amp;rsquo;m going to level with you here.&amp;rdquo; What does that mean? It shouldn&amp;rsquo;t even need to be said. It should be obvious &amp;ndash; written in block letters on your forehead. It should be audible in your voice, visible in your eyes like a lover who looks into your face and takes in the whole story at a glance. A straightforward, honest person should be like someone who stinks: when you&amp;rsquo;re in the same room with him, you know it. But false straightforwardness is like a knife in the back.
False friendship is the worst, Avoid it at all costs. If you&amp;rsquo;re honest and straightforward and mean well, it should show in your eyes. It should be unmistakable.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;This is one of my favorite pieces of prose in the &lt;em&gt;Meditations&lt;/em&gt;. I&amp;rsquo;d even say it&amp;rsquo;s funny. Sometimes obvious truth can make us laugh.&lt;/p&gt;
&lt;div class=&#34;icons&#34; data-icons=&#34;virtue&#34; data-chapter=&#34;11.19&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;Four habits of thought to watch for, and erase from your mind when you catch them. Tell yourself:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This thought is unnecessary.&lt;/li&gt;
&lt;li&gt;This one is destructive to the people around you.&lt;/li&gt;
&lt;li&gt;This wouldn&amp;rsquo;t be what you really think (to say what you don&amp;rsquo;t think &amp;ndash; the definition of absurdity).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And the fourth reason for self-reproach: that the more divine part of you has been beaten and subdued by the degraded mortal part &amp;ndash; the body and its stupid self-indulgence.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;&amp;ldquo;that the more divine part of you has been beaten and subdued by the degraded mortal part &amp;ndash; the body and its stupid self-indulgence&amp;rdquo; - again the connection with &lt;em&gt;superego&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&#34;icons&#34; data-icons=&#34;self-control&#34; data-chapter=&#34;11.37&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;We need to master the art of acquiescence. We need to pay attention to our impulses, making sure they don&amp;rsquo;t go unmoderated, that they benefit others, that they&amp;rsquo;re worthy of us. We need to steer clear of desire in any form and not try to avoid what&amp;rsquo;s beyond our control.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;!--quoteend--&gt;
&lt;div class=&#34;icons&#34; data-icons=&#34;work&#34; data-chapter=&#34;12.6&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;Practice even what seems impossible.
The left hand is useless at almost everything, for lack of practice. But it guides the reins better than the right. From practice.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;!--quoteend--&gt;
&lt;div class=&#34;icons&#34; data-icons=&#34;death&#34; data-chapter=&#34;12.23&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;A given action that stops when it&amp;rsquo;s supposed to is none the worse for stopping. Nor the person engaged in it either. So too with the succession of actions we call &amp;ldquo;life.&amp;rdquo; If it ends when it&amp;rsquo;s supposed to, it&amp;rsquo;s none the worse for that. And the person who comes to the end of the line has no cause for complaint. The time and stopping point are set by nature &amp;ndash; our own nature, in some cases (death from old age); or nature as a whole, whose parts, shifting and changing, constantly renew the world, and keep it on schedule.
Nothing that benefits all things can be ugly or out of place. The end of life is not an evil &amp;ndash;  it doesn&amp;rsquo;t disgrace us. (Why should we be ashamed of an involuntary act that injures no one?). It&amp;rsquo;s a good thing &amp;ndash; scheduled by the world, promoting it, promoted by it.
This is how we become godlike &amp;ndash; following God&amp;rsquo;s path, and reason&amp;rsquo;s goals.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
</description>
       </item>
       
       <item>
         <title>Problems with Programming Books</title>
         <link>https://mjdiloreto.github.io/posts/problems-with-programming-books/</link>
         <pubDate>Wed, 02 Jun 2021 21:44:00 -0400</pubDate>
         
         <guid>https://mjdiloreto.github.io/posts/problems-with-programming-books/</guid>
         <description>&lt;p&gt;My girlfriend&amp;rsquo;s sister is taking her first programming course using an &amp;ldquo;interactive&amp;rdquo; online textbook (a &lt;a href=&#34;https://www.zybooks.com/&#34;&gt;Zybook&lt;/a&gt;) for school, and I offered to tutor her.&lt;/p&gt;
&lt;p&gt;When she needs help, she usually sends me 3 pictures:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The text of the problem statement,&lt;/li&gt;
&lt;li&gt;Her python code, and&lt;/li&gt;
&lt;li&gt;The error message (there is almost always an error message).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I then decipher what exactly the question is asking for, what the error message says, what her code is doing, and finally write up an explanation to help her understand all of it.&lt;/p&gt;
&lt;p&gt;Sometimes it&amp;rsquo;s easier to facetime.&lt;/p&gt;
&lt;p&gt;Throughout this process I&amp;rsquo;ve maintained notes about what trips her up, because it&amp;rsquo;s been so long since I started programming that I don&amp;rsquo;t actually remember what it was like not to know these things.
I&amp;rsquo;ve come to the conclusion that programming &amp;ldquo;books&amp;rdquo; (usually a hypertext document consisting of long passages of static text followed by graded problems) are seriously flawed.&lt;/p&gt;
&lt;p&gt;My perspective is also colored by my personal experience with &lt;a href=&#34;http://www.codecademy.com&#34;&gt;codecademy&lt;/a&gt; circa 2014, and later in 2019, as well as a few other courses from college (the names of which I cannot recall), so a lot might have changed in some of the better tools, but I&amp;rsquo;m certain there&amp;rsquo;s a lot more that can be done.&lt;/p&gt;
&lt;p&gt;The main ingredient they all seem lack is &lt;em&gt;interactivity&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Any fan of Brett Victor will know the importance of interactivity, but for the unitiated, allow me (him) to enlighten you:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=PUv66718DII&#34;&gt;Brett Victor: Inventing on Principle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://worrydream.com/LadderOfAbstraction/&#34;&gt;The Ladder of Abstraction&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(Seriously, watch the video from Brett, and read this essay too while you&amp;rsquo;re at it. The ideas he presents are wonderfully &lt;em&gt;simple&lt;/em&gt;. I guarantee they will leave a lasting impression.)&lt;/p&gt;
&lt;p&gt;What interactivity does for a first-time programming language learner is remove barriers.
A good programming book empowers her to find answers to her questions on her own.
It provides endless &lt;em&gt;contextual information&lt;/em&gt; for every part of the interface, code, and errors (no, not just some static textual explanation of the topic at-hand 5 pages up in the document).
The fewer buttons she has to click to see a result, the more help she has decoding an error message, the more likely she is to keep going, and keep coding.&lt;/p&gt;
&lt;p&gt;I boiled down my experience tutoring to a few areas for improvement for a truly interactive programming book.&lt;/p&gt;
&lt;h2 id=&#34;language-specific-ergonomics&#34;&gt;Language-specific Ergonomics&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s start with something programming books usually get right &amp;mdash; isolating the beginner from the technology.&lt;/p&gt;
&lt;p&gt;As software developers, we love tinkering on the command line.
We like to connect services and write scripts and run test suites and version control source code files.
We like to be in control of a system.&lt;/p&gt;
&lt;p&gt;This is anathema to the first-time programming language learner.&lt;/p&gt;
&lt;p&gt;A beginner should not have to set up anything.
She should be presented immediately with the opportunity to read, execute, and write programs without any effort.
Most books at least solve this problem by providing code execution tools (a bare text-editor and a &amp;ldquo;RUN CODE&amp;rdquo; button usually) from the browser, and some tools like &lt;a href=&#34;http://www.repl.it&#34;&gt;repl.it&lt;/a&gt; are doing very cool things in this space.&lt;/p&gt;
&lt;p&gt;I do think there is more work to be done regarding in-context documentation of language features, though.&lt;/p&gt;
&lt;h2 id=&#34;partial-results&#34;&gt;Partial Results&lt;/h2&gt;
&lt;p&gt;One thing I wish more books emphasized is the &lt;em&gt;substitution model&lt;/em&gt; of programming.
That is, the iterative process of substituting subexpressions for their results to make up larger results in a program, e.g;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(+ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; (+ &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;))
&lt;span style=&#34;color:#75715e&#34;&gt;; becomes&lt;/span&gt;
(+ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;; becomes&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Technically this model only applies to expressions, so in a language like Python there are exceptions, but the same basic principle carries over at least somewhat in every programming language, and it is not an obvious principle.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s not obvious to a beginner that:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;age_input &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; input()
age &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(age_input)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;is exactly the same as:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;age &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(input())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;unless she is explicitly told so.
But the abstract knowledge does not stick immediately, because she will then balk at:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;names &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; input()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The code editor should show the results of each part of chained method calls, and of each subexpression in an expression.&lt;/p&gt;
&lt;p&gt;As a side note, when describing the previous example I was asked, &amp;ldquo;How come it isn&amp;rsquo;t&amp;rdquo;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;ages &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; split(input())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What a good question, and the explanation will be completely incomprehensible to a beginner:&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Well in Python everything is an object (except for primitives), and those objects have methods, which are really just functions whose first argument is always the object instance itself. Isn&amp;rsquo;t programming fun?&amp;rdquo;&lt;/p&gt;
&lt;p&gt;This is a huge WTF for beginners, and I remember spending hours googling &amp;ldquo;what is an object in programming&amp;rdquo; when I first started to code.
It&amp;rsquo;s irrelevant to teach a beginner these things, but languages like Python force this confusion from the start.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s why &lt;a href=&#34;https://htdp.org/&#34;&gt;How To Design Programs&lt;/a&gt; uses a Lisp as its teaching language.
Any syntax is overhead which distracts from the essence of programming.&lt;/p&gt;
&lt;p&gt;A good interactive programming book might not want to teach Lisp, but it should give insight into the results of each part of every expression.&lt;/p&gt;
&lt;h2 id=&#34;error-messages&#34;&gt;Error Messages&lt;/h2&gt;
&lt;p&gt;This is what infuriates me about every single book I&amp;rsquo;ve come across &amp;mdash; they all forward the bare error messages from the interpreter/compiler/VM/whatever straight to the user.
This in and of itself is not really an issue since becoming familiar with error messages is a part of software development, but the problem is that they all &lt;em&gt;stop&lt;/em&gt; there.&lt;/p&gt;
&lt;p&gt;What do software developers do when they get an error message?
Well, it depends on the error:&lt;/p&gt;
&lt;h4 id=&#34;syntax-errors&#34;&gt;Syntax errors:&lt;/h4&gt;
&lt;p&gt;My IDE catches this &lt;em&gt;in context&lt;/em&gt; AND usually provides a quick fix.
A beginner is already used to this common paradigm (e.g. spellcheck).
There is no reason for any programming book not to have this feature (Zybooks does not have it).&lt;/p&gt;
&lt;h4 id=&#34;runtime-errors&#34;&gt;Runtime errors:&lt;/h4&gt;
&lt;p&gt;StackOverflow.
There is no avoiding the value of google-searching the error message.
I would like to see a book that does this on behalf of the user, suggesting a search whenever an error occurs; or preferably suggesting a &lt;em&gt;useful&lt;/em&gt; search from a previous user of the book i.e. a post which solved &lt;em&gt;this&lt;/em&gt; specific error in &lt;em&gt;this&lt;/em&gt; specific graded problem.&lt;/p&gt;
&lt;p&gt;One error message is usually tolerable, but it&amp;rsquo;s when the beginner tries 2, 3, or 4 different things, and gets &lt;em&gt;different&lt;/em&gt; errors that she quits.
My role as a tutor is essentially an error explainer.
I explain what the error means generally, then what it means in this context, then &lt;em&gt;why&lt;/em&gt; it happened in this context, what line of code is &lt;em&gt;really&lt;/em&gt; to blame (you got a SynaxError on line 11 because you forgot a &lt;code&gt;:&lt;/code&gt; on line 10), and finally prompt with a leading question toward a solution (or just give the solution if it isn&amp;rsquo;t obvious).
There&amp;rsquo;s no reason the book can&amp;rsquo;t do a lot of this work, especially considering it is a document visited almost exclusively by beginners who generate and ultimately resolve the same errors over and over again.
There is opportunity to leverage the book&amp;rsquo;s data collection to help solve this problem.&lt;/p&gt;
&lt;h2 id=&#34;case-analysis&#34;&gt;Case Analysis&lt;/h2&gt;
&lt;p&gt;This is where the actual programming work begins.
Alan Perlis famously &lt;a href=&#34;http://www.cs.yale.edu/homes/perlis-alan/quotes.html&#34;&gt;said&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Programmers are not to be measured by their ingenuity and their logic but by the completeness of their case analysis.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The problem is that it&amp;rsquo;s very difficult for beginners to differentiate between errors due to incomplete case analysis and &amp;ldquo;programming&amp;rdquo; errors (like using the wrong variable, forgetting a &lt;code&gt;+1&lt;/code&gt; somewhere, etc.)&lt;/p&gt;
&lt;p&gt;Software developers write tests in order to increase their confidence in their case analysis, and run those tests when the relevant code changes.
Beginners do not write tests, because they do not yet know the value of doing so.&lt;/p&gt;
&lt;p&gt;Most books I&amp;rsquo;ve come across usually provide some mechanism for user-supplied inputs, and typically include a short test suite for graded problems, but this is not enough.
Books should provide this list of cases and run the tests whenever the code is updated.
The beginner should know &lt;em&gt;immediately&lt;/em&gt; whenever one of her changes influenced the outcome of a test case.&lt;/p&gt;
&lt;p&gt;The book should also provide test cases for the functions relevant to a solution, i.e. I should be able to hover over `pow` in some Python code and see:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;pow(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# -&amp;gt; 4&lt;/span&gt;
pow(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# -&amp;gt; 8&lt;/span&gt;
pow(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# -&amp;gt; 16&lt;/span&gt;
pow(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# -&amp;gt; 27&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# ... etc.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So far I have not come across any books which have immediate feedback like this.&lt;/p&gt;
&lt;h2 id=&#34;exploration&#34;&gt;Exploration&lt;/h2&gt;
&lt;p&gt;This is by far the most important aspect of programming that books fail at.
Almost every one of my tutoring texts includes the phrase &amp;ldquo;open up your terminal and type &lt;code&gt;python3&lt;/code&gt;&amp;rdquo; (I demonstrated the REPL live a couple times; I&amp;rsquo;m not a sadist).
I then say, &amp;ldquo;See what happens when you do:&amp;rdquo; and provide a verbatim copy of a repl session demonstrating whatever concept I was discussing.&lt;/p&gt;
&lt;p&gt;You might be skeptical about the merits of REPL-driven development as a style of software-engineering, and prefer TDD or something. That&amp;rsquo;s fine.
It is undeniable though that a repl is &lt;em&gt;more interactive&lt;/em&gt; than TDD, and in our hypothetical programming book we&amp;rsquo;ve already provided the user with a live test suite.
The code editors these programming books use really need to integrate something like &lt;a href=&#34;https://quokkajs.com/&#34;&gt;Quokka&lt;/a&gt; or &lt;a href=&#34;http://lighttable.com/&#34;&gt;Lighttable&lt;/a&gt; for whatever language the book uses.&lt;/p&gt;
&lt;p&gt;They should also suggest other things to try.
This might have to be problem-specific, but if the preceding chapter discusses the &lt;code&gt;split&lt;/code&gt; and &lt;code&gt;join&lt;/code&gt; functions, then wherever a list appears in the code, the editor should show it &lt;code&gt;join&lt;/code&gt;&amp;lsquo;ed, and wherever there is a string, the editor should show it &lt;code&gt;split&lt;/code&gt;&amp;lsquo;ed.
If there is a string in the code, the editor should show how it is made up of characters and how to access them.&lt;/p&gt;
&lt;p&gt;I imagine this type of interactivity could prove overwhelming, so I think it would be best to limit its scope to just the topics discussed in the chapter.
For example, one chapter might discuss character codes (in Python using &lt;code&gt;ord&lt;/code&gt; and &lt;code&gt;chr&lt;/code&gt;), so should show the structure of all the strings in the code with their &lt;code&gt;ord&lt;/code&gt;, and translate numeric literals using &lt;code&gt;chr&lt;/code&gt;.
The next chapter would not need to show this same context for numeric literals, but instead might discuss modular arithmetic, so numeric literals should then show their result modulo some base.&lt;/p&gt;
&lt;p&gt;I assumed since the REPL is such a simple piece of interactive software that it would be super useful for a beginner, but what I noticed is that, when presented with an empty prompt, she just didn&amp;rsquo;t know what to type next.
I realized suggestions for things to try are imperative.&lt;/p&gt;
&lt;h2 id=&#34;memory&#34;&gt;Memory&lt;/h2&gt;
&lt;p&gt;Disclaimer: I&amp;rsquo;ve never seen &lt;em&gt;any&lt;/em&gt; programming interface (let alone a beginner&amp;rsquo;s programming book) which solves this problem.
Once the beginner has solved a problem and submitted her program, it is lost in the ether.
She goes about her life and (to no fault of her own) effectively purges whatever she learned.
This is really more of a problem with books in general, because there is no place other than your own brain to keep the knowledge you learned.&lt;/p&gt;
&lt;p&gt;Well, computers have memory, and a sufficiently interactive programming environment should really &lt;em&gt;remember&lt;/em&gt; the code it runs.&lt;/p&gt;
&lt;p&gt;Whenever a beginner correctly uses a function, syntactic construct, or other piece of source code, the book ought to remember that.
Whenever a beginner writes some code that generates an error, and then fixes that error with a code change, that&amp;rsquo;s a huge success! The book ought to congratulate and remember that also.
She should then have the immediate ability to recall that success in another context.&lt;/p&gt;
&lt;p&gt;If I used &lt;code&gt;input().split()&lt;/code&gt; on problem 1.c, I should be reminded of it when I write &lt;code&gt;input().split()&lt;/code&gt; on problem 13.a.
Because the amount of code the beginner will write while following the book will be low (maybe 500 lines total?), and will usually consist of the same basic functions, I don&amp;rsquo;t see any reason this should not be feasible.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;m sure there is a ton of work going on in the digital textbook space, but from what I see, the majority of &amp;ldquo;Teach yourself Python!&amp;rdquo; books/courses online fall into the MVP-product with superstar-marketing category.
Maybe that&amp;rsquo;s simply the economics of the space, but I can&amp;rsquo;t help but feel we as software developers could do a lot more to craft a wholly interactive and integrated guided experience to learning programming.
There seem to be tons of books, videos, and blog posts for every concept a beginner would ever want to know about Python, but none satisfy the level of interactivity I feel is really needed.
My sister&amp;rsquo;s girlfriend said to me &amp;ldquo;I have no idea how the other students are managing without a &lt;em&gt;professional software engineer&lt;/em&gt; helping them.&amp;rdquo;
I don&amp;rsquo;t know either, but the books are definitely not sufficient.&lt;/p&gt;
</description>
       </item>
       
       <item>
         <title>Libraries for Web Development</title>
         <link>https://mjdiloreto.github.io/posts/libraries-for-web-development/</link>
         <pubDate>Sun, 18 Apr 2021 21:09:00 -0400</pubDate>
         
         <guid>https://mjdiloreto.github.io/posts/libraries-for-web-development/</guid>
         <description>&lt;p&gt;A list of neat and nifty libraries I&amp;rsquo;ve stumbled across which have piqued my interest enough for me to save them.
Keeping track of them here in this list for my future reference.&lt;/p&gt;
&lt;h2 id=&#34;in-the-browser&#34;&gt;In the Browser&lt;/h2&gt;
&lt;h3 id=&#34;analytics&#34;&gt;Analytics&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://counter.dev&#34;&gt;counter.dev&lt;/a&gt;: Simple, open-source, free (as in beer), privacy-focused analytics.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;built-on-react&#34;&gt;Built on React&lt;/h3&gt;
&lt;p&gt;React wins the web by converting the problem of UI to a function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;V = F(D)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here are some projects which compose with that simple function.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blitzjs.com&#34;&gt;Blitz.js&lt;/a&gt;: Full-stack batteries-included React Framework. 0-API. Comes with Routing, Authentication (sign-up, log in, password reset) preconfigured. Would use for a hackathon project.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;data-visualization&#34;&gt;Data Visualization&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://formidable.com/open-source/victory/&#34;&gt;Victory&lt;/a&gt;: Easy to use Charts and data visualization components for React. Works with React Native too(!)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.highcharts.com/demo&#34;&gt;Highcharts&lt;/a&gt;: Modular library of many chart types with React or plain js bindings.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chartscss.org/&#34;&gt;Charts.scss&lt;/a&gt;: Boom, no need for React at all. Charts directly in css baby. Could be really cool in conjuction with htmx.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://reactflow.dev/examples&#34;&gt;React flow&lt;/a&gt;: Node editor for building flowcharts / graph-based diagrams with interactive editing, minimap, and more.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://riccardoscalco.it/textures/&#34;&gt;Textures.js&lt;/a&gt;: SVG patterns for data visualization. Trivial to use and beautiful.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dates&#34;&gt;Dates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;//js-joda.github.io/js-joda/&#34;&gt;JS-Joda&lt;/a&gt;: Lower adoption than date-fns.
Immutable implementation of dates (Does not wrap the native JS &lt;code&gt;Date&lt;/code&gt; object.
Different classes of dates for different use-cases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LocalDate (dates like birthdays or holidays)&lt;/li&gt;
&lt;li&gt;Period (between 2 dates)&lt;/li&gt;
&lt;li&gt;Duration (scalar time)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://date-fns.org&#34;&gt;Date-fns:&lt;/a&gt; Consistent, complete, immutable.&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;org6911992&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;High adoption (recommended from &lt;code&gt;moment.js&lt;/code&gt; (the easiest/most intuitive date library I&amp;rsquo;ve encountered)).
Wraps the Native &lt;code&gt;Date&lt;/code&gt; object.
Has an FP submodule providing convenience for functional-style programming.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dom-styling&#34;&gt;DOM styling&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://styled-components.com&#34;&gt;Styled Components&lt;/a&gt;: Directly associate React Components with styles without the need for global style sheets.
Good for building highly modular (read standalone) components.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://react.semantic-ui.com&#34;&gt;Semantic UI:&lt;/a&gt; words &lt;code&gt;=&lt;/code&gt; classnames. Create highly readable &amp;ldquo;semantic&amp;rdquo; UI code with a decent selection of components&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dwyl/learn-tachyons&#34;&gt;Tachyons&lt;/a&gt;: Functional terse css classes. Might be based off tailwind, not sure.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://roughnotation.com/&#34;&gt;Rough Notation&lt;/a&gt;: Create + animate &amp;ldquo;hand-drawn&amp;rdquo; annotations on top of html.
Super simple and cool effect.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dope-stylesheets&#34;&gt;Dope stylesheets&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://nostalgic-css.github.io/NES.css/&#34;&gt;NES.css&lt;/a&gt;: Stylesheet to emulate old NES style interface. Certified dope.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;react-alternatives&#34;&gt;React alternatives&lt;/h3&gt;
&lt;p&gt;Alternatives to the classic client-side rendered react SPA.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://htmx.org/examples/&#34;&gt;htmx&lt;/a&gt;: Build SPAs directly onto html elements using attributes.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;htmx allows you to access AJAX, CSS Transitions, WebSockets and Server Sent Events directly in HTML, using attributes, so you can build modern user interfaces with the simplicity and power of hypertext.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;small - 10k minified + gzipped. Cool author.&lt;/p&gt;
&lt;h3 id=&#34;misc-dot&#34;&gt;Misc.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://quotebacks.net/&#34;&gt;Quotebacks&lt;/a&gt;: Create nice-looking and functional quotes to external resources. Mostly used in the blogosphere.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;not-the-browser&#34;&gt;Not the Browser&lt;/h2&gt;
&lt;h3 id=&#34;web-hosting&#34;&gt;Web hosting&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.netlify.com/&#34;&gt;Netlify&lt;/a&gt;: The best. use it.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://coollabs.io/coolify&#34;&gt;Coolify&lt;/a&gt;: Open-source, indie-hacker-esque Netlify alternative. Not clear what pricing is like.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githack.com/&#34;&gt;raw.githack.com&lt;/a&gt;: CDN for files hosted in github repos. Good for indie-dev type projects.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;databases&#34;&gt;Databases&lt;/h3&gt;
&lt;h4 id=&#34;sql&#34;&gt;SQL&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://walkable.gitlab.io&#34;&gt;Walkable&lt;/a&gt;: hiccup-style sql (use EDN to describe SQL statements).&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://massivejs.org/&#34;&gt;Massive.js&lt;/a&gt;: A powerful &lt;code&gt;Node.js&lt;/code&gt; wrapper for (only) &lt;code&gt;postgres&lt;/code&gt; that doesn&amp;rsquo;t get in the way.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;replication&#34;&gt;Replication&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://litestream.io/getting-started/&#34;&gt;litestream&lt;/a&gt;: Replicate SQLite databases automatically in the background as a separate process.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;fun--data-sources&#34;&gt;(Fun) Data sources&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.rijksmuseum.nl/en/rijksstudio&#34;&gt;Rijksmuseum&lt;/a&gt;: Searchable compilation of over 700k high-res copies of famous paintings.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://omar.website/tabfs/&#34;&gt;Tabfs&lt;/a&gt;: Mount browser tabs as a local filesystem.
Allows easy querying of multiple open tabs, saving+reloading tabs + manipulating + communicating with browser.
Your own browsing sessions become the data source.
Literally endless possibilities for scripting.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://everynoise.com/&#34;&gt;Everynoise&lt;/a&gt;: Literally every spotify genre, with links to relevant artists / song snippets, and the relations between them all.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;machine-learning&#34;&gt;Machine learning&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://lobe.ai/&#34;&gt;Lobe&lt;/a&gt;: Easiest (superlative, yes) online training of machine learning models. It&amp;rsquo;s free for now.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/nidhaloff/igel&#34;&gt;Igel&lt;/a&gt;: Train + fit, test + use machine learning models at the command line without writing code.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alicevision.org/#meshroom&#34;&gt;Meshroom&lt;/a&gt;: Reconstruct images as 3D models, aka &lt;code&gt;Photogrammetry&lt;/code&gt; (your $2 word for the day).
Free (as in freedom, and also beer).&lt;/li&gt;
&lt;/ul&gt;
</description>
       </item>
       
       <item>
         <title>Emacs and Org-Mode</title>
         <link>https://mjdiloreto.github.io/posts/org-mode/</link>
         <pubDate>Sun, 01 Mar 2020 15:41:00 -0500</pubDate>
         
         <guid>https://mjdiloreto.github.io/posts/org-mode/</guid>
         <description>&lt;p&gt;Before this year I was always a vim guy.
I used vim for almost everything except JVM programming (Java, Scala. For those tasks I really prefer IntelliJ), but this year I installed emacs.
I figured if I really wanted to participate in the &lt;a href=&#34;https://wiki.c2.com/?EmacsVsVi&#34;&gt;holy flame war&lt;/a&gt; I better spend some time learning the other tool as well.
I used a few different tool for all my electronic tasks, and here&amp;rsquo;s what that landscape looked like for me before emacs:&lt;/p&gt;
&lt;h2 id=&#34;before-emacs&#34;&gt;Before Emacs&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Task&lt;/th&gt;
&lt;th&gt;Software&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Taking Notes&lt;/td&gt;
&lt;td&gt;vim, Github-flavored Markdown&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Keeping an agenda&lt;/td&gt;
&lt;td&gt;A simple note widget on my phone, Google Tasks&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Text file manipulation&lt;/td&gt;
&lt;td&gt;vim&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;python, C++&lt;/td&gt;
&lt;td&gt;vim with &lt;a href=&#34;https://github.com/ycm-core/YouCompleteMe&#34;&gt;YouCompleteMe&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Java, Scala, javascript&lt;/td&gt;
&lt;td&gt;IntelliJ&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;I was generally happy using this configuration, with the exception of my agenda.
I was too disorganized, with short-term tasks on a note widget on my phone&amp;rsquo;s home screen, and longer term tasks in Google Tasks.
Putting time constraints on the short-term tasks was basically impossible since the note app had no integrations with the calendar, and putting those things in Google Tasks was too onerous.
Also, I do most of my work on my laptop, so having to keep my phone by my side while working was a big pain.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;d recently watched a talk from &lt;a href=&#34;https://www.youtube.com/watch?v=SzA2YODtgK4&amp;amp;t=2851s&#34;&gt;Harry Schwartz&lt;/a&gt; on org-mode, and the simple plain-text markup with powerful keyboard shortcuts convinced me to give it a shot.
Actually, the keyboard shortcut for inserting timestamps, &lt;code&gt;C-u C-c .&lt;/code&gt;, is the single thing I saw in that talk that I &lt;em&gt;had&lt;/em&gt; to try.
So I opened emacs and&amp;hellip; couldn&amp;rsquo;t figure out how to make a new file.
So back to what I knew, &lt;code&gt;vim agenda.org&lt;/code&gt;, insert some markup, save, &lt;em&gt;then&lt;/em&gt; &lt;code&gt;emacs agenda.org&lt;/code&gt;.
I haven&amp;rsquo;t gone back to another way of organizing my tasks.&lt;/p&gt;
&lt;p&gt;I ought to write about my workflow with org-mode, but that&amp;rsquo;s for another day.
In fact, I liked it so much that I started taking all my class notes with emacs too.
So it begins, I&amp;rsquo;ve chosen a side on the holy war, and emacs is slowly conquering territory that used to belong firmly to vim.&lt;/p&gt;
&lt;h2 id=&#34;now-3-months-of-emacs&#34;&gt;Now, 3 months of emacs&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Task&lt;/th&gt;
&lt;th&gt;Software&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Taking Notes&lt;/td&gt;
&lt;td&gt;emacs, org-mode&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Keeping an agenda&lt;/td&gt;
&lt;td&gt;emacs, org-mode&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Text file manipulation&lt;/td&gt;
&lt;td&gt;vim&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;python, C++&lt;/td&gt;
&lt;td&gt;vim with &lt;a href=&#34;https://github.com/ycm-core/YouCompleteMe&#34;&gt;YouCompleteMe&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Java, Scala, javascript&lt;/td&gt;
&lt;td&gt;IntelliJ&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Actually, these changes coincided with me teaching myself Clojure, so the landscape &lt;em&gt;really&lt;/em&gt; looks like:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Task&lt;/th&gt;
&lt;th&gt;Software&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Taking Notes&lt;/td&gt;
&lt;td&gt;emacs, org-mode&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Keeping an agenda&lt;/td&gt;
&lt;td&gt;emacs, org-mode&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Clojure&lt;/td&gt;
&lt;td&gt;emacs, CIDR&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Text file manipulation&lt;/td&gt;
&lt;td&gt;vim&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;python, C++&lt;/td&gt;
&lt;td&gt;vim with &lt;a href=&#34;https://github.com/ycm-core/YouCompleteMe&#34;&gt;YouCompleteMe&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Java, Scala, javascript&lt;/td&gt;
&lt;td&gt;IntelliJ&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;And it&amp;rsquo;s definitely not looking good for vim down the road.
Right now my vim/emacs ratio is around 1:1, but I imagine this will shift more in emacs&amp;rsquo;s favor soon.
I &lt;em&gt;really&lt;/em&gt; like emacs.
It&amp;rsquo;s almost apples and oranges to vim, or maybe a more apt analogy would be &lt;em&gt;crab-apples&lt;/em&gt; to oranges, where you&amp;rsquo;ve only been eating crab-apples for years and didn&amp;rsquo;t know how good oranges tasted yet.&lt;/p&gt;
</description>
       </item>
       
     </channel>
   </rss>
