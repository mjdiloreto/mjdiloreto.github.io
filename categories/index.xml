   <rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
     <channel>
       <title>Categories on Matthew DiLoreto</title>
       <link>https://mjdiloreto.github.io/categories/</link>
       <description>Programming musings, emacs, web development, and various thoughts from in Categories on Matthew DiLoreto</description>
       <generator>Hugo -- gohugo.io</generator>
       <language>en-us</language>
       
           <atom:link href="https://mjdiloreto.github.io/categories/index.xml" rel="self" type="application/rss+xml" />
       
       
       <item>
         <title>There are Many Ways to Build a Wep App - A Poem</title>
         <link>https://mjdiloreto.github.io/posts/there-are-many-ways-to-build-a-web-app/</link>
         <pubDate>Sat, 30 Dec 2023 10:12:00 -0500</pubDate>
         
         <guid>https://mjdiloreto.github.io/posts/there-are-many-ways-to-build-a-web-app/</guid>
         <description>&lt;p&gt;There are many ways to build a web app, as you will come to see. &lt;br/&gt;
Not all are suitable for what you may need. &lt;br/&gt;
With proper care and attention you might discover &lt;br/&gt;
one approach more favorable than another&amp;hellip; &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s build some apps, it won&amp;rsquo;t be too hard; &lt;br/&gt;
though some techniques may seem bizarre. &lt;br/&gt;
Just open an editor and start to type: &lt;br/&gt;
&lt;code&gt;&amp;lt;html&amp;gt;&amp;lt;/html&amp;gt;&lt;/code&gt; (don&amp;rsquo;t forget &lt;code&gt;&amp;lt;!DOCTYPE&amp;gt;&lt;/code&gt;!) &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Let the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;&amp;rsquo;s and &lt;code&gt;&amp;lt;ol&amp;gt;&lt;/code&gt;&amp;rsquo;s and &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;&amp;rsquo;s and &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;&amp;rsquo;s &lt;br/&gt;
flow from your keyboard through both your hands. &lt;br/&gt;
When you are done, open it and behold - &lt;br/&gt;
in a browser your document unfold! &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Let&amp;rsquo;s make it pretty!&amp;rdquo; I hear you say, &lt;br/&gt;
That will be easy with CSS today. &lt;br/&gt;
Create a new file, save it and &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt;, &lt;br/&gt;
inside the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; &amp;ndash; styles before you could blink! &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;But what of &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; or some other page? &lt;br/&gt;
I click on a link, but I&amp;rsquo;m caught in this cage. &lt;br/&gt;
I have an &lt;code&gt;index&lt;/code&gt; but I want more, &lt;br/&gt;
like &lt;code&gt;/about&lt;/code&gt;, and &lt;code&gt;/contact&lt;/code&gt;, and &lt;code&gt;/shop&lt;/code&gt;, or &lt;code&gt;/store&lt;/code&gt;! &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;An app cannot be one static page, &lt;br/&gt;
we need an &lt;code&gt;HTTP&lt;/code&gt; server to complete our maze. &lt;br/&gt;
We can spin one up with any language fast. &lt;br/&gt;
With the help of a terminal it&amp;rsquo;ll be a flash: &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;We start  &lt;code&gt;ruby -run -ehttpd&lt;/code&gt; &lt;br/&gt;
and give the port &lt;code&gt;-p8080&lt;/code&gt; &lt;br/&gt;
we serve the directory with all our files &lt;br/&gt;
&lt;code&gt;.&lt;/code&gt; or &lt;code&gt;/www&lt;/code&gt;, whatever makes you smile [&lt;a href=&#34;https://gist.github.com/mjdiloreto/df3e7a7ecd79f83950bfc95c09c717bf&#34;&gt;*&lt;/a&gt;] &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Now we have a perfect example &lt;br/&gt;
of a &lt;em&gt;static site&lt;/em&gt; - for many use-cases ample. &lt;br/&gt;
But what if we want to change some of our links? &lt;br/&gt;
Maybe all &lt;code&gt;/blue&lt;/code&gt; should change to &lt;code&gt;/pink&lt;/code&gt;? &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;We could manually edit each of our pages, &lt;br/&gt;
inside our text editor, but that would take ages! &lt;br/&gt;
Maybe this works, if our site is small, &lt;br/&gt;
or maybe an alternative is better after all? &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;If we could track every link with a name, &lt;br/&gt;
and reuse &lt;em&gt;templates&lt;/em&gt; wherever markup is the same&amp;hellip; &lt;br/&gt;
Then we could just simply &lt;em&gt;generate&lt;/em&gt; &lt;br/&gt;
our whole static site, wouldn&amp;rsquo;t that be great? &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Hugo&lt;/code&gt; and &lt;code&gt;Jekyll&lt;/code&gt; and &lt;code&gt;Gatsby&lt;/code&gt; and more, &lt;br/&gt;
oh there&amp;rsquo;s static site generators out there galore! &lt;br/&gt;
Even more powerful, especially when collaborating, &lt;br/&gt;
are &lt;code&gt;CMS&lt;/code&gt; tools that make things less frustrating. &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Most of the web runs with &lt;code&gt;CMS&lt;/code&gt; systems, &lt;br/&gt;
don&amp;rsquo;t ignore their power, you just might miss them. &lt;br/&gt;
&lt;code&gt;Wordpress&lt;/code&gt; is the master of this domain - &lt;br/&gt;
&lt;strong&gt;43%&lt;/strong&gt; of internet pages play by their game[&lt;a href=&#34;https://w3techs.com/technologies/details/cm-wordpress&#34;&gt;*&lt;/a&gt;]. &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;But we&amp;rsquo;re building &lt;em&gt;apps&lt;/em&gt;!&amp;rdquo;, I hear you exclaim, &lt;br/&gt;
I will not use &lt;em&gt;Wordpress&lt;/em&gt;, that&amp;rsquo;s super lame. &lt;br/&gt;
Well fine, that&amp;rsquo;s fine - if that&amp;rsquo;s how you&amp;rsquo;ll be, &lt;br/&gt;
let&amp;rsquo;s venture into a world of greater complexity. &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;These templates are nice, but my app is &lt;em&gt;dynamic&lt;/em&gt;. &lt;br/&gt;
There&amp;rsquo;s too much data for one page, I&amp;rsquo;m starting to panic!&amp;rdquo; &lt;br/&gt;
Relax, my friend, lucky for you I say, &lt;br/&gt;
&amp;ldquo;There&amp;rsquo;s &lt;code&gt;AJAX&lt;/code&gt; to help keep that data at bay!&amp;rdquo; &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll serve smaller elements with no data inside, &lt;br/&gt;
A placeholder sits where it will eventually reside. &lt;br/&gt;
When users interact - like clicking a button - &lt;br/&gt;
Javascript will ask our server for data to shove in. &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Most folks use &lt;code&gt;JSON&lt;/code&gt;, a simple notation, &lt;br/&gt;
Easily understood, facilitating creation. &lt;br/&gt;
So our server changes its primary role, &lt;br/&gt;
from templating HTML to serving JSON, on the whole. &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;This way can work well, and has for many years, &lt;br/&gt;
with &lt;code&gt;JQuery&lt;/code&gt; a standout among all of its peers. &lt;br/&gt;
But imperatively updating different parts of our pages, &lt;br/&gt;
can soon prove nightmarish when apps grow through the ages. &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;I know what we&amp;rsquo;ll do! I&amp;rsquo;ll share you the news&amp;hellip; &lt;br/&gt;
Our UI is a &lt;em&gt;function&lt;/em&gt;, from Data to Views[&lt;a href=&#34;https://www.youtube.com/watch?v=x7cQ3mrcKaY&#34;&gt;*&lt;/a&gt;]! &lt;br/&gt;
So &lt;code&gt;React&lt;/code&gt; comes along, and has not yet stopped, &lt;br/&gt;
to declare a tree &lt;em&gt;structure&lt;/em&gt; where data flows from the top. &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;JSX&lt;/code&gt; is not templates, when used in our projects, &lt;br/&gt;
It&amp;rsquo;s builds a &lt;em&gt;virtual DOM&lt;/em&gt;, plain Javascript objects. &lt;br/&gt;
These objects are then rendered, by &lt;code&gt;ReactDOM&lt;/code&gt;, &lt;br/&gt;
and diff&amp;rsquo;ed on state changes, imperative updates be gone! &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;We can write our whole app in this functional way, &lt;br/&gt;
and our sad HTML almost completely goes away. &lt;br/&gt;
Just have one div, with an id such as &lt;code&gt;root&lt;/code&gt;, &lt;br/&gt;
a tiny HTML file and a Javascript bundle to boot! &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Just one &lt;em&gt;single page&lt;/em&gt;, no routes needed here, &lt;br/&gt;
when the URL is in &lt;code&gt;state&lt;/code&gt;, the right things will appear. &lt;br/&gt;
Routing is done client-side, with so much more, &lt;br/&gt;
but this leads to issues, many things become chores. &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Client-side routing can be a hassle, &lt;br/&gt;
and history navigation, things the browser should wrestle&amp;hellip; &lt;br/&gt;
Bugs arise from how state is assembled. &lt;br/&gt;
&lt;em&gt;Everything&lt;/em&gt; on one page with shared state? Developers tremble. &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Projects like &lt;code&gt;Redux&lt;/code&gt; promise organization, &lt;br/&gt;
of all client-side state, but can cause complication. &lt;br/&gt;
Data is duplicated, on two different systems, &lt;br/&gt;
synchronizing one and the other, becomes a tough mission. &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Other issues also come into play, &lt;br/&gt;
like &lt;em&gt;SEO&lt;/em&gt;, where pages must have data right away. &lt;br/&gt;
Let&amp;rsquo;s get to work, taking React to the &lt;code&gt;Node&lt;/code&gt; runtime, &lt;br/&gt;
so we can render things &lt;strong&gt;twice&lt;/strong&gt;, not just one time! &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;NextJS&lt;/code&gt; is an example of a framework, &lt;br/&gt;
That tries to make this server-side game work. &lt;br/&gt;
Render as much as possible in the initial HTML response, &lt;br/&gt;
which will then be &lt;em&gt;hydrated&lt;/em&gt; on the client-side once. &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;But wait, we&amp;rsquo;re rendering HTML on the server once more? &lt;br/&gt;
Didn&amp;rsquo;t we use to do this, in the days of yore?&amp;rdquo; &lt;br/&gt;
Why yes we &lt;em&gt;did&lt;/em&gt; do this, I&amp;rsquo;m glad you can tell! &lt;br/&gt;
But we have extra client-side powers, when we need those as well. &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Other server-side frameworks are joining the mixer, &lt;br/&gt;
One excellent tool is LiveView in Elixir. &lt;br/&gt;
Screw client-side React, Javascript is icky. &lt;br/&gt;
We can react using websockets, it isn&amp;rsquo;t that tricky. &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Then there&amp;rsquo;s &lt;code&gt;HTMX&lt;/code&gt;, a darling of mine, &lt;br/&gt;
the simplicity is tantalizing, I think it works fine. &lt;br/&gt;
Why should just &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; issue requests? &lt;br/&gt;
Shouldn&amp;rsquo;t any element act at our behest? &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll share an arcane secret, my young acolyte&amp;hellip; &lt;br/&gt;
HTML is &lt;em&gt;hypertext&lt;/em&gt;, &lt;code&gt;HATEOAS&lt;/code&gt; gives it flight[&lt;a href=&#34;https://htmx.org/essays/hateoas/&#34;&gt;*&lt;/a&gt;]! &lt;br/&gt;
An ancient idea, gaining traction fast, &lt;br/&gt;
while hypertext standards are stuck in the past. &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;The web is a beautiful, wonderful thing, &lt;br/&gt;
these myriad styles make my heart sing! &lt;br/&gt;
I hope you see just how lucky we are &lt;br/&gt;
that our apps can reach anyone, those near or afar. &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;I want you try each web app approach too. &lt;br/&gt;
It is all great fun, it&amp;rsquo;s been a pleasure to coach you. &lt;br/&gt;
Now go forth and build, in whichever way you may choose, &lt;br/&gt;
make marvelous apps, and no one will lose! &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;(P.S. Sorry Angular, Svelte, Vue, etc. etc. etc. etc.)&lt;/p&gt;
</description>
       </item>
       
       <item>
         <title>Finding my Career in Computer Science; Busy Beavers and The Hacker Jargon Lexicon</title>
         <link>https://mjdiloreto.github.io/posts/hacker-jargon-lexicon/</link>
         <pubDate>Wed, 04 Jan 2023 20:47:00 -0600</pubDate>
         
         <guid>https://mjdiloreto.github.io/posts/hacker-jargon-lexicon/</guid>
         <description>&lt;p&gt;When you&amp;rsquo;re a decently smart and motivated kid in high school your opportunities are infinite.
That&amp;rsquo;s what people say to you anyway.&lt;/p&gt;
&lt;p&gt;You can become anything you want, as long as it makes good money, and it matches your strengths and weaknesses (fishes can&amp;rsquo;t climb trees and all that), and the colleges you can get into have a good program for it, and you can afford to go to that college, and you don&amp;rsquo;t quit because that would be a &lt;em&gt;waste&lt;/em&gt;, and if you don&amp;rsquo;t find something you&amp;rsquo;re kind of screwed, and if you do find something but you end up hating it you&amp;rsquo;re also kind of screwed, so just make the right choice in high school and you&amp;rsquo;ll be all set!&lt;/p&gt;
&lt;p&gt;I was lucky enough to have navigated that minefield and somehow made the right choice.
I found my passion for computer science in high school&amp;hellip; when my school didn&amp;rsquo;t offer any computer science classes.
Lucky for me high school is actually quite a bad place to figure out what career you ought to have, and I was forced to search elsewhere!&lt;/p&gt;
&lt;p&gt;There were two forces I distinctly remember - both of which would have been easy to overlook as omens - which led me to emphatically pursue my career and not look back.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The &lt;a href=&#34;https://www.youtube.com/computerphile&#34;&gt;Computerphile&lt;/a&gt; YouTube channel&lt;/li&gt;
&lt;li&gt;The &lt;a href=&#34;http://www.catb.org/jargon/html/go01.html&#34;&gt;hacker jargon lexicon&lt;/a&gt; (not kidding)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I encountered these two sources of inspiration simultaneously, and for the same reason &amp;mdash; procrastination.&lt;/p&gt;
&lt;p&gt;I binged the Computerphile YouTube channel (an extension of the more popular &lt;a href=&#34;https://www.youtube.com/numberphile&#34;&gt;Numberphile&lt;/a&gt; channel) one night in the spring semester of my senior year of high school while procrastinating on some homework, and, googling one of the older technologies mentioned in one of the videos, I stumbled across the lexicon page, where I read almost every single entry over the course of a week.&lt;/p&gt;
&lt;p&gt;I thought to myself:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;If this is what I&amp;rsquo;m watching and reading to procrastinate, then maybe I should just&amp;hellip; study this stuff! That way it wouldn&amp;rsquo;t be procrastinating anymore&amp;rdquo;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And this isn&amp;rsquo;t one of those &lt;em&gt;I had a vague feeling in the past and now I&amp;rsquo;m explaining it lucidly with the benefit of hindsight&lt;/em&gt; quotations.
This was literally a thought that I had to myself at 2:00am on a Friday morning after getting lost in a playlist of videos about computer memory, the C programming language, and busy beavers:&lt;/p&gt;
&lt;iframe width=&#34;700&#34; height=&#34;420&#34; src=&#34;https://youtube.com/embed/CE8UhcyJS0I&#34; title=&#34;nil&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;I remember it so clearly because it caused me to change my application to Northeastern University from &lt;em&gt;College of Engineering&lt;/em&gt; to &lt;em&gt;College of Computer and Information Sciences&lt;/em&gt; the very next day.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;I always thought an &lt;em&gt;&amp;ldquo;A Day in the Life&amp;rdquo;&lt;/em&gt; video series would be awesome for high school kids to figure out what they might do with their careers.
It would be a catalog of videos about the daily lives of people in any field, kind of like the TV show &lt;em&gt;Dirty Jobs with Mike Rowe&lt;/em&gt;, but for other, less dirty jobs.&lt;/p&gt;
&lt;p&gt;Computerphile served that &lt;em&gt;&amp;ldquo;A Day in the Life&amp;rdquo;&lt;/em&gt; purpose for me.
I saw computer science professors and graduate students discuss problems and technologies they were passionate about in a real, everyday kind of way; not aggrandizing their work, just humbly explaining it.&lt;/p&gt;
&lt;p&gt;It made computer science feel like home &amp;ndash; kind of warm and cozy with elegant solutions, friendly people, and cool accents.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;http://www.catb.org/jargon/html/lexicon.html&#34;&gt;Lexicon&lt;/a&gt; was a different beast entirely.&lt;/p&gt;
&lt;p&gt;It introduced me headfirst into the hacker ethos; distilled, raw, and unapologetic.
Lots of internal links explaining this strange ism with that one.
Lots of short, witty, quizzical &amp;ldquo;definitions&amp;rdquo;.
Lots of outdated references to legacy machines, legacy technologies, and legacy people.
For me it painted a vivid picture of lots of typical (or maybe atypical), brilliant hacker minds wrapped up in stupid flamewars and online dungeons and terminals and punch cards.
Stale air and stale coffee, but fresh and fierce opinions, and no time for &lt;em&gt;inefficiencies&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.catb.org/jargon/html/A/ACK.html&#34;&gt;Ack&lt;/a&gt;ing, &lt;a href=&#34;http://www.catb.org/jargon/html/G/grok.html&#34;&gt;grok&lt;/a&gt;king, &lt;a href=&#34;http://www.catb.org/jargon/html/G/grep.html&#34;&gt;grep&lt;/a&gt;ping, &lt;a href=&#34;http://www.catb.org/jargon/html/B/barf.html&#34;&gt;barf&lt;/a&gt;ing, &lt;a href=&#34;http://www.catb.org/jargon/html/C/chrome.html&#34;&gt;chrome&lt;/a&gt;, &lt;a href=&#34;http://www.catb.org/jargon/html/G/glob.html&#34;&gt;globs&lt;/a&gt;, &lt;a href=&#34;http://www.catb.org/jargon/html/T/thunk.html&#34;&gt;thunks&lt;/a&gt;, &lt;a href=&#34;http://www.catb.org/jargon/html/K/kluge.html&#34;&gt;kluges&lt;/a&gt;, &lt;a href=&#34;http://www.catb.org/jargon/html/L/LISP.html&#34;&gt;lisp&lt;/a&gt;, &lt;a href=&#34;http://www.catb.org/jargon/html/F/foo.html&#34;&gt;foo&lt;/a&gt;/&lt;a href=&#34;http://www.catb.org/jargon/html/B/bar.html&#34;&gt;bar&lt;/a&gt;, and most importantly, the true definition of &lt;a href=&#34;http://www.catb.org/jargon/html/H/hack.html&#34;&gt;hack&lt;/a&gt; are all quotidian now.
It also taught me what a &lt;a href=&#34;http://www.catb.org/jargon/html/R/Real-Programmer.html&#34;&gt;real programmer&lt;/a&gt; is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A Real Programmer [is someone whose] code can awe with its fiendish brilliance, even as its crockishness appalls. Real Programmers live on junk food and coffee, hang line-printer art on their walls, and terrify the crap out of other programmers.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And even though I didn&amp;rsquo;t want to &lt;em&gt;embody&lt;/em&gt; some slovenly, antisocial geek, there was a part of me that was endlessly fascinated by this caricature, and I felt like I could see myself taking baby steps in that direction, maybe learning Lisp or taking a stance in the emacs/vi(m) &lt;a href=&#34;http://www.catb.org/jargon/html/H/holy-wars.html&#34;&gt;holy war&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Internalizing the lexicon wasn&amp;rsquo;t just for fun, it also provided me with &lt;em&gt;real&lt;/em&gt; utility over the years.
If you are an experienced programmer and scan through the glossary you will realize there are &lt;em&gt;tons&lt;/em&gt; of phrases you merely take for granted, but which would come off as completely bizarre to a newcomer.
This is probably true of any profession - I&amp;rsquo;m sure carpenters have an entire vernacular which is equally complex - and I&amp;rsquo;m sure I would have picked up everything I needed slowly over time, but I got to learn all of these things &lt;em&gt;before&lt;/em&gt; even studying computer science at university!
It seriously felt like I had superpowers when I knew all these insider terms while other students were left bewildered the first time a professor asked the class to &lt;em&gt;grep&lt;/em&gt; for something.&lt;/p&gt;
&lt;p&gt;Learning the lexicon allowed me to be in the club, to utter the shibboleth, and to &lt;em&gt;belong&lt;/em&gt; long before I really had any right to.
It seemed to be a mystical text, revealing the secret gnosis of the real hackers.
Where Computerphile gave me a sense of the vastness and familiarity of computer science, the lexicon gave me a sense of the arcane, mysterious, and rich history of the field.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m grateful to have had the experiences I did, and to have listened to and interpreted the subtle hints of my own nature.
I&amp;rsquo;m also grateful I did so much procrastinating in high school, otherwise I probably have ended up as some kind of real engineer, not a &lt;em&gt;hacker&lt;/em&gt;.&lt;/p&gt;
</description>
       </item>
       
       <item>
         <title>Making the Yasnippet *​new-snippet​* Buffer More Helpful</title>
         <link>https://mjdiloreto.github.io/posts/yasnippet-helpful-buffer/</link>
         <pubDate>Sat, 05 Nov 2022 23:47:00 -0500</pubDate>
         
         <guid>https://mjdiloreto.github.io/posts/yasnippet-helpful-buffer/</guid>
         <description>&lt;p&gt;Yasnippets are a powerful text templating system for emacs, with a convenient interface based on &lt;em&gt;snippets&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The templating language itself is&amp;hellip; fine, but it can be difficult to remember exactly what the syntax is, and yasnippet doesn&amp;rsquo;t help you out that much when you run &lt;code&gt;yas-new-snippet&lt;/code&gt;:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;,# -*- mode: snippet -*-
,# name:
,# key:
,# --
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That&amp;rsquo;s all you&amp;rsquo;re presented with.
You have to remember the difference between &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;key&lt;/code&gt; (&lt;code&gt;key&lt;/code&gt; is the abbreviation you type before invoking &lt;code&gt;yas-expand&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt; is just a human-readable description of the snippet), and then you type the snippet to be inserted below.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve used yasnippets for a couple years now, and I realize I&amp;rsquo;m never going to remember the &lt;a href=&#34;http://joaotavora.github.io/yasnippet/snippet-development.html#org9801aa7&#34;&gt;entire templating&lt;/a&gt; syntax here.
I mean, it isn&amp;rsquo;t anything crazy, but there are plenty of idiosyncrasies to make each read-through of the documentation feel like the first time (a bad sign for any kind of syntax you want to be familiar to users).&lt;/p&gt;
&lt;p&gt;So I came up with a simple solution, just have the initial buffer created by &lt;code&gt;yas-new-snippet&lt;/code&gt; be more useful:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;# key: what the user types to expand this snippet
# name: what the user sees the snippet listed as

# For more information visit
# http://joaotavora.github.io/yasnippet/snippet-development.html#org9801aa7

## Embed elisp - back quotes:
# ifndef ${1:_[backquote](upcase (file-name-nondirectory (file-name-sans-extension (buffer-file-name))))[backquote]_H_}

# NB: DON&amp;#39;T MODIFY THE BUFFER INSIDE BACKQUOTES!


## Tab stops - $N
# $0 is the last, $1 is the first, $2 is second, etc.


## Placeholders - ${N:default}
# ${N:default value}


## Mirrors - just reuse a tabstop with placeholder
# \begin{${1:enumerate}}
#     $0
# \end{$1}


## Transforming Mirrors - $(
# ${2:foo}
# ${2:$(capitalize yas-text)}


## Transforming fields - ${N:name:$(elisp)} or ${N:$$(elisp)}
# #define &amp;#34;${1:$$(upcase yas-text)}&amp;#34;


## Choose a value from a list of options
# &amp;lt;div align=&amp;#34;${2:$$(yas-choose-value &amp;#39;(&amp;#34;right&amp;#34; &amp;#34;center&amp;#34; &amp;#34;left&amp;#34;))}&amp;#34;&amp;gt;


## Useful things bound inside evaluated elisp
# | variable         | description                                             |
# |------------------+---------------------------------------------------------|
# | yas-text         | the current text of this field                          |
# | yas-field-value  | the current text of $1 (or $2, etc.)                    |
# | yas-modified-p   | whether the field is modified                           |
# | yas-choose-value | user chooses from a list of options                     |
# | yas-verify-value | Verify that the current field value is in POSSIBILITIES |
# --

$0
${1:default value}
${1:$(capitalize yas-text)}
${2:$$(yas-choose-value &amp;#39;(&amp;#34;right&amp;#34; &amp;#34;center&amp;#34; &amp;#34;left&amp;#34;))}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I saved this new prompt in my emacs directory in a file called &lt;code&gt;yasnippet-prompt.txt&lt;/code&gt;.
This is essentially just a pared-down version of the &lt;a href=&#34;http://joaotavora.github.io/yasnippet/snippet-development.html#org9801aa7&#34;&gt;official docs&lt;/a&gt;, and includes some useful examples to get started with.&lt;/p&gt;
&lt;p&gt;To use this as the &lt;code&gt;yas-new-snippet&lt;/code&gt; prompt, I won&amp;rsquo;t bother customizing the yasnippet group or anything like that (I&amp;rsquo;m not sure they even expose the prompt as a customization variable), but this is emacs-lisp!
I don&amp;rsquo;t need the yasnippet author&amp;rsquo;s permission or cooperation to use their code any way I see fit, and it&amp;rsquo;s trivial to replace the original &lt;code&gt;yas-new-snippet&lt;/code&gt; command with a version that does what I want &amp;ldquo;the manual way&amp;rdquo;, the way I would accomplish the goal myself&amp;hellip; manually.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(defvar matt/yas-new-snippet-prompt-file (doom-path &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;yasnippet-prompt.txt&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(defun matt/yas-new-snippet-with-example ()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (interactive)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#a6e22e&#34;&gt;funcall-interactively&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;yas-new-snippet&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#a6e22e&#34;&gt;erase-buffer&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (insert-file matt/yas-new-snippet-prompt-file))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(map! :map yas-minor-mode-map [remap yas-new-snippet] &lt;span style=&#34;color:#a6e22e&#34;&gt;#&amp;#39;&lt;/span&gt;matt/yas-new-snippet-with-example)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The steps are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;call the normal command&lt;/li&gt;
&lt;li&gt;erase the useless buffer&lt;/li&gt;
&lt;li&gt;insert the helpful buffer&lt;/li&gt;
&lt;li&gt;remap the keybinding for &lt;code&gt;yas-new-snippet&lt;/code&gt; to always refer to my version instead.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And that&amp;rsquo;s it!&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s very cathartic to have the editor do exactly what I want the way I want it to, and emacs is the only software available that even comes close to this level of program-ability.&lt;/p&gt;
&lt;h2 id=&#34;comparing-to-jetbrains&#34;&gt;Comparing to Jetbrains&lt;/h2&gt;
&lt;p&gt;I also use the Jetbrains IDEs, which are some of the most widely used editors and arguably the most powerful IDEs for many programming languages, and they have a feature called &lt;a href=&#34;https://www.jetbrains.com/help/idea/using-live-templates.html&#34;&gt;Live templates&lt;/a&gt; which is analogous to yasnippets.&lt;/p&gt;
&lt;p&gt;Live templates use the &lt;a href=&#34;https://velocity.apache.org/engine/devel/user-guide.html#velocity-template-language-vtl-an-introduction&#34;&gt;Apache Velocity Templating Engine&lt;/a&gt; to program and expand templates, and that system is WAY more complex than yasnippet&amp;rsquo;s simple syntax.
&lt;strong&gt;And&lt;/strong&gt; yasnippets are way more powerful than Live Templates, because instead of stupid, STUPID arbitrary limitations on what are &amp;ldquo;valid&amp;rdquo; transformations in templates, yasnippet treats me like an adult and just lets me use &lt;strong&gt;any elisp&lt;/strong&gt; inside the snippets.&lt;/p&gt;
&lt;p&gt;Seriously, look at &lt;a href=&#34;https://www.jetbrains.com/help/idea/template-variables.html#predefined_functions&#34;&gt;this silliness&lt;/a&gt; from the Jetbrains documentation:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Functions used in live template variables﻿
The following functions can be used to define live template variables:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Function&lt;/th&gt;
&lt;th&gt;Definition&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;capitalize(&amp;lt;String&amp;gt;)&lt;/td&gt;
&lt;td&gt;Capitalizes the first letter of a string.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;capitalizeAndUnderscore(&amp;lt;String&amp;gt;)&lt;/td&gt;
&lt;td&gt;Capitalizes all the letters of a string, and inserts an underscore between the parts.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;clipboard()&lt;/td&gt;
&lt;td&gt;Returns the contents of the system clipboard.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;hellip;&lt;/td&gt;
&lt;td&gt;&amp;hellip;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/blockquote&gt;
&lt;p&gt;Granted there are a bunch of possibilities there, but seriously, you shouldn&amp;rsquo;t have to (and cannot possibly) enumerate all the possible editing operations I might want to do with my code.&lt;/p&gt;
&lt;p&gt;Whereas with yasnippets my imagination is my only limitation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Maybe I want to give snippets choices based on live information, e.g.
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;${2:$$(yas-choose-value (get-list-of-live-docker-images))}
${2:$$(yas-choose-value (browse-url-and-extract-table-info))}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;Maybe I want to conditionally format a field based on the value of another field.&lt;/li&gt;
&lt;li&gt;Maybe I want to recursively run snippets!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;with Jetbrains you have a couple-dozen choices and &lt;em&gt;that&amp;rsquo;s it, forever, no more extending the system&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Obviously I understand why the Jetbrains editor necessitates this type of system (they cannot run arbitrary user code mixed in with all these privileged editing functions), and the editor would definitely blow up if they gave you complete freedom, but that&amp;rsquo;s what makes IDEs suck and emacs awesome.
It&amp;rsquo;s built in a way that the &lt;em&gt;default&lt;/em&gt; assumption of every single function is that it can be used by whomever whenever for whatever reason.&lt;/p&gt;
&lt;p&gt;This freedom is the reason for emacs superiority, full stop.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s the proper counter to &amp;ldquo;well VS Code has most of the same stuff and it has modern conveniences (and I don&amp;rsquo;t have to learn a whole programming language just to use it)&amp;rdquo;.
Those people always ask &amp;ldquo;What can you really do with emacs that I can&amp;rsquo;t do with VSCode?&amp;rdquo;, and the true answer is &amp;ldquo;Whatever I want&amp;rdquo;.
I&amp;rsquo;m not even a RMS fan or super zealous about the FOSS ideology or anything, this is just good software.
It&amp;rsquo;s certainly the most free software.&lt;/p&gt;
&lt;p&gt;FOSS ideologues don&amp;rsquo;t get that most people don&amp;rsquo;t really want or &lt;em&gt;need&lt;/em&gt; that much freedom, and that&amp;rsquo;s fine.
They wouldn&amp;rsquo;t get much value from using emacs.&lt;/p&gt;
&lt;p&gt;But, what I&amp;rsquo;ve learned this past year is that you won&amp;rsquo;t ever leverage the freedom emacs affords without writing emacs-lisp.
I&amp;rsquo;m sorry&amp;hellip; I&amp;rsquo;m convinced there&amp;rsquo;s just no way around it.
Sure, you can &lt;em&gt;use&lt;/em&gt; emacs just fine without writing any code (heck I did for a long time&amp;hellip;), but then you will always be limited to what other people &lt;em&gt;think&lt;/em&gt; you want.&lt;/p&gt;
&lt;p&gt;The truth is that editing with emacs and learning emacs-lisp are two distinct processes, very long and arduous, that only together unlock the power of emacs.&lt;/p&gt;
&lt;p&gt;Finally committing to really learning emacs-lisp and the systems that compose emacs leveled-up my editing beyond what the other systems can provide me, but it&amp;rsquo;s been a really intense investment.&lt;/p&gt;
&lt;p&gt;Over the 4 years I&amp;rsquo;ve used emacs it has consumed every text-editing activity I do (blogging, side projects in all sorts of different programming languages, &lt;a href=&#34;https://github.com/mjdiloreto/simsched&#34;&gt;day-planning&lt;/a&gt;, organizing all my various things with org-mode) &lt;em&gt;except&lt;/em&gt; professional web development.
I still use Jetbrain&amp;rsquo;s WebStorm for that, because it has so many features out-of-the-box I use daily that I haven&amp;rsquo;t configured emacs for (yet), but even many parts of that are slowly losing to my ever-growing emacs configuration, such as git interaction with &lt;a href=&#34;https://magit.vc/&#34;&gt;magit&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That might seem ironic given all the chest-thumping for emacs, but I don&amp;rsquo;t think it&amp;rsquo;s hypocritical.
I see emacs as one of the few callus-forming instruments available to programmers, as Rich Hickey would say in his &amp;ldquo;&lt;a href=&#34;https://www.infoq.com/presentations/Design-Composition-Performance/&#34;&gt;Design, Composition and Performance&lt;/a&gt;&amp;rdquo; talk (he makes this particular point at the 32:00 mark).&lt;/p&gt;
&lt;p&gt;It &lt;em&gt;hurts&lt;/em&gt; to use sometimes, takes ages to learn, and is quirky, but there&amp;rsquo;s no limit to your potential with it, and if you&amp;rsquo;re willing to invest wisely it pays dividends.
So no, I don&amp;rsquo;t &lt;em&gt;have&lt;/em&gt; to use emacs for professional coding work just yet, as I&amp;rsquo;m not &lt;em&gt;quite&lt;/em&gt; enough of a virtuoso to make it play better than WebStorm.&lt;/p&gt;
</description>
       </item>
       
       <item>
         <title>Literate Import</title>
         <link>https://mjdiloreto.github.io/posts/literate-import/</link>
         <pubDate>Sun, 16 Oct 2022 17:14:00 -0500</pubDate>
         
         <guid>https://mjdiloreto.github.io/posts/literate-import/</guid>
         <description>&lt;p&gt;The following is a literate program written in emacs-lisp.&lt;/p&gt;
&lt;h2 id=&#34;rationale&#34;&gt;Rationale&lt;/h2&gt;
&lt;p&gt;I like to write literate programs using org-babel-tangle.
It&amp;rsquo;s an excellent workflow for literate programming which allows me to write an entire project in a single file, then tangle all the source blocks to their own files in the project.&lt;/p&gt;
&lt;p&gt;Sometimes though I want to incorporate some external files into the project, and this leads to a problem.
The literate programming flow with org-babel is &lt;em&gt;always&lt;/em&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;write source code in org file src blocks&lt;/li&gt;
&lt;li&gt;tangle source code out to individual project files&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Once I add a file to the project directly, the org file describing my literate program will be missing some of the program, it will be incomplete.&lt;/p&gt;
&lt;p&gt;I could copy the source code into the org file, and tangle it out, just like all the internal project files, but sometimes I want to add a &lt;em&gt;ton&lt;/em&gt; of files to my project, e.g. initializing a project with a starter template like &lt;code&gt;create-react-app&lt;/code&gt; for React projects, &lt;code&gt;lein new&lt;/code&gt; for Clojure projects, &lt;code&gt;mix new&lt;/code&gt; for Elixir projects, etc.&lt;/p&gt;
&lt;p&gt;Almost all professional programming languages have some sort of code generation mechanism that becomes useful at some point.
Reincorporating those generated files into the literate document is a necessary feature for me because I want to be able to use these tools while &lt;em&gt;also&lt;/em&gt; maintaining my project as a literate program in a single org file.&lt;/p&gt;
&lt;p&gt;My solution is to create a command to &lt;em&gt;reincorporate&lt;/em&gt; a project&amp;rsquo;s file structure back into the root org file.
From there I can use all the org-mode features I&amp;rsquo;m used to (folding, navigation, editing, moving, etc) to reorganize the code into a cohesive narrative, which is the entire point of writing literate programs in the first place.&lt;/p&gt;
&lt;h2 id=&#34;implementation&#34;&gt;Implementation&lt;/h2&gt;
&lt;p&gt;First, we create a group for the new functionality. I added this because I will need a customizable variable, which we will see next. One interesting thing to note is that I can associate this new group with existing groups, here &lt;code&gt;org-babel&lt;/code&gt; and &lt;code&gt;org&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(defgroup literate-import &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Import missing project files into a top-level literate org-file&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  :tag &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;literate-import&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  :group &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-babel&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  :group &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next is the custom variable. I realized that, when importing source blocks from files in a project, it is not immediately clear which language is being used.
I found &lt;a href=&#34;https://gist.github.com/ppisarczyk/43962d06686722d26d176fad46879d41%20&#34;&gt;this gist&lt;/a&gt; which gives a pretty decent mapping of &lt;code&gt;file extension-&amp;gt;source language&lt;/code&gt;, and I supplemented it a bit with other sources.
Of course, when using org-babel, the source language can be anything you want, and it will still get tangled properly, so even:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#+begin_src nonexistent-language :tangle ./something.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;will still tangle the source block contents to the file &lt;code&gt;something.txt&lt;/code&gt;, so this feature isn&amp;rsquo;t strictly necessary, but it will be convenient to automatically fill in the source language in the majority of cases.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(defcustom literate-import-language-extensions
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;;; (&amp;#34;Awk&amp;#34; . &amp;#34;awk&amp;#34;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.awk&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;awk&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.auk&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;awk&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.gawk&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;awk&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.mawk&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;awk&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.nawk&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;awk&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;;; (&amp;#34;C&amp;#34; . C)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.c&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.cats&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.h&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.idc&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.w&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;;; (&amp;#34;R&amp;#34; . R)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.r&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;R&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.rd&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;R&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.rsx&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;R&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;;; IDK what this language is, but it isn&amp;#39;t in the list in the gist&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;;; (&amp;#34;Calc&amp;#34; . calc)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;;; (&amp;#34;Clojure&amp;#34; . clojure)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.clj&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;clojure&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.boot&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;clojure&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.cl2&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;clojure&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.cljc&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;clojure&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.cljs&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;clojure&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.cljs.hl&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;clojure&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.cljscm&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;clojure&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.cljx&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;clojure&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.hic&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;clojure&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;;; (&amp;#34;Css&amp;#34; . css)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.css&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;css&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;;; SCSS isn&amp;#39;t in the org-babel list, but I will include it here anyway&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;;; (&amp;#34;Scss&amp;#34; . scss)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.scss&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;scss&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;;; I actually am familiar with ditaa and it probably wouldn&amp;#39;t be used in isolation, so won&amp;#39;t have a file extension&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;;; (&amp;#34;Ditaa&amp;#34; . ditaa)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;;; Don&amp;#39;t know dot&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;;; (&amp;#34;Dot&amp;#34; . dot)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;;; (&amp;#34;Emacs lisp&amp;#34; . emacs-lisp)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.el&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;emacs-lisp&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.emacs&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;emacs-lisp&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.emacs.desktop&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;emacs-lisp&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;;; (&amp;#34;Forth&amp;#34; . forth)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.fth&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;forth&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.4th&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;forth&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.f&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;forth&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.for&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;forth&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.forth&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;forth&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.fr&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;forth&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.frt&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;forth&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.fs&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;forth&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;;; (&amp;#34;Fortran&amp;#34; . fortran)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.f90&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fortran&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.f&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fortran&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.f03&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fortran&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.f08&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fortran&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.f77&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fortran&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.f95&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fortran&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.for&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fortran&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.fpp&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fortran&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;;; (&amp;#34;Gnuplot&amp;#34; . gnuplot)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.gp&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gnuplot&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.gnu&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gnuplot&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.gnuplot&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gnuplot&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.plot&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gnuplot&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.plt&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gnuplot&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;;; (&amp;#34;Haskell&amp;#34; . haskell)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.hs&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;haskell&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.hsc&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;haskell&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;;; (&amp;#34;Java&amp;#34; . java)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.java&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;java&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.jsp&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;java&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;;; (&amp;#34;Javascript&amp;#34; . js)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.js&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;js&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;._js&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;js&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.bones&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;js&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.es&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;js&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.es6&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;js&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.frag&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;js&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.gs&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;js&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.jake&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;js&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.jsb&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;js&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.jscad&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;js&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.jsfl&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;js&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.jsm&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;js&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.jss&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;js&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.njs&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;js&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.pac&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;js&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.sjs&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;js&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.ssjs&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;js&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.sublime-build&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;js&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.sublime-commands&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;js&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.sublime-completions&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;js&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.sublime-keymap&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;js&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.sublime-macro&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;js&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.sublime-menu&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;js&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.sublime-mousemap&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;js&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.sublime-project&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;js&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.sublime-settings&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;js&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.sublime-theme&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;js&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.sublime-workspace&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;js&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.sublime_metrics&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;js&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.sublime_session&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;js&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.xsjs&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;js&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.xsjslib&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;js&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;;; This one isn&amp;#39;t present in the list, but I know it&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;;; (&amp;#34;LaTeX&amp;#34; . latex)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.tex&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;latex&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;;; (&amp;#34;Lilypond&amp;#34; . lilypond)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.ly&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lilypond&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.ily&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lilypond&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;;; Assuming common lisp&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;;; (&amp;#34;Lisp&amp;#34; . lisp)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.lisp&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lisp&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.asd&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lisp&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.cl&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lisp&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;;; (&amp;#34;.l&amp;#34; . lisp)                       ; collision with Pico Lisp&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.lsp&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lisp&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.ny&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lisp&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.podsl&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lisp&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.sexp&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lisp&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;;; (&amp;#34;Makefile&amp;#34; . makefile)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.mak&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;makefile&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.d&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;makefile&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.mk&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;makefile&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.mkfile&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;makefile&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;;; Can&amp;#39;t find anything online about this other than wxMaxima&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;;; (&amp;#34;Maxima&amp;#34; . maxima)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;wxmx&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;maxima&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;;; (&amp;#34;Matlab&amp;#34; . matlab)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.matlab&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;matlab&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.m&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;matlab&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;;; (&amp;#34;Ocaml&amp;#34; . ocaml)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.ml&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ocaml&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.eliom&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ocaml&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.eliomi&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ocaml&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.ml4&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ocaml&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.mli&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ocaml&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.mll&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ocaml&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.mly&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ocaml&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;;; IDK what this is&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;;; (&amp;#34;Octave&amp;#34; . octave)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;;; (&amp;#34;Org&amp;#34; . org)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.org&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;org&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;;; (&amp;#34;Perl&amp;#34; . perl)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.pl&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;perl&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.al&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;perl&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.cgi&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;perl&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.fcgi&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;perl&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.perl&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;perl&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.ph&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;perl&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.plx&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;perl&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.pm&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;perl&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.pod&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;perl&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.psgi&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;perl&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.t&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;perl&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;;; (&amp;#34;Pico Lisp&amp;#34; . picolisp)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.l&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;picolisp&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;;; Not in the list&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;;; (&amp;#34;PlantUML&amp;#34; . plantuml)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;;; (&amp;#34;Python&amp;#34; . python)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.py&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;python&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.bzl&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;python&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.cgi&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;python&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.fcgi&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;python&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.gyp&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;python&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.lmi&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;python&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.pyde&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;python&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.pyp&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;python&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.pyt&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;python&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.pyw&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;python&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.rpy&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;python&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.tac&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;python&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.wsgi&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;python&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.xpy&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;python&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;;; (&amp;#34;Ruby&amp;#34; . ruby)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.rb&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ruby&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.builder&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ruby&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.fcgi&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ruby&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.gemspec&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ruby&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.god&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ruby&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.irbrc&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ruby&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.jbuilder&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ruby&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.mspec&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ruby&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.pluginspec&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ruby&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.podspec&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ruby&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.rabl&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ruby&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.rake&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ruby&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.rbuild&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ruby&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.rbw&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ruby&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.rbx&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ruby&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.ru&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ruby&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.ruby&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ruby&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.thor&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ruby&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.watchr&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ruby&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;;; (&amp;#34;Sass&amp;#34; . sass)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.sass&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sass&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;;; (&amp;#34;Scala&amp;#34; . scala)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.scala&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;scala&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.sbt&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;scala&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.sc&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;scala&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;;; (&amp;#34;Scheme&amp;#34; . scheme)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.scm&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;scheme&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.sld&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;scheme&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.sls&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;scheme&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.sps&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;scheme&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.ss&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;scheme&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;;; Not in the list&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;;; (&amp;#34;Screen&amp;#34; . screen)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;;; (&amp;#34;Shell Script&amp;#34; . shell)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.sh&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;shell&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.bash&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;shell&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.bats&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;shell&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.cgi&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;shell&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.command&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;shell&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.fcgi&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;shell&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.ksh&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;shell&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.sh.in&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;shell&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.tmux&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;shell&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.tool&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;shell&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.zsh&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;shell&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;;; (&amp;#34;Sql&amp;#34; . sql)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.sql&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sql&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.cql&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sql&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.ddl&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sql&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.inc&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sql&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.prc&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sql&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.tab&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sql&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.udf&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sql&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.viw&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sql&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;;; IDK why they make the distinction&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;;; (&amp;#34;Sqlite&amp;#34; . sqlite)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;;; (&amp;#34;Stan&amp;#34; . stan)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.stan&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stan&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Should be kept up to date with &amp;#39;org-babel-load-languages, and the version
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;should also match.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;This list detects the correct language to use in a generated src block
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;based on the extension of the original file.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Transliterated from https://gist.github.com/ppisarczyk/43962d06686722d26d176fad46879d41
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  :group &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;literate-import&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  :version &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;24.1&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  :type &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(alist :key-type &lt;span style=&#34;color:#a6e22e&#34;&gt;string&lt;/span&gt; :value-type (group &lt;span style=&#34;color:#a6e22e&#34;&gt;string&lt;/span&gt;)))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;utilities&#34;&gt;Utilities&lt;/h3&gt;
&lt;p&gt;This next function reads the &lt;code&gt;:tangle&lt;/code&gt; property (the second returned from &lt;code&gt;org-babel-get-src-block-info&lt;/code&gt;) of a src block, which is a file name.
Conveniently, this also works when the &lt;code&gt;:tangle&lt;/code&gt; property is defined somewhere other than the line of the src block itself, such as a parent heading or root document property. E.g.&lt;/p&gt;
&lt;p&gt;At the heading level:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;* Some heading
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:PROPERTIES:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:header-args:emacs-lisp: :tangle ./config.el
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:END:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Below are some code blocks that will both be tangled to ./config.el, even though they do not specify it directly on the begin_src line.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#+begin_src emacs-lisp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#+end_src
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#+begin_src emacs-lisp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#+end_src
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;At the file level:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#+title: Doom Emacs Config
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#+PROPERTY: header-args:emacs-lisp :tangle ./config.el
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Every emacs-lisp source block in this whole file will be tangled to ./config.el unless otherwise specified.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#+begin_src emacs-lisp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#+end_src
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#+begin_src emacs-lisp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#+end_src
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#+begin_src emacs-lisp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#+end_src
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#+begin_src emacs-lisp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#+end_src
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(defun literate-import/src-block-tangle-target ()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#a6e22e&#34;&gt;expand-file-name&lt;/span&gt; (alist-get :tangle (&lt;span style=&#34;color:#a6e22e&#34;&gt;nth&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; (org-babel-get-src-block-info)))))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And this (clumsy) function simply collects those tangle targets for every source block in the entire org file. I say clumsy because I&amp;rsquo;m ignoring errors from &lt;code&gt;org-babel-next-src-block&lt;/code&gt; and tracking point location to determine if there are any more src blocks, and recursively collecting the results. This could all probably be nicely expressed in a loop, but I didn&amp;rsquo;t want to figure that out.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(defun literate-import/list-tangle-targets-in-current-buffer (&lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;optional&lt;/span&gt; p acc)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (let ((loc (or p (&lt;span style=&#34;color:#a6e22e&#34;&gt;point-min&lt;/span&gt;)))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        (res (or acc &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;())))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#a6e22e&#34;&gt;goto-char&lt;/span&gt; loc)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (ignore-errors (org-babel-next-src-block))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (if (&lt;span style=&#34;color:#a6e22e&#34;&gt;eq&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;point&lt;/span&gt;) loc)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        (seq-filter &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;file-exists-p&lt;/span&gt; res)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      (literate-import/list-tangle-targets-in-current-buffer (&lt;span style=&#34;color:#a6e22e&#34;&gt;point&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;cons&lt;/span&gt; (literate-import/src-block-tangle-target) res)))))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;core&#34;&gt;Core&lt;/h3&gt;
&lt;p&gt;Now the real meat of the program. The outline I initially wrote explains my thought process pretty well:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;;; OUTLINE:
;; ----------
;; let tree = empty tree
;; Get all project files
;; Get all :tangle targets
;; for each project file
;;      if file not in targets
;;              merge file hierarchy to tree
;; convert tree to org mode tree
;; print tree at end of current buffer
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The only deviation I ended up making in the actual implementation was to not collect the file hierarchy in a tree, and then convert that to an org-mode tree, but instead to simply collect the files in a list, and traverse that list, building up the org tree using the standard insertion commands e.g.&lt;/p&gt;
&lt;p&gt;Original idea:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;#39;(root (a (file1.txt) b (file2.txt) c (file3.txt)))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;somehow converts to:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;* root
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;** a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;*** file1.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;** b
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;*** file2.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;** c
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;*** file3.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Instead just start with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;#39;(root/a/file1.txt root/b/file2.txt root/c/file3.txt)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and iterate through that list and use org-mode&amp;rsquo;s navigation/insertion commands to produce the result directly in a temporary buffer.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(defun literate-import/import-project ()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (interactive)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (save-excursion
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (let ((tree &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;)                    &lt;span style=&#34;color:#75715e&#34;&gt;; let tree = empty tree&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          (proj-files (completing-read-multiple &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Select file(s) to import: &amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                           (projectile-project-files (projectile-acquire-root)))) &lt;span style=&#34;color:#75715e&#34;&gt;; Get all project files&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          (tangle-targets (delete-dups (literate-import/list-tangle-targets-in-current-buffer)))) &lt;span style=&#34;color:#75715e&#34;&gt;; Get all :tangle targets&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      (cl-loop for file in proj-files do              &lt;span style=&#34;color:#75715e&#34;&gt;; for each project file&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               (when (not (&lt;span style=&#34;color:#a6e22e&#34;&gt;memq&lt;/span&gt; file tangle-targets)) &lt;span style=&#34;color:#75715e&#34;&gt;; if file not in targets&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 (setq tree (&lt;span style=&#34;color:#a6e22e&#34;&gt;cons&lt;/span&gt; file tree)))) &lt;span style=&#34;color:#75715e&#34;&gt;; merge file hierarchy to tree&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;;; convert tree to org mode tree&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;;; print tree at end of current buffer as org mode tree&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      (&lt;span style=&#34;color:#a6e22e&#34;&gt;insert&lt;/span&gt; (literate-import/convert-to-org-tree tree)))))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;One awesome feature here comes from the use of &lt;code&gt;completing-read-multiple&lt;/code&gt;, in combination with &lt;a href=&#34;https://projectile.mx/&#34;&gt;projectile&lt;/a&gt;&amp;rsquo;s project file collecting function &lt;code&gt;projectile-project-files&lt;/code&gt;.
This lets me super easily mark the exact set of files I want to include in the import, and only generate the src blocks for those files.
Of course this also means that this project is dependent on projectile (&lt;code&gt;completing-read-multiple&lt;/code&gt; on the other hand is built-in to emacs), so won&amp;rsquo;t be as reusable for other folks, but this literate style workflow is so niche anyway that I doubt this will be very useful for anyone other than myself.&lt;/p&gt;
&lt;p&gt;The above function uses this next one to print the list of files into the org mode heading hierarchy, insert the src block and the file content between.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(defun literate-import/convert-to-org-tree (file-list)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (with-temp-buffer
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (org-mode)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (cl-loop for file in file-list do
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             (let* ((subdirs (split-string file &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    (file-name (first (last subdirs))))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               (cl-loop for dir in subdirs do
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        (when (and (not (&lt;span style=&#34;color:#a6e22e&#34;&gt;string-equal&lt;/span&gt; dir &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;)) (&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;gt;&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; dir) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                          (if-let ((starting-point (ignore-errors (org-find-exact-headline-in-buffer dir))))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                              (&lt;span style=&#34;color:#a6e22e&#34;&gt;goto-char&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;marker-position&lt;/span&gt; starting-point))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            (progn
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                              (org-insert-subheading &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                              (&lt;span style=&#34;color:#a6e22e&#34;&gt;insert&lt;/span&gt; dir)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                              (when (&lt;span style=&#34;color:#a6e22e&#34;&gt;string-equal&lt;/span&gt; dir file-name)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                (newline)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                (&lt;span style=&#34;color:#a6e22e&#34;&gt;insert&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#+begin_src &amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                (&lt;span style=&#34;color:#a6e22e&#34;&gt;insert&lt;/span&gt; (if-let ((src-lang (&lt;span style=&#34;color:#a6e22e&#34;&gt;assoc&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;concat&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt; (file-name-extension file-name)) literate-import-language-extensions)))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                            (&lt;span style=&#34;color:#a6e22e&#34;&gt;cdr&lt;/span&gt; src-lang)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TODO_REPLACE_ME&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                (&lt;span style=&#34;color:#a6e22e&#34;&gt;insert&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; :tangle &amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                (&lt;span style=&#34;color:#a6e22e&#34;&gt;insert&lt;/span&gt; file)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                (newline)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                (&lt;span style=&#34;color:#a6e22e&#34;&gt;insert&lt;/span&gt; (with-temp-buffer
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                          (&lt;span style=&#34;color:#a6e22e&#34;&gt;insert-file-contents&lt;/span&gt; file)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                          (&lt;span style=&#34;color:#a6e22e&#34;&gt;buffer-string&lt;/span&gt;)))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                (&lt;span style=&#34;color:#a6e22e&#34;&gt;insert&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#+end_src&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                (newline))))))))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#a6e22e&#34;&gt;buffer-string&lt;/span&gt;)))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;lessons-learned&#34;&gt;Lessons learned&lt;/h3&gt;
&lt;p&gt;Overall this was a fun project to work on during the weekend, and I needed it for a personal project I&amp;rsquo;m writing (in a literate style of course) which includes code generated by both &lt;a href=&#34;https://blitzjs.com/&#34;&gt;blitz.js&lt;/a&gt; and &lt;a href=&#34;https://leiningen.org/&#34;&gt;leiningen&lt;/a&gt;, so I&amp;rsquo;m glad I was able to finish it and actually make use of it to return the beautiful literate style to my project!&lt;/p&gt;
&lt;h3 id=&#34;future-work&#34;&gt;Future work&lt;/h3&gt;
&lt;p&gt;My main idea here was to generate my project structure &lt;em&gt;once&lt;/em&gt;, import it into my literate document, then rearrange the generated org mode structure and mark it up with prose.
With blitzjs though, the code generation tool is &lt;em&gt;integral&lt;/em&gt; to the day-to-day workflow, and new code is added all the time with it.
My next step will be to set up a listener in the project to automatically import missing files into the literate document once the files are generated on the command-line, potentially with a different heading structure, such that the generated queries/mutations/components/schemas are co-located under the same org heading, instead of having the headings simply mirror the file system hierarchy.&lt;/p&gt;
</description>
       </item>
       
       <item>
         <title>Curate a Personal Programming Philosophy and Focus on Role Models</title>
         <link>https://mjdiloreto.github.io/posts/personal-philosophy/</link>
         <pubDate>Fri, 17 Jun 2022 00:00:00 -0500</pubDate>
         
         <guid>https://mjdiloreto.github.io/posts/personal-philosophy/</guid>
         <description>&lt;h2 id=&#34;your-philosophy&#34;&gt;Your Philosophy&lt;/h2&gt;
&lt;p&gt;It&amp;rsquo;s imperative to live by a set of philosophies. It doesn&amp;rsquo;t much matter which set, as long as it is not the &lt;em&gt;empty set&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This applies to all aspects of life, and software development is no exception.
Most people live by intrinsic philosophies, sometimes inconsistent, but you will be better served by your philosophies if you codify them.
Spell them out deliberately and evolve them according to your experience and others&#39;.&lt;/p&gt;
&lt;p&gt;It might seem like a useless exercise to literally write down the philosophies you live by, especially if you aren&amp;rsquo;t a person who writes frequently.
That is, until you encounter someone else who perfectly communicates your philosophies, and even expounds on them, through their own writing, or oration, or music, etc.&lt;/p&gt;
&lt;p&gt;Have you ever read a book which perfectly encapsulates your intuitions, or fragmented thoughts on a subject, and paints them clearly and plainly?
If not, it is a fantastically validating, and &lt;em&gt;humbling&lt;/em&gt; experience.
Here I was, proudly clinging to my disjointed, unorganized, chaotic nuggets of insight, content to leave them in my own mind - never taking the necessary step of &lt;em&gt;consilience&lt;/em&gt; - and someone else had not only thought those thoughts earlier and better, but had solidified and shared them.
Why &lt;em&gt;shouldn&amp;rsquo;t&lt;/em&gt; you write down these precious principles which ultimately guide the course of your life?&lt;/p&gt;
&lt;h2 id=&#34;the-value-of-role-models-in-building-personal-philosophy&#34;&gt;The Value of Role Models in Building Personal Philosophy&lt;/h2&gt;
&lt;p&gt;Role models can be very helpful in developing solid philosophies. Obviously I&amp;rsquo;m not the first - even among programmers - to point out the value of role models, but I will argue that they&amp;rsquo;re underrated.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I feel that software developers in my generation put too much emphasis on &lt;em&gt;mentors&lt;/em&gt;, and not enough on &lt;em&gt;role models&lt;/em&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Mentors are those people whose one-on-one attention brings pupils knowledge and hopefully success.
This is opposed to &lt;em&gt;role models&lt;/em&gt; - individuals whom one can model themselves after (duh).&lt;/p&gt;
&lt;p&gt;Good mentors are almost always role models, but one can only have a small number of (usually 0 or 1) mentors. The brilliant thing about role models is you can - and should! - have many of them.&lt;/p&gt;
&lt;p&gt;From what I can tell, the difference between people who value mentors vs. role models is a matter of &lt;a href=&#34;https://en.wikipedia.org/wiki/Locus_of_control&#34;&gt;locus of control&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Mentors appeal to the external locus of control.
We look for an external force to mold us into something better than ourselves.
Someone else has to spend the energy.
In turn, one&amp;rsquo;s personal philosophies are actively shaped by the mentor; the mentee is the object in this situation.&lt;/p&gt;
&lt;p&gt;Role models, on the other hand, appeal to the internal locus of control. We have within us potential energy, which simply requires &lt;em&gt;something to aim at&lt;/em&gt; and, when unleashed, drives itself toward that end.
One acquiesces the philosophies presented by the role model into their own.
In this setup, the role model is the object - the thing being aimed at - and the role-modelee(?) is the subject - the one doing the aiming and spending the energy.&lt;/p&gt;
&lt;p&gt;Embracing role models is role-reversal. Put yourself in the driver&amp;rsquo;s seat.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m not even convinced the value of a mentor/mentee relationship for the mentee outweighs that of a role model situation either (in fact, I believe it probably has much more value for the &lt;em&gt;mentor&lt;/em&gt;), because of the pareto principle.&lt;/p&gt;
&lt;h2 id=&#34;role-models-and-the-pareto-principle&#34;&gt;Role Models and The Pareto Principle&lt;/h2&gt;
&lt;p&gt;The value of role models is &lt;strong&gt;increasing&lt;/strong&gt;, and that of mentors is decreasing by comparison.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://en.wikipedia.org/wiki/Pareto_principle&#34;&gt;pareto principle&lt;/a&gt; dominates many systems: wealth distribution, music popularity, dating, etc.
The effect in some of these systems is exacerbated by the internet.
When this fact is pointed out it is usually for negative reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&amp;ldquo;Dating apps have created a default dating landscape where a few super-attractive guys effectively have harems of hundreds of women on-demand, while the vast majority of men on those apps get absolutely no attention from women, with no good alternative. No wonder there&amp;rsquo;s so many incels!&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;ldquo;Kids these days see Tik-Tok superstars making tons of money, and a huge number of those kids aspire to social media fame, but only a tiny number of TikTokers make enough to do it full-time, and all those kids are deluded.&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;ldquo;A few super-billionaires control the majority of the world&amp;rsquo;s wealth, while the vast majority of regular folks control less and less because of the decades-long march of globalization!&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As systems become more interconnected, the pareto distribution becomes more skewed without deliberate protections.&lt;/p&gt;
&lt;p&gt;This is usually the way the pareto principle is presented, but there&amp;rsquo;s also a bright side.&lt;/p&gt;
&lt;p&gt;The interconnectedness of the world&amp;rsquo;s information means that there are more and more high-quality role models available!
This is especially true for engineers, where many fantastic programmers gain fame and the platforms to present their eccentric philosophies.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the list of people I consider to be my role models in tech:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.infoq.com/search.action?queryString=rich+hickey&amp;amp;page=1&amp;amp;searchOrder=&#34;&gt;Rich Hickey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://worrydream.com/#!/InventingOnPrinciple&#34;&gt;Bret Victor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=oKg1hTOQXoY&#34;&gt;Alan Kay&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/sponsors/daviwil&#34;&gt;David Wilson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://paulgraham.com/articles.html&#34;&gt;Paul Graham&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks to the internet, I can actually expose myself to significant portions of those folks&amp;rsquo; philosophies, presented rhetorically through conference talks, at length in blog posts, or intimately through hours-long livestreams.
I would consider these people to be top-percentile in many important aspects of &amp;ldquo;success&amp;rdquo; in this industry, and so, as a heuristic, their philosophies are likely to be valuable in achieving those same aspects of success.
This is the obvious intrinsic value of having role models in the first place.&lt;/p&gt;
&lt;p&gt;On the other hand, the number of high-quality mentors one has access to is the same as it was in the days of medieval apprenticeships.
This is a simple consequence of the 1-on-1 nature of the relationship.
Additionally, the lessons a mentor can teach are most likely limited to the specifics of a particular job, and they are unlikely to have profound personal philosophies, at least compared to the top-quality role models which are available.&lt;/p&gt;
&lt;p&gt;My advice to engineers my own age - especially those that search for mentorships:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you can&amp;rsquo;t create a list of your role models then start focusing on curating one, because you&amp;rsquo;ve been undervaluing them!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Don&amp;rsquo;t worry so much about finding mentors.
Use these role models to codify your personal philosophies, you&amp;rsquo;ll find that path is empowering and fruitful.&lt;/p&gt;
</description>
       </item>
       
       <item>
         <title>E.O. Wilson&#39;s Consilience; Religion in Society</title>
         <link>https://mjdiloreto.github.io/posts/consilience-religion/</link>
         <pubDate>Sun, 15 May 2022 13:16:00 -0500</pubDate>
         
         <guid>https://mjdiloreto.github.io/posts/consilience-religion/</guid>
         <description>&lt;blockquote&gt;
&lt;p&gt;The fatal flaw in deism is thus not rational at all, but emotional.
Pure reason is unappealing because it is bloodless. Ceremonies stripped of sacred mystery lose their emotional force, because celebrants need to defer to a higher power in order to consummate their instinct for tribal loyalty.
In times of danger and tragedy especially, unreasoning ceremony is everything. There is no substitute for surrender to an infallible and benevolent being, the commitment called salvation.
And no substitute for formal recognition of an immortal life force, the leap of faith called transcendence.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Wilson is an interesting scientist to me because he considers the meaning of the &lt;em&gt;limits&lt;/em&gt; of science. Most other hard-scientists seem not to care (he critiques his colleagues for this later on in the book).&lt;/p&gt;
&lt;p&gt;I was always enraptured by science as a child, like many are, and the more I learned about our knowledge of microscopic and galactic forces, the more I believed innately that there was no observable thing which science could not answer.&lt;/p&gt;
&lt;p&gt;I was attracted to the mindset of Richard Dawkins, and became a devout acolyte of atheism. It seemed so obvious to me that the realm of the natural was set to overtake all the realms of the supranatural and metaphysical - that humanity was on an inexorable march to perfect enlightenment in all domains, and that science was the torch to light all crevices of the unknown.&lt;/p&gt;
&lt;p&gt;These &lt;code&gt;new atheists&lt;/code&gt;, the term I now know them by, point to the corruption of religious institutions as a great source of harm for society (which, of course, in some ways they are), and the role of these same institutions in creating and maintaining power structures - the image-makers standing in front of the fire in Plato&amp;rsquo;s cave.
They taught me to recognize and despise irrationality wherever it may creep up, and to be skeptical always.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m grateful I learned these things.&lt;/p&gt;
&lt;p&gt;But I&amp;rsquo;ve become increasingly convinced that the &lt;code&gt;new atheists&lt;/code&gt; miss the mark.
A secular populace of enlightened rational beings would not be human.
People don&amp;rsquo;t just cling to irrationality as a prehistoric crutch to explain away the complexities of a rational world, they maintain non-rational thinking as an inseparable part of their being.
In the absence of a traditional irrational religious framework, people will cling to or invent other, more unscrupulous ones.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The thrust of the Enlightenment, like the Greek humanism that prefigured it, was Promethean: The knowledge it generated was to liberate mankind by lifting it above the savage world. But the opposite might occur. If scientific inquiry diminished the conception of divinity while prescribing immutable natural laws, then humanity can lose what freedom it already possesses. Perhaps there is only one &amp;ldquo;perfect&amp;rdquo; social order, and scientists will find it &amp;ndash; or worse, falsely claim to have found it. Religious authority, the Hadrian&amp;rsquo;s Wall of civilization, will be breached and the barbarians of totalitarian ideology will pour in. Such is the dark side of Enlightenment secular thought, unveiled in the French Revolution and expressed more recently by theories of &amp;ldquo;scientific&amp;rdquo; socialism and racialist fascism.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This isn&amp;rsquo;t to say that current mainstream religious institutions are redeemed, and western society ought to re-embrace them, but rather that &lt;em&gt;something good must fill that niche&lt;/em&gt;.
At least ancient wisdom traditions have the advantage of generations of development, curated and pruned over centuries - &lt;em&gt;evolving&lt;/em&gt;, at least ostensibly, toward maximizing their goal functions: power structures and hierarchies, yes, but also genuine wisdom, community, and unity.
It seems to me that neo-religious movements are effectively generation 0 on the evolutionary landscape, and though practitioners will point to pieces of science (or worse, &lt;em&gt;social science&lt;/em&gt;) as their basis, they remain untested in the Darwinian gauntlet, &amp;ldquo;science&amp;rdquo; be damned.&lt;/p&gt;
</description>
       </item>
       
       <item>
         <title>Bees and Spiders; Software Developer Archetypes</title>
         <link>https://mjdiloreto.github.io/posts/bees-and-spiders/</link>
         <pubDate>Thu, 12 May 2022 08:25:00 -0500</pubDate>
         
         <guid>https://mjdiloreto.github.io/posts/bees-and-spiders/</guid>
         <description>&lt;figure&gt;&lt;img src=&#34;https://mjdiloreto.github.io/ox-hugo/spider_fighting_a_bee_on_a_green_leaf.png&#34;
    alt=&#34;spider fighting a bee on a green leaf&#34;&gt;&lt;figcaption&gt;
      &lt;h4&gt;The spiders and bees going about their individual tasks, putting the world in order as best they can&lt;/h4&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;bees&#34;&gt;Bees&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Automatons&lt;/li&gt;
&lt;li&gt;Pluggable&lt;/li&gt;
&lt;li&gt;Super-organism more capable than the parts&lt;/li&gt;
&lt;li&gt;Cannot survive on their own&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I could have chosen ants for this group, but I feel they have a slightly worse cultural bias (no one likes ants in their house for example), whereas bees have earned more respect, from honey-production to essential pollination.&lt;/p&gt;
&lt;p&gt;As far as superorganisms go bees are certainly cooler than ants.&lt;/p&gt;
&lt;p&gt;And that&amp;rsquo;s the point I want to get across. Unlike the patronizing &lt;em&gt;&lt;a href=&#34;http://www.paulgraham.com/avg.html&#34;&gt;blub-programmer&lt;/a&gt;&lt;/em&gt; term (though the circumstances of almost all bees requires them to use &lt;em&gt;blub&lt;/em&gt; exclusively), &lt;em&gt;bee&lt;/em&gt; is not a term of derision. On the contrary, to be a bee is to be essential, to contribute to the most complex systems created by humanity. Contributing to projects beyond the prowess of any single spider. Crafting at the same time a community and social order protecting and guiding other bees inexorably toward their shared goal.&lt;/p&gt;
&lt;p&gt;Bee-like behavior is responsible for most of humanity&amp;rsquo;s great accomplishments:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the pyramids were built from stones chiseled, hauled, and assembled one by one over generations&lt;/li&gt;
&lt;li&gt;the human genome was (at least at first) mapped one base-pair at a time over decades&lt;/li&gt;
&lt;li&gt;Empires were created, wars fought and won, cities built to extraordinary size and complexity - none of these things attributable to a single individual&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is a humble honor in being a bee, in doing the right things daily for the good of the hive.&lt;/p&gt;
&lt;p&gt;Spiders don&amp;rsquo;t get it. They seem self aggrandizing and elitist to bees. They make comments like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&amp;ldquo;[Twitter|Instagram|&amp;hellip;|Any beeish enterprise] is so simple! I could make a clone in a weekend&amp;hellip;&amp;rdquo;&lt;/p&gt;
&lt;p&gt;The bees know better. They know the bulk of the effort lies in extra-technical work, in &lt;em&gt;the healthy running of the superorganisms itself&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;ldquo;Ew, &lt;em&gt;Blub&lt;/em&gt;?! Why are you using &lt;em&gt;Blub&lt;/em&gt;? Can&amp;rsquo;t you see the power of &lt;em&gt;[Lisp|Haskell|Prolog|Assembly|Any spiderish language]&lt;/em&gt;?!&amp;rdquo;&lt;/p&gt;
&lt;p&gt;The bees know better than to chase power. Individuals get drunk on power, corrupting the joint effort. Allow too much spiderishness and the tower of Babel will fall, scattering the bees among the world (or Silicon Valley).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;spiders&#34;&gt;Spiders&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Individual/self-reliant&lt;/li&gt;
&lt;li&gt;Masters&lt;/li&gt;
&lt;li&gt;Construct wonders alone&lt;/li&gt;
&lt;li&gt;Individually more capable than bee, but in aggregate less so&lt;/li&gt;
&lt;li&gt;Cannot work effectively in a large community&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As an individual, a spider is extraordinary, accomplishing by herself feats beyond the wildest dreams of a single bee.&lt;/p&gt;
&lt;p&gt;She toils alone, weaving her web in the location &lt;em&gt;she desires&lt;/em&gt;, with the intricate patterns &lt;em&gt;only she can conjure&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;She catches bees and eats them for breakfast.
In this way she resents them as inferior:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;there&amp;rsquo;s nothing any bee can do which I cannot do &lt;em&gt;better&lt;/em&gt;&amp;rdquo; - and she&amp;rsquo;s right&lt;/li&gt;
&lt;li&gt;&amp;ldquo;They don&amp;rsquo;t even &lt;em&gt;understand&lt;/em&gt; the technology they&amp;rsquo;re using! Not like I do.&amp;rdquo; - and she&amp;rsquo;s right&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Many spiders put on the bee suit and work for their rich enterprises, despising it.&lt;/p&gt;
&lt;p&gt;It seems that motivated bees can become &lt;em&gt;spiderish&lt;/em&gt;, but spiders resent becoming &lt;em&gt;beeish&lt;/em&gt;. Given that programmer contribution in large organizations follows a pareto distribution, it might even be appropriate to consider these most high-performing &amp;ldquo;bees&amp;rdquo; &lt;em&gt;hostage spiders&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;From my experience though, bees largely do not want to become spiders. They don&amp;rsquo;t get it. It seems many are born without innate Frisian spirit: for freedom, individuality, and self-determination in work.&lt;/p&gt;
&lt;p&gt;Domains which favor spiders:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open-source&lt;/li&gt;
&lt;li&gt;Research&lt;/li&gt;
&lt;li&gt;Indie game dev&lt;/li&gt;
&lt;li&gt;Small-business entrepreneurship (The solo-founder). This might technically subsume Indie game dev&lt;/li&gt;
&lt;/ul&gt;
</description>
       </item>
       
       <item>
         <title>What Am Working On?</title>
         <link>https://mjdiloreto.github.io/what_am_i_working_on/</link>
         <pubDate>Fri, 15 Apr 2022 00:00:00 -0500</pubDate>
         
         <guid>https://mjdiloreto.github.io/what_am_i_working_on/</guid>
         <description>&lt;h2 id=&#34;what-am-i-working-on&#34;&gt;What am I working on?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Learning Elixir through examples and a pet project&lt;/li&gt;
&lt;li&gt;Improving my writing skills&lt;/li&gt;
&lt;/ul&gt;
</description>
       </item>
       
       <item>
         <title>My Reading</title>
         <link>https://mjdiloreto.github.io/books_i_like/</link>
         <pubDate>Thu, 14 Apr 2022 00:00:00 -0500</pubDate>
         
         <guid>https://mjdiloreto.github.io/books_i_like/</guid>
         <description>&lt;style type=&#34;text/css&#34;&gt;
:root {
    --argyle: repeating-linear-gradient(
      120deg,
      rgba(255, 255, 255, 0.1),
      rgba(255, 255, 255, 0.1) 1px,
      transparent 1px,
      transparent 60px
    ),
              repeating-linear-gradient(
                60deg,
                rgba(255, 255, 255, 0.1),
                rgba(255, 255, 255, 0.1) 1px,
                transparent 1px,
                transparent 60px
              ),
              linear-gradient(
                60deg,
                rgba(0, 0, 0, 0.1) 25%,
                transparent 25%,
                transparent 75%,
                rgba(0, 0, 0, 0.1) 75%,
                rgba(0, 0, 0, 0.1)
              ),
              linear-gradient(
                120deg,
                rgba(0, 0, 0, 0.1) 25%,
                transparent 25%,
                transparent 75%,
                rgba(0, 0, 0, 0.1) 75%,
                rgba(0, 0, 0, 0.1)
              );
    background-size: 70px 120px;
    --tartan: repeating-linear-gradient(
      transparent,
      transparent 50 53px,
      transparent 63px,
      rgba(0, 0, 0, 0.4) 63px,
      rgba(0, 0, 0, 0.4) 66px,
      transparent 66px,
      transparent 116px,
      rgba(0, 0, 0, 0.5) 116px,
      rgba(0, 0, 0, 0.5) 166px,
      rgba(255, 255, 255, 0.2) 166px,
      rgba(255, 255, 255, 0.2) 169px,
      rgba(0, 0, 0, 0.5) 169px,
      rgba(0, 0, 0, 0.5) 179px,
      rgba(255, 255, 255, 0.2) 179px,
      rgba(255, 255, 255, 0.2) 182px,
      rgba(0, 0, 0, 0.5) 182px,
      rgba(0, 0, 0, 0.5) 232px,
      transparent 232px
    ),
              repeating-linear-gradient(
                270deg,
                transparent,
                transparent 50px,
                rgba(0, 0, 0, 0.4) 50px,
                rgba(0, 0, 0, 0.4) 53px,
                transparent 53px,
                transparent 63px,
                rgba(0, 0, 0, 0.4) 63px,
                rgba(0, 0, 0, 0.4) 66px,
                transparent 66px,
                transparent 116px,
                rgba(0, 0, 0, 0.5) 116px,
                rgba(0, 0, 0, 0.5) 166px,
                rgba(255, 255, 255, 0.2) 166px,
                rgba(255, 255, 255, 0.2) 169px,
                rgba(0, 0, 0, 0.5) 169px,
                rgba(0, 0, 0, 0.5) 179px,
                rgba(255, 255, 255, 0.2) 179px,
                rgba(255, 255, 255, 0.2) 182px,
                rgba(0, 0, 0, 0.5) 182px,
                rgba(0, 0, 0, 0.5) 232px,
                transparent 232px
              ),
              repeating-linear-gradient(
                125deg,
                transparent,
                transparent 2px,
                rgba(0, 0, 0, 0.2) 2px,
                rgba(0, 0, 0, 0.2) 3px,
                transparent 3px,
                transparent 5px,
                rgba(0, 0, 0, 0.2) 5px
              );
  }

.bookshelf {
    width: 100%;
    margin-top: 32px;
    display: flex;
    flex-wrap: wrap;
  }

.book {
    cursor: pointer;
    width: 50px;
    height: 280px;
    position: relative;
    margin-left: 1px;
    transform-style: preserve-3d;
    transform: translateZ(0) rotateY(0);
    transition: transform 1s, z-index 1s;
    z-index: 0;
  }

.peek {
    z-index: 1;
    /* transform: rotateX(-25deg) rotateY(-40deg) rotateZ(-15deg) translateY(50px) */
    transform: rotateX(-25deg) rotateY(-40deg) rotateZ(-15deg) translateY(50px)
               translateX(-30px);
  }

.side {
    position: absolute;
    border: 2px solid black;
    border-radius: 3px;
    font-weight: bold;
    color: black;
    text-align: center;
    transform-origin: center left;
  }

.spine {
    position: relative;
    width: 50px;
    height: 280px;
    /* Patterns from: https://projects.verou.me/css3patterns/ */
    background-image: var(--tartan);
    transform: rotateY(0deg) translateZ(0px);
    transition: height 1s, width 1s, transform 1s;
  }

.spine-title {
    margin: 2px;
    position: absolute;
    top: 0px;
    left: 0px;
    font-size: 12px;
    color: gold;
    writing-mode: vertical-rl;
    text-orientation: mixed;
    padding-bottom: 2em;
    padding-top: 1em;
    padding-left: 0.5em;
  }

.spine-author {
    position: absolute;
    color: goldenrod;
    bottom: 0px;
    left: 20%; /* no idea why 20% centers it */
  }

.top {
    width: 50px;
    height: 190px;
    top: -2px;  /* hmm, why -2 and not 0? */
    background-image: linear-gradient(90deg, white 90%, gray 10%);
    background-size: 5px 5px;
    transform: rotateX(90deg) translateZ(95px) translateY(-95px);
    transition: height 1s, width 1s, transform 1s;
  }

.cover {
    z-index: 1;
    width: 190px;
    height: 280px;
    top: 0px;
    background-size: cover;
    background-repeat: round;
    left: 50px;
    transform: rotateY(90deg) translateZ(0);
    transition: height 1s, width 1s, transform 1s;
  }

.summary {
    display: none;
    opacity: 0;
    animation: fadeIn ease 1s forwards;
    animation-delay: 1s;
    background-color: white;
    padding: 1em;
  }


@keyframes fadeIn {
    0% {
      opacity: 0;
    }
    10% {
      opacity: 0.1;
    }
    90% {
      opacity: 0.9;
    }
    100% {
      opacity: 1;
    }
  }


.open {
    z-index: 2;
    transform: rotateX(-15deg) rotateY(-90deg) rotateZ(-15deg) translateY(50px)
               translateX(-30px);
  }

.open .spine {
    height: calc(50vh + var(--height)) !important;
  }
.open .top {
    z-index: -1;
    height: min(60vw, calc(50vh + var(--top))) !important;
    transform: rotateX(90deg) translateZ(calc(min(60vw, 50vh + var(--top)) / 2)) translateY(calc(-1 * min(60vw, 50vh + var(--top)) / 2)) !important;
  }

.open .cover {
    z-index: 2;
    width:  min(60vw, min(60vw, calc(50vh + var(--top)))) !important;
    height: calc(50vh + var(--height)) !important;
    background-color: white;
    background-image: none !important;
    overflow-y: scroll;
  }

.open .summary {
    display: block;
  }
&lt;/style&gt;
&lt;h2 id=&#34;what-am-i-reading-now&#34;&gt;What am I Reading now?&lt;/h2&gt;
&lt;div class=&#34;bookshelf&#34;&gt;
&lt;div class=&#34;book&#34;&gt; &lt;div class=&#34;side spine&#34;&gt; &lt;span class=&#34;spine-title&#34;&gt;Thus Spoke Zarathustra&lt;/span&gt; &lt;span class=&#34;spine-author&#34;&gt;FN&lt;/span&gt; &lt;/div&gt; &lt;div class=&#34;side top&#34;&gt;&lt;/div&gt; &lt;div class=&#34;side cover&#34; style=&#34;background-image: url(&#39;https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Ftse3.mm.bing.net%2Fth%3Fid%3DOIP.S333SerZz6MGB5PaHAsTqgAAAA%26pid%3DApi&amp;f=1&amp;ipt=d4841953cee60924d4ee54107d79c1f5f2d279899aaefa58e8d835485ab21a66&amp;ipo=images&#39;)&#34;&gt; &lt;div class=&#34;summary&#34;&gt;&lt;div id=&#34;outline-container-org0a01571&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;org0a01571&#34;&gt;Thus Spoke Zarathustra&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-org0a01571&#34;&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-org2170c12&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;org2170c12&#34;&gt;Friedrich Nietzsche. 1885&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-org2170c12&#34;&gt;
&lt;p&gt;
A friend of mine recommended Nietzsche, and I had heard of this book before, so decided to start with it.
Since then I&amp;rsquo;ve read a few &amp;ldquo;How to Read Nietzsche&amp;rdquo; articles, and none of them suggest starting with Zarathustra. In fact, some don&amp;rsquo;t recommend it at all.
Despite that I&amp;rsquo;m finding it to be an incredibly exciting read.
Maybe those articles assume I&amp;rsquo;m some sort of Philosophy student, but I don&amp;rsquo;t really care about whether this is his best or most influential work of philosophy, I&amp;rsquo;m just interested in reading a good book.
&lt;/p&gt;
&lt;p&gt;
I see why some folks take issue with Nietzsche, calling him misogynistic / inspiring Nazi idealogy, but as long as you know those things going into the book it&amp;rsquo;s fairly easy to navigate, and the work itself is so much more than those things.
&lt;/p&gt;
&lt;p&gt;
If he had written earlier I&amp;rsquo;m convinced he would have been called &amp;ldquo;prophet&amp;rdquo; instead of &amp;ldquo;philosopher&amp;rdquo;.
He seems so far ahead of his own time, and perhaps even ahead of ours.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;what-have-i-finished-recently&#34;&gt;What Have I Finished Recently?&lt;/h2&gt;
&lt;div class=&#34;bookshelf&#34;&gt;
&lt;div class=&#34;book&#34;&gt; &lt;div class=&#34;side spine&#34;&gt; &lt;span class=&#34;spine-title&#34;&gt;The Sound and the Fury&lt;/span&gt; &lt;span class=&#34;spine-author&#34;&gt;WF&lt;/span&gt; &lt;/div&gt; &lt;div class=&#34;side top&#34;&gt;&lt;/div&gt; &lt;div class=&#34;side cover&#34; style=&#34;background-image: url(&#39;https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRi8opeeTA5F1KaKPTqoWWPqYI3bUUpXwcdkg&amp;usqp=CAU&#39;)&#34;&gt; &lt;div class=&#34;summary&#34;&gt;&lt;div id=&#34;outline-container-orge4a70de&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;orge4a70de&#34;&gt;The Sound and the Fury&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-orge4a70de&#34;&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-orgedeb59b&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;orgedeb59b&#34;&gt;William Faulkner. 1929&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-orgedeb59b&#34;&gt;
&lt;p&gt;
I picked this up at an estate sale along with four other old-looking hardcovers for $15:
&lt;/p&gt;
&lt;ul class=&#34;org-ul&#34;&gt;
&lt;li&gt;&lt;i&gt;The Apocrypha&lt;/i&gt; (King James Version). 1611&lt;/li&gt;
&lt;li&gt;&lt;i&gt;The Life of Greece&lt;/i&gt; - Will Durant. 1939&lt;/li&gt;
&lt;li&gt;&lt;i&gt;The World&amp;rsquo;s Great Thinkers; Man and Spirit - The Speculative Philosophers&lt;/i&gt;. 1947&lt;/li&gt;
&lt;li&gt;&lt;i&gt;The World&amp;rsquo;s Great Thinkers; Man and State - The Political Philosophers&lt;/i&gt;. 1947&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Whosever estate I had picked was obviously very well-read and a lover of history.
&lt;/p&gt;
&lt;p&gt;
The book itself was challenging, especially during the first half, which was mostly stream-of-consciousness from the perspective of a severely mentally handicapped person. I see why English teachers would like to assign this book (I&amp;rsquo;m convinced they all have a sadistic streak in them), but I don&amp;rsquo;t feel particularly enlightened after reading it. I now understand why it&amp;rsquo;s considered a great work of literature, but to me it isn&amp;rsquo;t a &lt;i&gt;good&lt;/i&gt; work of literature.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;
&lt;div class=&#34;book&#34;&gt; &lt;div class=&#34;side spine&#34;&gt; &lt;span class=&#34;spine-title&#34;&gt;Consilience; The Unity of Knowledge&lt;/span&gt; &lt;span class=&#34;spine-author&#34;&gt;EW&lt;/span&gt; &lt;/div&gt; &lt;div class=&#34;side top&#34;&gt;&lt;/div&gt; &lt;div class=&#34;side cover&#34; style=&#34;background-image: url(&#39;https://duckduckgo.com/i/0facea0b.jpg&#39;)&#34;&gt; &lt;div class=&#34;summary&#34;&gt;&lt;div id=&#34;outline-container-org172acd5&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;org172acd5&#34;&gt;Consilience; The Unity of Knowledge&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-org172acd5&#34;&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-org8a185fd&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;org8a185fd&#34;&gt;Edward O. Wilson. 1998&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-org8a185fd&#34;&gt;
&lt;p&gt;
I read excerpts from &lt;i&gt;The Ants&lt;/i&gt; by E. O. Wilson in high school during a science project, which involved working with ants. The more I researched, the more I kept seeing this name pop up over and over. It was clear to me from that point that Wilson was a prolific and impactful biologist, so when I saw his name pop up on HackerNews I was intrigued.
&lt;/p&gt;
&lt;p&gt;
Unfortunately the post was about his recent death, and some of the commenters touched on his &amp;ldquo;controversial&amp;rdquo; opinions. None really dug into anything concrete about his beliefs, but many others pointed out that &lt;i&gt;Consilience&lt;/i&gt; was a brilliant masterpiece.
&lt;/p&gt;
&lt;p&gt;
After having read it, I&amp;rsquo;m inclined to agree with the readers who found the work brilliant. I understand exactly why many also find some of the opinions controversial, but to me the whole book was so carefully and accurately worded, and everywhere reflected the fields where scientific consensus exists, and where opinions and politics dominate, that I find opponents of the book/its author either ignorant of the actual contents of the book, or simply bitter partisans.
&lt;/p&gt;
&lt;p&gt;
The book is a pithy guided tour of all the intellectual accomplishments since the enlightenment, and &lt;i&gt;also&lt;/i&gt; a cogent argument for a unified perspective of science. I wish I had read this book in Sophomore or Junior year of high school, because it would have saved me a lot of introductory research into many different fields. The way I learned about pretty much everything since high school consisted of randomly encountering a concept, name, philosophical movement, historical event, etc., and, if I was feeling curious, a deep-dive on the internet to learn the very basics and historical context. This book accomplishes the same introduction to hundreds of different concepts in a way that&amp;rsquo;s beautifully written and perfectly understandable, even to a high-schooler.
&lt;/p&gt;
&lt;p&gt;
I&amp;rsquo;m not sure if consilience of Science and The Arts is really possible, or more importantly, within the capacity of mankind. I have to admit I&amp;rsquo;m skeptical, but I really loved this book, and would consider it one of the greatest I&amp;rsquo;ve ever read.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;
&lt;div class=&#34;book&#34;&gt; &lt;div class=&#34;side spine&#34;&gt; &lt;span class=&#34;spine-title&#34;&gt;The Passionate Programmer&lt;/span&gt; &lt;span class=&#34;spine-author&#34;&gt;CF&lt;/span&gt; &lt;/div&gt; &lt;div class=&#34;side top&#34;&gt;&lt;/div&gt; &lt;div class=&#34;side cover&#34; style=&#34;background-image: url(&#39;https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Ftse1.mm.bing.net%2Fth%3Fid%3DOIP.ekaexdGKqg8YLZXoEzTxdQAAAA%26pid%3DApi&amp;f=1&#39;)&#34;&gt; &lt;div class=&#34;summary&#34;&gt;&lt;div id=&#34;outline-container-orga26ebe3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;orga26ebe3&#34;&gt;The Passionate Programmer&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-orga26ebe3&#34;&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-org70e91ae&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;org70e91ae&#34;&gt;Chad Fowler. 2009&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-org70e91ae&#34;&gt;
&lt;p&gt;
This was recommended online as a spiritual successor to &lt;i&gt;The Pragmatic Programmer&lt;/i&gt;, so I figured it was worth a read. Honestly, I wasn&amp;rsquo;t a fan. It reiterated a lot of the common sense from &lt;i&gt;The Pragmatic Programmer&lt;/i&gt;, but where it diverged was mainly a lot of corporate boot-licking and self-congratulation on the author&amp;rsquo;s part.
&lt;/p&gt;
&lt;p&gt;
I did enjoy the dozen or so short essays from other authors that were sprinkled between the chapters.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;
&lt;div class=&#34;book&#34;&gt; &lt;div class=&#34;side spine&#34;&gt; &lt;span class=&#34;spine-title&#34;&gt;The Pragmatic Programmer, 20th Anniversary Edition&lt;/span&gt; &lt;span class=&#34;spine-author&#34;&gt;DT&lt;/span&gt; &lt;/div&gt; &lt;div class=&#34;side top&#34;&gt;&lt;/div&gt; &lt;div class=&#34;side cover&#34; style=&#34;background-image: url(&#39;https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Ftse4.mm.bing.net%2Fth%3Fid%3DOIP.L41hKmR2w411Z5qSn-vEeQAAAA%26pid%3DApi&amp;f=1&#39;)&#34;&gt; &lt;div class=&#34;summary&#34;&gt;&lt;div id=&#34;outline-container-orgc566f09&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;orgc566f09&#34;&gt;The Pragmatic Programmer, 20th Anniversary Edition&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-orgc566f09&#34;&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-org746f77a&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;org746f77a&#34;&gt;David Thomas &amp;amp; Andrew Hunt. 2019&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-org746f77a&#34;&gt;
&lt;p&gt;
I just recently finished this book. It has a lot of good advice - mostly what I would call &amp;ldquo;common sense&amp;rdquo; - but maybe I only find it common because I had good professors and mentors who taught me all those lessons early in my career.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;
&lt;div class=&#34;book&#34;&gt; &lt;div class=&#34;side spine&#34;&gt; &lt;span class=&#34;spine-title&#34;&gt;Deep Work&lt;/span&gt; &lt;span class=&#34;spine-author&#34;&gt;CN&lt;/span&gt; &lt;/div&gt; &lt;div class=&#34;side top&#34;&gt;&lt;/div&gt; &lt;div class=&#34;side cover&#34; style=&#34;background-image: url(&#39;https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Ftse2.mm.bing.net%2Fth%3Fid%3DOIP.bL35AgQpYxEr9m8mQ88mzwAAAA%26pid%3DApi&amp;f=1&#39;)&#34;&gt; &lt;div class=&#34;summary&#34;&gt;&lt;div id=&#34;outline-container-org3092aac&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;org3092aac&#34;&gt;Deep Work&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-org3092aac&#34;&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-org1520957&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;org1520957&#34;&gt;Cal Newport. 2016&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-org1520957&#34;&gt;
&lt;p&gt;
This was a fantastic read. I often struggled (especially during the initial work-from-home phase of the pandemic), to get into the &lt;i&gt;flow&lt;/i&gt; of work everyday. This book revealed what I already knew, but didn&amp;rsquo;t put into such plain terms. My problem was &lt;i&gt;distraction&lt;/i&gt;.
&lt;/p&gt;
&lt;p&gt;
This book resonated with me to such an extent that I implemented the scheduling practice Newport proposes as &lt;a href=&#34;https://github.com/mjdiloreto/simsched&#34;&gt;an emacs lisp package&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;what-have-i-stopped-reading-before-the-end&#34;&gt;What Have I Stopped Reading Before the End?&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;m not a believer in the idea that every book has to be read cover-to-cover, and I certainly don&amp;rsquo;t consider it a &amp;ldquo;failure&amp;rdquo; in any way to put down a book partway-through.
In that way it&amp;rsquo;s different from other pursuits in life:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;coding projects&lt;/li&gt;
&lt;li&gt;work tasks&lt;/li&gt;
&lt;li&gt;exercise, diet routines&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All these things are &lt;em&gt;bad&lt;/em&gt; not to finish.
But books are different.&lt;/p&gt;
&lt;p&gt;For me, books are about extracting value: changing perspectives, learning interesting (and sometimes useful) things, broadening or deepening ones understanding of some of the greatest minds of &lt;em&gt;any&lt;/em&gt; generation.
When a book stops providing that value, there&amp;rsquo;s no shame in putting it down, so that&amp;rsquo;s what I often do.&lt;/p&gt;
&lt;div class=&#34;bookshelf&#34;&gt;
&lt;div class=&#34;book&#34;&gt; &lt;div class=&#34;side spine&#34;&gt; &lt;span class=&#34;spine-title&#34;&gt;The Machinery of Life&lt;/span&gt; &lt;span class=&#34;spine-author&#34;&gt;DG&lt;/span&gt; &lt;/div&gt; &lt;div class=&#34;side top&#34;&gt;&lt;/div&gt; &lt;div class=&#34;side cover&#34; style=&#34;background-image: url(&#39;https://media.springernature.com/w184/springer-static/cover/book/978-0-387-84925-6.jpg?as=webp&#39;)&#34;&gt; &lt;div class=&#34;summary&#34;&gt;&lt;div id=&#34;outline-container-org51c4251&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;org51c4251&#34;&gt;The Machinery of Life&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-org51c4251&#34;&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-org06a5e25&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;org06a5e25&#34;&gt;David S. Goodsell. 2009&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-org06a5e25&#34;&gt;
&lt;p&gt;
This book was recommended as part of James Somers&amp;rsquo;s excellent blog post &lt;a href=&#34;https://jsomers.net/i-should-have-loved-biology/&#34;&gt;I should have loved biology&lt;/a&gt;. As someone who always has loved biology and worked as an intern in a biology lab, I also struggled initially - as Somers did - to imagine precisely the scale, speed, and density of biological processes in the cell.
&lt;/p&gt;
&lt;p&gt;
This book is filled with gorgeous illustrations and relatively simple explanations of the structure and interactions inside living cells.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-org0abe2b3&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;org0abe2b3&#34;&gt;Why did I Stop Reading?&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-org0abe2b3&#34;&gt;
&lt;p&gt;
As I&amp;rsquo;m no longer actively pursuing biology, the details became tedious, so I put the book down after reading about a quarter of it.
I did skip ahead and look at all the illustrations though, since that was my purpose for buying the book in the first place.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;
&lt;div class=&#34;book&#34;&gt; &lt;div class=&#34;side spine&#34;&gt; &lt;span class=&#34;spine-title&#34;&gt;Thinking, Fast and Slow&lt;/span&gt; &lt;span class=&#34;spine-author&#34;&gt;DK&lt;/span&gt; &lt;/div&gt; &lt;div class=&#34;side top&#34;&gt;&lt;/div&gt; &lt;div class=&#34;side cover&#34; style=&#34;background-image: url(&#39;https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Ftse1.mm.bing.net%2Fth%3Fid%3DOIP.9OzH313CEHwQg_bwuVy4cgAAAA%26pid%3DApi&amp;f=1&#39;)&#34;&gt; &lt;div class=&#34;summary&#34;&gt;&lt;div id=&#34;outline-container-org889c506&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;org889c506&#34;&gt;Thinking, Fast and Slow&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-org889c506&#34;&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-orgfa8ea42&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;orgfa8ea42&#34;&gt;Daniel Kahneman. 2011&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-orgfa8ea42&#34;&gt;
&lt;p&gt;
I&amp;rsquo;ve seen this recommended in tech circles over and over again, and I&amp;rsquo;m familiar with the basic premises of the book. Since I enjoyed Cal Newport&amp;rsquo;s &lt;i&gt;Deep Work&lt;/i&gt; so much, I figure I would continue down that vein with this book.
&lt;/p&gt;
&lt;p&gt;
The book contains many interesting statistical facts, and prompts the reader with small puzzles and interactive sections that will make you say &amp;ldquo;wow!&amp;rdquo;, or at least &amp;ldquo;huh&amp;rdquo;, or &amp;ldquo;neat&amp;rdquo;.
This is one of those books that you try to quote to a friend, but miscommunicate partially until it doesn&amp;rsquo;t make sense, then say, &amp;ldquo;Ah you just have to read the book I swear it&amp;rsquo;s cooler than it sounds&amp;rdquo;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-org1826d89&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;org1826d89&#34;&gt;Why did I Stop Reading?&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-org1826d89&#34;&gt;
&lt;p&gt;
Kahneman prefers to write simple sentences with simple words, and elaborates each point until there is zero ambiguity.
While this style of writing makes for exceptionally clear reading, after 200 pages (in a &amp;gt;400 page book), it became &lt;i&gt;painfully&lt;/i&gt; boring, and incredibly easy to predict what was going to be said in the next sentence.
&lt;/p&gt;
&lt;p&gt;
I&amp;rsquo;m normally a pretty slow reader, since I like to read by listening to the voice in my head utter every word on the page, but with this book that style of reading was way too slow.
I ended up parsing multiple sentences at a time, with no internal monologue (which, to my understanding, is the approach used by speed-readers), and would finish a page in 20-30 seconds.
&lt;/p&gt;
&lt;p&gt;
There were some interesting facts and perspectives in the book, but having already taken multiple statistics courses I was already familiar with almost everything Kahneman discussed, so reading this book was no longer fun.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;
&lt;div class=&#34;book&#34;&gt; &lt;div class=&#34;side spine&#34;&gt; &lt;span class=&#34;spine-title&#34;&gt;Thomas Jefferson: A Strange Case of Mistaken Identity&lt;/span&gt; &lt;span class=&#34;spine-author&#34;&gt;AM&lt;/span&gt; &lt;/div&gt; &lt;div class=&#34;side top&#34;&gt;&lt;/div&gt; &lt;div class=&#34;side cover&#34; style=&#34;background-image: url(&#39;https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRpcjhSJrYqJk2nkOdrc2WycvfhZRot0Ts6boaMqYuSUHlx750v&#39;)&#34;&gt; &lt;div class=&#34;summary&#34;&gt;&lt;div id=&#34;outline-container-org267bc7c&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;org267bc7c&#34;&gt;Thomas Jefferson: A Strange Case of Mistaken Identity&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-org267bc7c&#34;&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-org7099d1e&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;org7099d1e&#34;&gt;Alf J. Mapp, Jr. 1987&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-org7099d1e&#34;&gt;
&lt;p&gt;
I picked this book up at Goodwill recently, mostly because a friend of mine has been repeating polemics and character attacks against the 3rd president that seemed off-base and uninformed to me. So I figured I would get informed.
&lt;/p&gt;
&lt;p&gt;
There was a sticker on it which read &lt;code&gt;03/14/05&lt;/code&gt;. Apparently it had waited 17 years for me.
&lt;/p&gt;
&lt;p&gt;
I thoroughly enjoyed the style of prose the author uses, which is reminiscent of the rhythmic writing of Jefferson himself.
&lt;/p&gt;
&lt;p&gt;
I learned a lot about the actuality of life in Revolutionary America, as this book paints a vivid and dynamic picture.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-orgd75d666&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;orgd75d666&#34;&gt;Why did I Stop Reading?&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-orgd75d666&#34;&gt;
&lt;p&gt;
It really was a joy reading this and I will probably come back to it every now and then to finish another chapter, but as it stands the book is long and my attention for the topic short.
I was able to convince my friend that perhaps they misunderstood this particular president - value extracted.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;what-do-i-plan-on-reading&#34;&gt;What do I Plan on Reading?&lt;/h2&gt;
&lt;div class=&#34;bookshelf&#34;&gt;
&lt;div class=&#34;book&#34;&gt; &lt;div class=&#34;side spine&#34;&gt; &lt;span class=&#34;spine-title&#34;&gt;Noise&lt;/span&gt; &lt;span class=&#34;spine-author&#34;&gt;DK&lt;/span&gt; &lt;/div&gt; &lt;div class=&#34;side top&#34;&gt;&lt;/div&gt; &lt;div class=&#34;side cover&#34; style=&#34;background-image: url(&#39;https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Ftse2.mm.bing.net%2Fth%3Fid%3DOIP.H2iz06_iWsCQr0bN02eBVgAAAA%26pid%3DApi&amp;f=1&#39;)&#34;&gt; &lt;div class=&#34;summary&#34;&gt;&lt;div id=&#34;outline-container-orge2c88df&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;orge2c88df&#34;&gt;Noise&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-orge2c88df&#34;&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-orgcccc3d1&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;orgcccc3d1&#34;&gt;Daniel Kahneman. 2021&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-orgcccc3d1&#34;&gt;
&lt;p&gt;
Kahneman&amp;rsquo;s work seems fascinating to me, and I haven&amp;rsquo;t read him yet. From the synopsis this book appears to be in line with the thinking of Wilson&amp;rsquo;s &lt;i&gt;Consilience&lt;/i&gt;, and I am always intrigued by the more mechanistic explanations of human psychology, which Kahneman&amp;rsquo;s work seems to align with.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;
&lt;div class=&#34;book&#34;&gt; &lt;div class=&#34;side spine&#34;&gt; &lt;span class=&#34;spine-title&#34;&gt;The American Spirit: Who We Are and What We Stand For&lt;/span&gt; &lt;span class=&#34;spine-author&#34;&gt;DM&lt;/span&gt; &lt;/div&gt; &lt;div class=&#34;side top&#34;&gt;&lt;/div&gt; &lt;div class=&#34;side cover&#34; style=&#34;background-image: url(&#39;https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Ftse4.mm.bing.net%2Fth%3Fid%3DOIP.W0h_QFYHtEUC3ZT-xXrn1wAAAA%26pid%3DApi&amp;f=1&#39;)&#34;&gt; &lt;div class=&#34;summary&#34;&gt;&lt;div id=&#34;outline-container-org74d2be2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;org74d2be2&#34;&gt;The American Spirit: Who We Are and What We Stand For&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-org74d2be2&#34;&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-orgdfbf34e&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;orgdfbf34e&#34;&gt;David McCullough. 2017&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-orgdfbf34e&#34;&gt;
&lt;p&gt;
I really enjoyed the HBO adaptation of McCullough&amp;rsquo;s John Adams, and from what I can tell he seems pretty prolific on the topic of early American history, so I&amp;rsquo;m interested to hear what he has to say about the American Spirit.
&lt;/p&gt;
&lt;p&gt;
I wonder what he will say about Jefferson or Thoreau, and what his commentary on modern America will be.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;
&lt;div class=&#34;book&#34;&gt; &lt;div class=&#34;side spine&#34;&gt; &lt;span class=&#34;spine-title&#34;&gt;The Overstory&lt;/span&gt; &lt;span class=&#34;spine-author&#34;&gt;RP&lt;/span&gt; &lt;/div&gt; &lt;div class=&#34;side top&#34;&gt;&lt;/div&gt; &lt;div class=&#34;side cover&#34; style=&#34;background-image: url(&#39;https://duckduckgo.com/i/da45648a.png&#39;)&#34;&gt; &lt;div class=&#34;summary&#34;&gt;&lt;div id=&#34;outline-container-orga4e3bd8&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;orga4e3bd8&#34;&gt;The Overstory&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-orga4e3bd8&#34;&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-org19c7097&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;org19c7097&#34;&gt;Richard Powers. 2018&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-org19c7097&#34;&gt;
&lt;p&gt;
An arboreal drama? Count me in. What can I say, I really like trees. From what I skimmed in the book store, this seems like a very interesting read, and I don&amp;rsquo;t read enough novels, so I&amp;rsquo;ll give it a shot.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;books-that-made-an-impression-on-me&#34;&gt;Books that Made an Impression on Me&lt;/h2&gt;
&lt;div class=&#34;bookshelf&#34;&gt;
&lt;div class=&#34;book&#34;&gt; &lt;div class=&#34;side spine&#34;&gt; &lt;span class=&#34;spine-title&#34;&gt;Meditations&lt;/span&gt; &lt;span class=&#34;spine-author&#34;&gt;MA&lt;/span&gt; &lt;/div&gt; &lt;div class=&#34;side top&#34;&gt;&lt;/div&gt; &lt;div class=&#34;side cover&#34; style=&#34;background-image: url(&#39;https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Ftse1.mm.bing.net%2Fth%3Fid%3DOIP.00UPxumteCcuyv6w_VB9FgAAAA%26pid%3DApi&amp;f=1&#39;)&#34;&gt; &lt;div class=&#34;summary&#34;&gt;&lt;div id=&#34;outline-container-org3de88ed&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;org3de88ed&#34;&gt;Meditations&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-org3de88ed&#34;&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-org411cbb1&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;org411cbb1&#34;&gt;Marcus Aurelius&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-orgbbdd748&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;orgbbdd748&#34;&gt;Translated by Gregory Hays. 2003&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-orgbbdd748&#34;&gt;
&lt;p&gt;
This is my favorite book of all time, and has influenced me more than any other. I&amp;rsquo;ve written about it &lt;a href=&#34;https://mjdiloreto.github.io/posts/meditations-quotations&#34;&gt;before&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;
&lt;div class=&#34;book&#34;&gt; &lt;div class=&#34;side spine&#34;&gt; &lt;span class=&#34;spine-title&#34;&gt;Siddhartha&lt;/span&gt; &lt;span class=&#34;spine-author&#34;&gt;HH&lt;/span&gt; &lt;/div&gt; &lt;div class=&#34;side top&#34;&gt;&lt;/div&gt; &lt;div class=&#34;side cover&#34; style=&#34;background-image: url(&#39;https://duckduckgo.com/i/606fd151.jpg&#39;)&#34;&gt; &lt;div class=&#34;summary&#34;&gt;&lt;div id=&#34;outline-container-orgc67d8cf&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;orgc67d8cf&#34;&gt;Siddhartha&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-orgc67d8cf&#34;&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-org807ed1a&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;org807ed1a&#34;&gt;Herman Hesse. 1922&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-org807ed1a&#34;&gt;
&lt;p&gt;
I had a fantastic English teacher my Sophomore year of high school, and this was one of the books we read in her class. It might have been part of the stardard curriculum, but she definitely &lt;i&gt;got it&lt;/i&gt;, and wasn&amp;rsquo;t just regurgitating some shallow standard lesson plan. I remember she told us one Monday that she had spent the entire weekend at a some kind of silence retreat, where she spent all day in complete silence in a cell on some compound somewhere, which at the time seemed pretty badass to me. She challenged the class to sit in silence, without thoughts, for just one minute, and told us we probably wouldn&amp;rsquo;t be able to. This, combined with reading both &lt;i&gt;Siddhartha&lt;/i&gt; and &lt;i&gt;Teddy&lt;/i&gt; were my introduction to meditation and the themes of eastern spiritual thought.
&lt;/p&gt;
&lt;p&gt;
The book deals with consciousness and spiritual awakening, which made it stand out among the sterile book choices of the rest of the standard curriculum in high school. I remember deeply admiring Siddhartha and the simple ascetic lifestyle he lived.
&lt;/p&gt;
&lt;p&gt;
I credit this book as being probably the most influential on me during my underclassman years.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;
&lt;div class=&#34;book&#34;&gt; &lt;div class=&#34;side spine&#34;&gt; &lt;span class=&#34;spine-title&#34;&gt;Teddy&lt;/span&gt; &lt;span class=&#34;spine-author&#34;&gt;JDS&lt;/span&gt; &lt;/div&gt; &lt;div class=&#34;side top&#34;&gt;&lt;/div&gt; &lt;div class=&#34;side cover&#34; style=&#34;background-image: url(&#39;https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Ftse4.mm.bing.net%2Fth%3Fid%3DOIP.-WlnKso6th9jymEC0ZWYzAAAAA%26pid%3DApi&amp;f=1&#39;)&#34;&gt; &lt;div class=&#34;summary&#34;&gt;&lt;div id=&#34;outline-container-org505c55f&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;org505c55f&#34;&gt;Teddy&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-org505c55f&#34;&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-org5d8f8a3&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;org5d8f8a3&#34;&gt;J.D. Salinger. 1953&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-org5d8f8a3&#34;&gt;
&lt;p&gt;
This was another required reading from that awesome Sophomore year English teacher, following the themes of &lt;i&gt;Siddhartha&lt;/i&gt; with more eastern philosophy tempered for Western ears. J.D. Salinger&amp;rsquo;s prose in this short story was captivating, and I distinctly remember multiple girls crying over the ending in front of the whole class. Not in an embarrassing way though, because every single person in the room was deeply moved by the group reading. I&amp;rsquo;m not sure I will ever experience anything quite like it again, but I&amp;rsquo;m glad I had the experience.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;
&lt;div class=&#34;book&#34;&gt; &lt;div class=&#34;side spine&#34;&gt; &lt;span class=&#34;spine-title&#34;&gt;Self-Reliance&lt;/span&gt; &lt;span class=&#34;spine-author&#34;&gt;RWE&lt;/span&gt; &lt;/div&gt; &lt;div class=&#34;side top&#34;&gt;&lt;/div&gt; &lt;div class=&#34;side cover&#34; style=&#34;background-image: url(&#39;https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Ftse4.mm.bing.net%2Fth%3Fid%3DOIP.UObX7H8SSgAD-Ncvm_HoFwAAAA%26pid%3DApi&amp;f=1&#39;)&#34;&gt; &lt;div class=&#34;summary&#34;&gt;&lt;div id=&#34;outline-container-org9a5b663&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;org9a5b663&#34;&gt;Self-Reliance&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-org9a5b663&#34;&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-orge71cd68&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;orge71cd68&#34;&gt;Ralph Waldo Emerson&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-orge71cd68&#34;&gt;
&lt;p&gt;
Absolutely the most influential essay I read my Freshman year of high school. We were only required to read it once (which most of the class didn&amp;rsquo;t do), but I remember rereading it a second time right after finishing it. The Transcendentalist movement for some reason resonated deeply with me, and still does to this day. I remember reading Emerson&amp;rsquo;s &lt;i&gt;The Oversoul&lt;/i&gt; and thinking how absolutely bizarre it was to hear such complete and unforgiving metaphysical speculation in &lt;i&gt;school&lt;/i&gt; of all places.
&lt;/p&gt;
&lt;p&gt;
I&amp;rsquo;m glad my class read Emerson&amp;rsquo;s essays over Thoreau&amp;rsquo;s &lt;i&gt;Walden Pond&lt;/i&gt;, because I never felt the visceral connection to the surrounding intellectual movement reading that book. &lt;i&gt;Self-Reliance&lt;/i&gt; itself shaped my personal philosophy early on, and I have not since renounced the lessons I learned in it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;
&lt;div class=&#34;book&#34;&gt; &lt;div class=&#34;side spine&#34;&gt; &lt;span class=&#34;spine-title&#34;&gt;Everything That Rises Must Converge&lt;/span&gt; &lt;span class=&#34;spine-author&#34;&gt;FO&lt;/span&gt; &lt;/div&gt; &lt;div class=&#34;side top&#34;&gt;&lt;/div&gt; &lt;div class=&#34;side cover&#34; style=&#34;background-image: url(&#39;https://upload.wikimedia.org/wikipedia/en/9/90/EverythingThatRises.JPG&#39;)&#34;&gt; &lt;div class=&#34;summary&#34;&gt;&lt;div id=&#34;outline-container-orge2e736c&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;orge2e736c&#34;&gt;Everything That Rises Must Converge&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-orge2e736c&#34;&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-org13d8e42&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;org13d8e42&#34;&gt;Flannery O&amp;rsquo;Connor. 1965&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-org13d8e42&#34;&gt;
&lt;p&gt;
This was another standout book from my Sophomore year of high school. I remember actually looking forward to reading and discussing these stories in class, because some of them were absolutely wild. The teacher focused a lot on the imagery and symbolism in the different stories (as every English teacher does), but I remember these being powerful and interesting symbols, not the bland kind found in some other high school book choices.
&lt;/p&gt;
&lt;p&gt;
In particular I remember &amp;ldquo;Parker&amp;rsquo;s Back&amp;rdquo;, &amp;ldquo;The Lame Shall Enter First&amp;rdquo;, and &amp;ldquo;Everything That Rises Must Converge&amp;rdquo; from this collection of short stories.
&lt;/p&gt;
&lt;p&gt;
In &amp;ldquo;Parker&amp;rsquo;s Back&amp;rdquo; I remember learning the word &lt;code&gt;hoary&lt;/code&gt;, which someone made a joke about in class.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;
&lt;div class=&#34;book&#34;&gt; &lt;div class=&#34;side spine&#34;&gt; &lt;span class=&#34;spine-title&#34;&gt;The Pleasure of Finding Things Out&lt;/span&gt; &lt;span class=&#34;spine-author&#34;&gt;RF&lt;/span&gt; &lt;/div&gt; &lt;div class=&#34;side top&#34;&gt;&lt;/div&gt; &lt;div class=&#34;side cover&#34; style=&#34;background-image: url(&#39;https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Ftse1.mm.bing.net%2Fth%3Fid%3DOIP.I91nKKkzuIQXtMDUDTumfwAAAA%26pid%3DApi&amp;f=1&#39;)&#34;&gt; &lt;div class=&#34;summary&#34;&gt;&lt;div id=&#34;outline-container-orgf7aa8c9&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;orgf7aa8c9&#34;&gt;The Pleasure of Finding Things Out&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-orgf7aa8c9&#34;&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-org66d0673&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;org66d0673&#34;&gt;Richard Feynman. 1999&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-org66d0673&#34;&gt;
&lt;p&gt;
I remember in high school an old mentor of mine, who was a physics professor, had taught me about genius. I had made some comment about those &amp;ldquo;geniuses&amp;rdquo; (because in my mind at that time, anyone smarter than me was a genius) Bill Gates and Steve Jobs, and my mentor quickly corrected me.
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
&amp;ldquo;Those men are not geniuses. They didn&amp;rsquo;t discover anything &lt;i&gt;new&lt;/i&gt;. They just perfected something already existing. That&amp;rsquo;s commendable, but it isn&amp;rsquo;t &lt;i&gt;genius&lt;/i&gt;. Geniuses are people like &lt;b&gt;Bach&lt;/b&gt;, &lt;b&gt;Newton&lt;/b&gt;, or &lt;b&gt;Richard Feynman&lt;/b&gt;&amp;rdquo;.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I specifically remember him calling out Feynman as one of the small group of people he considered genius, so I set out to figure out why. I came across his lectures on YouTube and they were completely enthralling.
&lt;/p&gt;
&lt;p&gt;
Feynman has a way of explaining things which is so utterly &lt;i&gt;simple&lt;/i&gt; that you can&amp;rsquo;t help but understand exactly what he says. It doesn&amp;rsquo;t matter if it&amp;rsquo;s an advanced concept in physics or mathematics, or simply something he noticed about people, it&amp;rsquo;s so easy and entertaining to listen to him talk. This book reads exactly the same way - his voice comes through so clearly that I was even reading with his distinct accent in my mind most of the time.
&lt;/p&gt;
&lt;p&gt;
This book is overflowing with an earnest and eager excitement for learning. Feynman has a childlike wonder about the world, and he shares it here using vivid imagery and humorous anecdotes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;elementary-school&#34;&gt;Elementary School&lt;/h3&gt;
&lt;div class=&#34;bookshelf&#34;&gt;
&lt;div class=&#34;book&#34;&gt; &lt;div class=&#34;side spine&#34;&gt; &lt;span class=&#34;spine-title&#34;&gt;The Dangerous Book for Boys&lt;/span&gt; &lt;span class=&#34;spine-author&#34;&gt;CI&lt;/span&gt; &lt;/div&gt; &lt;div class=&#34;side top&#34;&gt;&lt;/div&gt; &lt;div class=&#34;side cover&#34; style=&#34;background-image: url(&#39;https://upload.wikimedia.org/wikipedia/en/4/46/Iggulden_%26_Iggulden_-_The_Dangerous_Book_for_Boys_coverart.jpg&#39;)&#34;&gt; &lt;div class=&#34;summary&#34;&gt;&lt;div id=&#34;outline-container-orge517774&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;orge517774&#34;&gt;The Dangerous Book for Boys&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-orge517774&#34;&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-org3c6278f&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;org3c6278f&#34;&gt;Hal Iggulden. 2007&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-org3c6278f&#34;&gt;
&lt;p&gt;
This book&amp;rsquo;s Wikipedia entry contains a section called &lt;i&gt;Reception&lt;/i&gt; that covers it pretty well (emphasis mine):
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
Some reviewers have criticised the book for encouraging its young readers to &lt;b&gt;partake in activities that could result in injury&lt;/b&gt;, although there is a liability warning below the copyright information, as well as for promoting gendered stereotypes.[5] Others have praised it for helping to counter &amp;ldquo;PlayStation Culture&amp;rdquo;[2] through its promotion of outdoor activities and games.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Activities that could result in injury? Uh yeah, that&amp;rsquo;s the whole point. This book was so awesome for me as a kid. I reread every single page and did just about every single activity the book mentions for years, probably from the ages of 8 to 12. Camping, whittling, navigation, knots, flags, games, history, making weapons, you name it, everything fun to do indoors and outdoors seemed to be in that book. They even taught you how to do the paper marbling effect that was on the front page of the book.
&lt;/p&gt;
&lt;p&gt;
It was completely empowering, and rereading the opening statement of the book now, I realize how profound an impact this book actually had on my intellectual and emotional development.
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
Don&amp;rsquo;t worry about genius and don&amp;rsquo;t worry about not being clever. Trust rather to hard work, perseverance, and determination. The best motto for a long march is ‘Don’t grumble. Plug on.’
“You hold your future in your own hands. Never waver in this belief. Don’t swagger. The boy who swaggers—like the man who swaggers—has little else that he can do. He is a cheap-Jack crying his own paltry wares. It is the empty tin that rattles most. Be honest. Be loyal. Be kind. Remember that the hardest thing to acquire is the faculty of being unselfish. As a quality it is one of the finest attributes of manliness.
“Love the sea, the ringing beach and the open downs.
“Keep clean, body and mind.’”
&lt;/p&gt;
&lt;p&gt;
—Sir Frederick Treves, Bart, KCVO, CB, Sergeant in Ordinary to HM the King, Surgeon in Ordinary to HRH Prince of Wales, written at 6 Wimpole Street, Cavendish Sqare, London, on September 2, 1903, on the occasion of the twenty-fifth anniversary of the Boy&amp;rsquo;s Own Paper
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
As for gendered stereotypes, I remember they had one small section called &amp;ldquo;Girls&amp;rdquo; which seemed odd to me even at the time, and reading back, certainly does contain stereotypes you would only hear repeated by an old uncle today, or probably great-uncle. However, this is one page among over 200, and the general gist I remembered was essentially - be nice, listen, don&amp;rsquo;t be vulgar, don&amp;rsquo;t worry too much about them, and be yourself.
&lt;/p&gt;
&lt;p&gt;
My sisters had &lt;i&gt;The Dangerous Book for Girls&lt;/i&gt;, which I remember didn&amp;rsquo;t cover nearly as many cool topics, and which they didn&amp;rsquo;t enjoy nearly as much as I enjoyed mine. If I ever had a daughter, I would definitely just give her this book instead.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;
&lt;div class=&#34;book&#34;&gt; &lt;div class=&#34;side spine&#34;&gt; &lt;span class=&#34;spine-title&#34;&gt;Inkspell&lt;/span&gt; &lt;span class=&#34;spine-author&#34;&gt;CF&lt;/span&gt; &lt;/div&gt; &lt;div class=&#34;side top&#34;&gt;&lt;/div&gt; &lt;div class=&#34;side cover&#34; style=&#34;background-image: url(&#39;https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Ftse2.mm.bing.net%2Fth%3Fid%3DOIP.Vi9NrT88Y4h3EZQQCzK2PAHaJx%26pid%3DApi&amp;f=1&amp;ipt=0f821cc3a2c57fdaccc643bed54c0d2302a5cd67238ac3d0f660f9670a37619c&amp;ipo=images&#39;)&#34;&gt; &lt;div class=&#34;summary&#34;&gt;&lt;div id=&#34;outline-container-org89bdbb6&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;org89bdbb6&#34;&gt;Inkspell&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-org89bdbb6&#34;&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-orgf7676da&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;orgf7676da&#34;&gt;Cornelia Funke. 2005&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-orgf7676da&#34;&gt;
&lt;p&gt;
This was the first fantasy book I remember being totally lost in, which I read in grade 4.
I never read the first book in the series, &lt;i&gt;Inkheart&lt;/i&gt;, because I didn&amp;rsquo;t know this book was part 2 in the series.
My teacher just had it on the shelf, it was the thickest book in the classroom (which I thought would be the most impressive to read, when in actuality nobody cared whatsoever).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;
&lt;div class=&#34;book&#34;&gt; &lt;div class=&#34;side spine&#34;&gt; &lt;span class=&#34;spine-title&#34;&gt;Clockwork&lt;/span&gt; &lt;span class=&#34;spine-author&#34;&gt;PP&lt;/span&gt; &lt;/div&gt; &lt;div class=&#34;side top&#34;&gt;&lt;/div&gt; &lt;div class=&#34;side cover&#34; style=&#34;background-image: url(&#39;https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Ftse3.mm.bing.net%2Fth%3Fid%3DOIP.SuIfBxUO5T5LitkywzSVSgAAAA%26pid%3DApi&amp;f=1&amp;ipt=79785523ec8e8500f83661ea68220feec170e461037a98fa1279f9c092e139c9&amp;ipo=images&#39;)&#34;&gt; &lt;div class=&#34;summary&#34;&gt;&lt;div id=&#34;outline-container-org1b37faa&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;org1b37faa&#34;&gt;Clockwork&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-org1b37faa&#34;&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-orge928b62&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;orge928b62&#34;&gt;Philip Pullman. 1996&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-orge928b62&#34;&gt;
&lt;p&gt;
This was the first book I remember subverting my expectations, which I read in grade 4.
I remember it being creepy, dark, and almost scary.
I recommended it to my younger sister when she hit grade 4, and she also still remembers this short book being quite good.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;
&lt;div class=&#34;book&#34;&gt; &lt;div class=&#34;side spine&#34;&gt; &lt;span class=&#34;spine-title&#34;&gt;My Side of The Mountain&lt;/span&gt; &lt;span class=&#34;spine-author&#34;&gt;JCG&lt;/span&gt; &lt;/div&gt; &lt;div class=&#34;side top&#34;&gt;&lt;/div&gt; &lt;div class=&#34;side cover&#34; style=&#34;background-image: url(&#39;https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Ftse1.mm.bing.net%2Fth%3Fid%3DOIP.3jnDo4ZhelTp6d1BROE-ugHaMO%26pid%3DApi&amp;f=1&amp;ipt=51e6dc4d66e122a273b8480f3f636c502d68a7414e9baa0b8a680d1fa240063b&amp;ipo=images&#39;)&#34;&gt; &lt;div class=&#34;summary&#34;&gt;&lt;div id=&#34;outline-container-org08974ad&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;org08974ad&#34;&gt;My Side of The Mountain&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-org08974ad&#34;&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-org3f0bc22&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;org3f0bc22&#34;&gt;Jean Craighead George. 1959&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-org3f0bc22&#34;&gt;
&lt;p&gt;
This book precipitated my love for Emerson&amp;rsquo;s &lt;i&gt;Self-Reliance&lt;/i&gt;, and interest in American Poets like Walt Whitman.
For some reason there&amp;rsquo;s just something so compelling about the solitary hermit life to a young boy.
Though just a young man, the main character navigates the perils of nature with his rational planning and stoic endurance, and is eventually rewarded with a deep symbiosis with the plants, animals, and natural environment he occupies.
&lt;/p&gt;
&lt;p&gt;
He lives in a hollowed-out oak tree and becomes friends with a hawk, it&amp;rsquo;s great.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;middle-school&#34;&gt;Middle School&lt;/h3&gt;
&lt;p&gt;I didn&amp;rsquo;t read much in Middle School.
Personal reading wasn&amp;rsquo;t required as much as other homework, and I was busy with extracurricular activities.
I also thought reading was kind of lame, but there were a couple of books I distinctly remember enjoying in this period.&lt;/p&gt;
&lt;div class=&#34;bookshelf&#34;&gt;
&lt;div class=&#34;book&#34;&gt; &lt;div class=&#34;side spine&#34;&gt; &lt;span class=&#34;spine-title&#34;&gt;Bartimaeus; Ptolemy&#39;s Gate&lt;/span&gt; &lt;span class=&#34;spine-author&#34;&gt;JS&lt;/span&gt; &lt;/div&gt; &lt;div class=&#34;side top&#34;&gt;&lt;/div&gt; &lt;div class=&#34;side cover&#34; style=&#34;background-image: url(&#39;https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Ftse3.mm.bing.net%2Fth%3Fid%3DOIP.FawvBIFEKZvD6BYcZlMEZAAAAA%26pid%3DApi&amp;f=1&amp;ipt=46f78f3f48a25b1588bec054480ef470091d372eb08130172828e46bc8a52d08&amp;ipo=images&#39;)&#34;&gt; &lt;div class=&#34;summary&#34;&gt;&lt;div id=&#34;outline-container-orga82f708&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;orga82f708&#34;&gt;Bartimaeus; Ptolemy&amp;rsquo;s Gate&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-orga82f708&#34;&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-org198bad4&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;org198bad4&#34;&gt;Jonathan Stroud. 2005&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-org198bad4&#34;&gt;
&lt;p&gt;
This fantasy book paints an occult alternative history, where world events are decided not by mankind, but by powerful forces of Djinn, spirits summoned by great human sorcerers.
&lt;/p&gt;
&lt;p&gt;
Winston Churchill? Sorcerer. Egyptian Pharaohs? Sorcerers. American Founding Fathers? All sorcerers, who succeed by subjugating strong supernatural beings to their will.
&lt;/p&gt;
&lt;p&gt;
A huge 700+ page tome, with multiple entries in the series, and the longest and most frequent footnotes I&amp;rsquo;ve ever encountered (footnotes often span more of the page than the story itself), this book dives so deeply into the fantastic it&amp;rsquo;s almost impossible not to lose yourself in it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;about-this-page&#34;&gt;About this Page&lt;/h2&gt;
&lt;p&gt;This page uses Peter Gyurov&amp;rsquo;s &lt;a href=&#34;https://petargyurov.com/bookshelf/&#34;&gt;virtual library implementation&lt;/a&gt;. I took him up on his offer to incorporate the code into my own site. The only difference is I added a summary section you can view when you click each book. It&amp;rsquo;s a bit convoluted, since I use a custom org-mode exporter to render Hugo markdown to render html in the end.&lt;/p&gt;
&lt;p&gt;The transition to the open state can probably be more elegant, with the book moving to a fixed position centered in the viewport, since this would look better on smaller screens, but the day for that is not today. I also know you can hover books underneath an open one. Props if you can tell me why that&amp;rsquo;s happening (I suspect it&amp;rsquo;s because the open book is a 3D rotation of an absolutely positioned element).&lt;/p&gt;
&lt;script type=&#34;text/javascript&#34;&gt;
function getRandomInt(min, max) {
  min = Math.ceil(min);
  max = Math.floor(max);
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

function randomChoice(array) {
  return array[Math.floor(Math.random() * array.length)];
}

let availablePatterns = [&#34;argyle&#34;, &#34;tartan&#34;]; // we could probably get these programatically
let availableColours = [
  &#34;maroon&#34;,
  &#34;darkgreen&#34;,
  &#34;darkolivegreen&#34;,
  &#34;olivedrab&#34;,
  &#34;brown&#34;,
  &#34;saddlebrown&#34;,
  &#34;sienna&#34;,
  &#34;midnightblue&#34;,
  &#34;steelblue&#34;,
  &#34;tomato&#34;,
  &#34;teal&#34;,
  &#34;slategray&#34;,
  &#34;sienna&#34;,
  &#34;saddlebrown&#34;,
  &#34;rebeccapurple&#34;,
  &#34;palevioletred&#34;,
  &#34;lightseagreen&#34;,
  &#34;firebrick&#34;,
];

const setStyleAndCustomProperty = (style, property, value) =&gt; {
  style.setProperty(property, value);
  style.setProperty(`--${property}`, value);
};

const bookshelves = document.querySelectorAll(&#39;.bookshelf&#39;)

bookshelves.forEach((bookshelf) =&gt; {
    const books = Object.values(bookshelf.getElementsByClassName(&#34;book&#34;));
    const spines = Object.values(bookshelf.getElementsByClassName(&#34;spine&#34;));
    const covers = Object.values(bookshelf.getElementsByClassName(&#34;cover&#34;));
    const tops = Object.values(bookshelf.getElementsByClassName(&#34;top&#34;));
    const summaries = Object.values(bookshelf.getElementsByClassName(&#34;summary&#34;));

    // assign a random height, pattern and colour to each book
    spines.map(function (s, i) {
        let randomHeight = getRandomInt(220, 290);

        books[i].style.setProperty(&#39;--height&#39;, `${randomHeight}px`);
        books[i].style.setProperty(&#39;--top&#39;, `${280 - randomHeight}px`);

        setStyleAndCustomProperty(s.style, &#39;height&#39;, `${randomHeight}px`);
        setStyleAndCustomProperty(s.style, &#39;top&#39;, `${280 - randomHeight}px`);

        s.style.backgroundImage = `var(--${randomChoice(availablePatterns)})`;
        s.style.backgroundColor = randomChoice(availableColours);

        setStyleAndCustomProperty(covers[i].style, &#39;height&#39;, `${randomHeight}px`);
        setStyleAndCustomProperty(covers[i].style, &#39;top&#39;, `${280 - randomHeight}px`);

        setStyleAndCustomProperty(tops[i].style, &#39;top&#39;, `${280 - randomHeight}px`);
    });

});

const allBooks = document.querySelectorAll(&#39;.book&#39;);

/* Peek/view state machine */
allBooks.forEach((book) =&gt; {
    book.addEventListener(&#39;click&#39;, () =&gt; {
        allBooks.forEach((otherBook) =&gt; {
            if (book === otherBook) return;
            otherBook.classList.remove(&#39;open&#39;);
        });
        book.classList.remove(&#39;peek&#39;);
        book.classList.toggle(&#39;open&#39;);
    });
    // Can&#39;t simply be :hover because opening book should be different
    book.addEventListener(&#39;mouseover&#39;, () =&gt; {
        book.classList.add(&#39;peek&#39;);
    });
    book.addEventListener(&#39;mouseout&#39;, () =&gt; {
        book.classList.remove(&#39;peek&#39;);
    });
});

document.body.addEventListener(&#39;click&#39;, (e) =&gt; {
    if(![&#39;book&#39;, &#39;cover&#39;, &#39;side&#39;, &#39;top&#39;, &#39;spine&#39;, &#39;spine-title&#39;, &#39;spine-author&#39;].some((cls) =&gt; e.target.classList.contains(cls))) {
        allBooks.forEach((book) =&gt; book.classList.remove(&#39;open&#39;));
    }
});

&lt;/script&gt;
</description>
       </item>
       
       <item>
         <title>Thin Client</title>
         <link>https://mjdiloreto.github.io/posts/thin-client/</link>
         <pubDate>Wed, 09 Feb 2022 09:17:00 -0600</pubDate>
         
         <guid>https://mjdiloreto.github.io/posts/thin-client/</guid>
         <description>&lt;p&gt;After working with React applications for almost 5 years, I have a certain morbid attraction to the idea that React - along with all other SPA libraries, development, and progress - is unnecessary.&lt;/p&gt;
&lt;p&gt;Obviously React exists in a very complex ecosystem.
To write the React applications the &lt;em&gt;right way&lt;/em&gt; requires:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;javascript transpilers/bundlers&lt;/li&gt;
&lt;li&gt;hundreds of npm libraries,&lt;/li&gt;
&lt;li&gt;(potentially) SSR, SSG frameworks and tools&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I can&amp;rsquo;t help but feel that the vast majority of web apps that use React do not actually need it.
Most apps are just not that complex, and the amount of SPA features that most apps provide is actually pretty minimal.&lt;/p&gt;
&lt;p&gt;Another feeling I can&amp;rsquo;t shake recently is that the robustness of React components, their reusability, is also not usually necessary.&lt;/p&gt;
&lt;p&gt;Apart from the base UI components in whatever project I&amp;rsquo;m working on (buttons, modals, dropdowns, etc.), the vast majority of my components are not reused.
Most web apps don&amp;rsquo;t really share that many features between different views, and if they do, it&amp;rsquo;s only in one or two other places.
The cost benefit of React apps, considering the vast resources organizations spend to create them, just doesn&amp;rsquo;t seem worth it.&lt;/p&gt;
&lt;p&gt;Then there&amp;rsquo;s the problem of AJAX.&lt;/p&gt;
&lt;p&gt;When the backend of an application spits out JSON for the frontend to consume, only to convert it back to recreate the same types on the frontend (which is admittedly ameliorated by a NodeJs backend), there&amp;rsquo;s duplicated work - often very time-consuming work as well.&lt;/p&gt;
&lt;p&gt;SPA frontends often end up resorting to something like Redux (or even the Apollo Client cache), as a global database.
The problem is this frontend database needs to be kept in sync with the real backend database, which ends up being a cause for much of the complexity in these apps.
Whenever I see Redux used in a project, I almost never see a well-laid out set of truly reactive data that percolates through the entire app. No, the store almost always becomes a sprawling hierarchy of nested data which inevitably ends up being used by a single page, and usually only a single component in a single instance. I&amp;rsquo;d estimate this is probably the case for 95% of the data in the Redux store for every project I&amp;rsquo;ve worked on.
One could argue that the base domain objects (User, Cart, etc.) are invaluable pieces of global state usually kept in Redux state, so any changes to permissions for example would percolate through the app without the need for a refresh, but I wonder if that&amp;rsquo;s really worth it&amp;hellip;&lt;/p&gt;
&lt;p&gt;Almost all the features I see in the average SPA are actually reproducible with a simpler stack, and a little bit of conscientious page design, which is why I like to call them &amp;ldquo;SPA-lite&amp;rdquo; apps.&lt;/p&gt;
&lt;p&gt;A lot of other people are noticing this too.
The phenomenon is &amp;ldquo;SPA fatigue&amp;rdquo;, and it&amp;rsquo;s been stirring in the web development community.&lt;/p&gt;
&lt;p&gt;There has been great progress over the last couple years in alternatives, like &lt;code&gt;htmx&lt;/code&gt;, supporting a true HATEOAS paradigm, and &lt;code&gt;elixir&lt;/code&gt; (especially paired with &lt;code&gt;LiveView&lt;/code&gt;), both of which provide almost all of the SPA features that most apps currently use.&lt;/p&gt;
&lt;p&gt;GraphQL is almost the antithesis of the principles of &lt;code&gt;htmx&lt;/code&gt;, but it is still an improvement over the current state of REST-based SPAs.&lt;/p&gt;
&lt;p&gt;Whereas htmx and elixir LiveView move most of the frontend&amp;rsquo;s responsibility back to the backend, graphql moves the most of the backend&amp;rsquo;s responsibility to the frontend.&lt;/p&gt;
&lt;p&gt;As a frontend developer who works in an SPA-lite organization, I advocate for GraphQL so that my job (and my colleagues&amp;rsquo;) becomes easier.
As someone who is interested in building apps on his own, I reach for alternatives.
Because I&amp;rsquo;m the only developer, I need to use the simplest tools available that provide the most power, and &lt;code&gt;htmx&lt;/code&gt; fits the bill.&lt;/p&gt;
&lt;p&gt;Over and over I see folks overestimating the resources their servers require, overestimating the power and complexity their frontend application necessitates, overestimating the scale to which their organization will grow, overestimating the number of customers they will be able to reach and convert, overestimating the valuation of their startup&amp;hellip;&lt;/p&gt;
&lt;p&gt;The tech world is obsessed with overestimating.
If I&amp;rsquo;m going to be an anti-mimetic developer - if I&amp;rsquo;m going to be a 10x developer - if I&amp;rsquo;m going to be a solo developer - then I need to shrug the yoke of overestimation.
I need to reach for the &lt;em&gt;simplest&lt;/em&gt; tools available.&lt;/p&gt;
</description>
       </item>
       
       <item>
         <title>Mondegreen Generator</title>
         <link>https://mjdiloreto.github.io/posts/literate/</link>
         <pubDate>Tue, 28 Dec 2021 00:00:00 -0600</pubDate>
         
         <guid>https://mjdiloreto.github.io/posts/literate/</guid>
         <description>&lt;figure&gt;&lt;img src=&#34;https://mjdiloreto.github.io/ox-hugo/word_salad.png&#34;
    alt=&#34;letters made out of salad ingredients&#34;&gt;&lt;figcaption&gt;
      &lt;h4&gt;Word Salad&lt;/h4&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;rationale&#34;&gt;Rationale&lt;/h2&gt;
&lt;p&gt;Back in early 2019, when the &amp;ldquo;&lt;a href=&#34;https://duckduckgo.com/?t=ffab&amp;amp;q=gibberish+challenge&amp;amp;iax=videos&amp;amp;ia=videos&#34;&gt;gibberish challenge&lt;/a&gt;&amp;rdquo; was bubbling up through the nascent &amp;ldquo;TikTok&amp;rdquo; milieu, I was compelled to discover an algorithm which, given arbitrary English input, could produce a &amp;ldquo;gibberish&amp;rdquo; phrase appropriate for the challenge.&lt;/p&gt;
&lt;p&gt;I searched the web for such an algorithm, since surely someone had to have done this previously, but I didn&amp;rsquo;t find any results on GitHub, nor any discussions elsewhere.&lt;/p&gt;
&lt;p&gt;There is a popular card game which operates on the same principle, cards have &amp;ldquo;gibberish&amp;rdquo; phrases and players must speak the phrases out loud to figure out the true meaning of what they are saying.
This game has hundreds of cards, so I figured there was no way someone sat down and manually translated those into gibberish, but I could not find an answer to this online either.
If the company which makes this card game does have such an algorithm, they are apparently not sharing it on the web.&lt;/p&gt;
&lt;p&gt;I hate starting side-projects that already have satisfactory solutions available for free, since they seem to be a waste of my time, but this project presented enough of an interesting challenge to really pursue for at least a weekend.&lt;/p&gt;
&lt;p&gt;So, I wrote the program, but haven&amp;rsquo;t really done anything with it since then (besides &lt;a href=&#34;https://github.com/mjdiloreto/mondegreen&#34;&gt;post the code to GitHub&lt;/a&gt;).
I haven&amp;rsquo;t actively shared it in any way.&lt;/p&gt;
&lt;p&gt;At first I wanted to create a website which would run the algorithm for the &amp;ldquo;TikTok&amp;rdquo; crowd to share, but by the time I was done with the implementation they had already moved past the fad.
You have to be quick to catch the social media tidal waves I suppose.
So, I left the project alone, content with the unfinished project and the single GitHub star from my college buddy.&lt;/p&gt;
&lt;p&gt;⭐&lt;/p&gt;
&lt;p&gt;But now it&amp;rsquo;s December 2021 &amp;ndash; I&amp;rsquo;m reflecting on my year of coding and I&amp;rsquo;m ashamed to say that, besides adding ~2000 lines to my Emacs configuration and a single blog post I haven&amp;rsquo;t actually &lt;em&gt;finished&lt;/em&gt; any side projects!&lt;/p&gt;
&lt;p&gt;I think it&amp;rsquo;s time I change that.&lt;/p&gt;
&lt;p&gt;I originally wrote the program in Clojure, partly to learn the idioms of the language, and partly to try out REPL-driven development, which Clojurians always claim is a &amp;ldquo;super power&amp;rdquo;.
I don&amp;rsquo;t think I used enough tooling to consider myself a repl-superman, but I did find the experience to be satisfying, conducive to &lt;em&gt;flow&lt;/em&gt;, and &lt;strong&gt;very&lt;/strong&gt; fun.&lt;/p&gt;
&lt;p&gt;For the uninitiated (or even the moderately initiated, like I was when I started), reading Clojure can be tricky, and as I documented my code with comments, I quickly realized the comments amounted to more lines than the code itself!&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s when I learned about literate programming.
Well, I had read some Knuth, so I was actually familiar with the &lt;em&gt;concept&lt;/em&gt; of literate programming (did you know TeX was originally written as a single file?), but I didn&amp;rsquo;t actually realize it was easy with Clojure until I watched &lt;a href=&#34;https://www.youtube.com/watch?v=bhNvwxFV5vU&#34;&gt;this video&lt;/a&gt; explaining the process plainly.
It looked like something I could do (especially since I had been using org-mode for notes for over 2 years by that point), so I did it.&lt;/p&gt;
&lt;h2 id=&#34;meta&#34;&gt;Meta&lt;/h2&gt;
&lt;p&gt;The following document will explain the entire process of developing the mondegreen generator algorithm, and include the code and results.&lt;/p&gt;
&lt;h2 id=&#34;what-am-i-doing&#34;&gt;What am I doing?&lt;/h2&gt;
&lt;p&gt;The first step in any problem-solving endeavor is to outline exactly what the problem is, and the scope of the solution.&lt;/p&gt;
&lt;p&gt;So what is the problem?
Well, I want a function that can take English text and produce English text which &lt;em&gt;sounds like&lt;/em&gt; the first, but is composed of different words.&lt;/p&gt;
&lt;p&gt;After some Googling, I discovered that this type of language trick is known as a &lt;em&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Mondegreen&#34;&gt;Mondegreen&lt;/a&gt;&lt;/em&gt; (or maybe more appropriately an &lt;em&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Mondegreen#Reverse_mondegreen&#34;&gt;Oronym&lt;/a&gt;&lt;/em&gt;, but I decided to go with &lt;em&gt;Mondegreen&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;So, what I want to create is a &lt;em&gt;Mondegreen generator&lt;/em&gt;, a function which produces a &lt;em&gt;Mondegreen&lt;/em&gt; given a list of words.&lt;/p&gt;
&lt;h2 id=&#34;overview-of-the-problem-solving-process&#34;&gt;Overview of the problem-solving process&lt;/h2&gt;
&lt;p&gt;Because I didn&amp;rsquo;t know exactly how to solve this problem when I began, I needed to enable myself to explore the problem space.&lt;/p&gt;
&lt;p&gt;This is where choice of technology becomes relevant.
I needed a highly &lt;em&gt;interactive&lt;/em&gt; environment, in order to develop solutions (and failures) as I went along.&lt;/p&gt;
&lt;p&gt;I chose Clojure as my implementation language, partly because I just wanted to use it (after binging Rich Hickey&amp;rsquo;s talks on YouTube), and partly because the REPL-driven development paradigm fit my problem nicely.&lt;/p&gt;
&lt;p&gt;So, I fired up a repl with &lt;code&gt;clj&lt;/code&gt;, and got to work.&lt;/p&gt;
&lt;h2 id=&#34;data&#34;&gt;Data&lt;/h2&gt;
&lt;p&gt;Well, I got my repl started, and realized I had no data to work with.
Data being the core of any program, I needed to make sure my sources would be sufficient.&lt;/p&gt;
&lt;h3 id=&#34;dictionary&#34;&gt;Dictionary&lt;/h3&gt;
&lt;p&gt;The first thing I knew I would need was an English dictionary.
Because my program would have to consume English text, it needed a way to distinguish English words from non-English words.&lt;/p&gt;
&lt;h3 id=&#34;phonemes&#34;&gt;Phonemes&lt;/h3&gt;
&lt;p&gt;Unfortunately for the English language, the way a word is spelled has little to do with how it &lt;em&gt;sounds&lt;/em&gt;, and for Mondegreens, the &lt;strong&gt;most important&lt;/strong&gt; thing about the words is how they sound!&lt;/p&gt;
&lt;p&gt;Luckily for me, I took an introduction to Linguistics course at my university, so I knew about &lt;em&gt;phonemes&lt;/em&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In phonology and linguistics, a phoneme &lt;em&gt;ˈfoʊniːm&lt;/em&gt; is a unit of sound that can distinguish one word from another in a particular language.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Phonemes are like the atoms of &lt;em&gt;phonetics&lt;/em&gt;, the indivisible &lt;em&gt;sounds&lt;/em&gt; a speaker makes to construct and distinguish words.&lt;/p&gt;
&lt;p&gt;For example, even though &amp;ldquo;read&amp;rdquo; and &amp;ldquo;read&amp;rdquo; are spelled the same, the constituent &lt;em&gt;phonemes&lt;/em&gt; help listeners discriminate between them:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;read -&amp;gt; rēd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;read -&amp;gt; rĕd
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The first is the &amp;ldquo;long-e&amp;rdquo; sound, like in the word &amp;ldquo;reed&amp;rdquo;, while the other is the &amp;ldquo;short-e&amp;rdquo; sound, like in the word &amp;ldquo;red&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;For my program, I would also need a way to map a word to the list of phonemes that compose it.
I searched Google (again) and came across the amazing &lt;strong&gt;Carnegie Melon Phonetic Dictionary&lt;/strong&gt;, which is free to use and download &lt;a href=&#34;http://www.speech.cs.cmu.edu/cgi-bin/cmudict&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;the-carnegie-melon-phonetic-dictionary&#34;&gt;The Carnegie Melon Phonetic Dictionary&lt;/h4&gt;
&lt;p&gt;The dictionary actually solves both of my data needs! First, it is a dictionary, a function with the signature:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;word -&amp;gt; boolean
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;verifying if a word is valid English, and also a &lt;em&gt;phonetic dictionary&lt;/em&gt;, a function with the signature:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;word -&amp;gt; [phoneme]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;giving the list of phonemes that compose a valid English word.
Lets explore the dictionary a bit.&lt;/p&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Phones&lt;/p&gt;
&lt;p&gt;This file (&lt;code&gt;cmudict-0.7b.phones&lt;/code&gt;) describes the phonemes in the English language, it isn&amp;rsquo;t very large, which is kind of amazing given the huge diversity of words their composition can produce:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;AA	vowel
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;AE	vowel
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;AH	vowel
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;AO	vowel
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;AW	vowel
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;AY	vowel
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;B	stop
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CH	affricate
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;D	stop
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;DH	fricative
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;EH	vowel
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ER	vowel
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;EY	vowel
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;F	fricative
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;G	stop
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;HH	aspirate
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;IH	vowel
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;IY	vowel
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;JH	affricate
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;K	stop
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;L	liquid
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;M	nasal
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;N	nasal
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;NG	nasal
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OW	vowel
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OY	vowel
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;P	stop
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;R	liquid
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;S	fricative
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SH	fricative
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;T	stop
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TH	fricative
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;UH	vowel
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;UW	vowel
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;V	fricative
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;W	semivowel
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Y	semivowel
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Z	fricative
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ZH	fricative
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The first column is the symbol the dictionary uses to represent that phoneme.
Using the examples from earlier, we could translate to phonemes like so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;read -&amp;gt; &amp;#34;R IY D&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;read -&amp;gt; &amp;#34;R EH D&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Exploring through code&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s parse this file to get a list of all the valid phonemes in our repl session.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(slurp &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;resources/cmudict-0.7b.phones&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;#34;AA\tvowel\nAE\tvowel\nAH\tvowel\nAO\tvowel\nAW\tvowel\nAY\tvowel\nB\tstop\nCH\taffricate\nD\tstop\nDH\tfricative\nEH\tvowel\nER\tvowel\nEY\tvowel\nF\tfricative\nG\tstop\nHH\taspirate\nIH\tvowel\nIY\tvowel\nJH\taffricate\nK\tstop\nL\tliquid\nM\tnasal\nN\tnasal\nNG\tnasal\nOW\tvowel\nOY\tvowel\nP\tstop\nR\tliquid\nS\tfricative\nSH\tfricative\nT\tstop\nTH\tfricative\nUH\tvowel\nUW\tvowel\nV\tfricative\nW\tsemivowel\nY\tsemivowel\nZ\tfricative\nZH\tfricative\n&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Of course we will want to split the string by newlines:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;clojure.string/split-lines&lt;/span&gt; (slurp &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;resources/cmudict-0.7b.phones&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&amp;#34;AA\tvowel&amp;#34; &amp;#34;AE\tvowel&amp;#34; &amp;#34;AH\tvowel&amp;#34; &amp;#34;AO\tvowel&amp;#34; &amp;#34;AW\tvowel&amp;#34; &amp;#34;AY\tvowel&amp;#34; &amp;#34;B\tstop&amp;#34; &amp;#34;CH\taffricate&amp;#34; &amp;#34;D\tstop&amp;#34; &amp;#34;DH\tfricative&amp;#34; &amp;#34;EH\tvowel&amp;#34; &amp;#34;ER\tvowel&amp;#34; &amp;#34;EY\tvowel&amp;#34; &amp;#34;F\tfricative&amp;#34; &amp;#34;G\tstop&amp;#34; &amp;#34;HH\taspirate&amp;#34; &amp;#34;IH\tvowel&amp;#34; &amp;#34;IY\tvowel&amp;#34; &amp;#34;JH\taffricate&amp;#34; &amp;#34;K\tstop&amp;#34; &amp;#34;L\tliquid&amp;#34; &amp;#34;M\tnasal&amp;#34; &amp;#34;N\tnasal&amp;#34; &amp;#34;NG\tnasal&amp;#34; &amp;#34;OW\tvowel&amp;#34; &amp;#34;OY\tvowel&amp;#34; &amp;#34;P\tstop&amp;#34; &amp;#34;R\tliquid&amp;#34; &amp;#34;S\tfricative&amp;#34; &amp;#34;SH\tfricative&amp;#34; &amp;#34;T\tstop&amp;#34; &amp;#34;TH\tfricative&amp;#34; &amp;#34;UH\tvowel&amp;#34; &amp;#34;UW\tvowel&amp;#34; &amp;#34;V\tfricative&amp;#34; &amp;#34;W\tsemivowel&amp;#34; &amp;#34;Y\tsemivowel&amp;#34; &amp;#34;Z\tfricative&amp;#34; &amp;#34;ZH\tfricative&amp;#34;]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And we also want to split on tabs (since this is a tab-separated file):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; (mapcat &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;clojure.string/split&lt;/span&gt; % &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\t&amp;#34;&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;clojure.string/split-lines&lt;/span&gt; (slurp &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;resources/cmudict-0.7b.phones&amp;#34;&lt;/span&gt;)))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&amp;#34;AA&amp;#34; &amp;#34;vowel&amp;#34; &amp;#34;AE&amp;#34; &amp;#34;vowel&amp;#34; &amp;#34;AH&amp;#34; &amp;#34;vowel&amp;#34; &amp;#34;AO&amp;#34; &amp;#34;vowel&amp;#34; &amp;#34;AW&amp;#34; &amp;#34;vowel&amp;#34; &amp;#34;AY&amp;#34; &amp;#34;vowel&amp;#34; &amp;#34;B&amp;#34; &amp;#34;stop&amp;#34; &amp;#34;CH&amp;#34; &amp;#34;affricate&amp;#34; &amp;#34;D&amp;#34; &amp;#34;stop&amp;#34; &amp;#34;DH&amp;#34; &amp;#34;fricative&amp;#34; &amp;#34;EH&amp;#34; &amp;#34;vowel&amp;#34; &amp;#34;ER&amp;#34; &amp;#34;vowel&amp;#34; &amp;#34;EY&amp;#34; &amp;#34;vowel&amp;#34; &amp;#34;F&amp;#34; &amp;#34;fricative&amp;#34; &amp;#34;G&amp;#34; &amp;#34;stop&amp;#34; &amp;#34;HH&amp;#34; &amp;#34;aspirate&amp;#34; &amp;#34;IH&amp;#34; &amp;#34;vowel&amp;#34; &amp;#34;IY&amp;#34; &amp;#34;vowel&amp;#34; &amp;#34;JH&amp;#34; &amp;#34;affricate&amp;#34; &amp;#34;K&amp;#34; &amp;#34;stop&amp;#34; &amp;#34;L&amp;#34; &amp;#34;liquid&amp;#34; &amp;#34;M&amp;#34; &amp;#34;nasal&amp;#34; &amp;#34;N&amp;#34; &amp;#34;nasal&amp;#34; &amp;#34;NG&amp;#34; &amp;#34;nasal&amp;#34; &amp;#34;OW&amp;#34; &amp;#34;vowel&amp;#34; &amp;#34;OY&amp;#34; &amp;#34;vowel&amp;#34; &amp;#34;P&amp;#34; &amp;#34;stop&amp;#34; &amp;#34;R&amp;#34; &amp;#34;liquid&amp;#34; &amp;#34;S&amp;#34; &amp;#34;fricative&amp;#34; &amp;#34;SH&amp;#34; &amp;#34;fricative&amp;#34; &amp;#34;T&amp;#34; &amp;#34;stop&amp;#34; &amp;#34;TH&amp;#34; &amp;#34;fricative&amp;#34; &amp;#34;UH&amp;#34; &amp;#34;vowel&amp;#34; &amp;#34;UW&amp;#34; &amp;#34;vowel&amp;#34; &amp;#34;V&amp;#34; &amp;#34;fricative&amp;#34; &amp;#34;W&amp;#34; &amp;#34;semivowel&amp;#34; &amp;#34;Y&amp;#34; &amp;#34;semivowel&amp;#34; &amp;#34;Z&amp;#34; &amp;#34;fricative&amp;#34; &amp;#34;ZH&amp;#34; &amp;#34;fricative&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You know what, let&amp;rsquo;s ignore the second column entirely, i.e. every 2nd entry (since we are only after the phonemes themselves):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(take-nth &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; (mapcat &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;clojure.string/split&lt;/span&gt; % &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\t&amp;#34;&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;clojure.string/split-lines&lt;/span&gt; (slurp &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;resources/cmudict-0.7b.phones&amp;#34;&lt;/span&gt;))))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&amp;#34;AA&amp;#34; &amp;#34;AE&amp;#34; &amp;#34;AH&amp;#34; &amp;#34;AO&amp;#34; &amp;#34;AW&amp;#34; &amp;#34;AY&amp;#34; &amp;#34;B&amp;#34; &amp;#34;CH&amp;#34; &amp;#34;D&amp;#34; &amp;#34;DH&amp;#34; &amp;#34;EH&amp;#34; &amp;#34;ER&amp;#34; &amp;#34;EY&amp;#34; &amp;#34;F&amp;#34; &amp;#34;G&amp;#34; &amp;#34;HH&amp;#34; &amp;#34;IH&amp;#34; &amp;#34;IY&amp;#34; &amp;#34;JH&amp;#34; &amp;#34;K&amp;#34; &amp;#34;L&amp;#34; &amp;#34;M&amp;#34; &amp;#34;N&amp;#34; &amp;#34;NG&amp;#34; &amp;#34;OW&amp;#34; &amp;#34;OY&amp;#34; &amp;#34;P&amp;#34; &amp;#34;R&amp;#34; &amp;#34;S&amp;#34; &amp;#34;SH&amp;#34; &amp;#34;T&amp;#34; &amp;#34;TH&amp;#34; &amp;#34;UH&amp;#34; &amp;#34;UW&amp;#34; &amp;#34;V&amp;#34; &amp;#34;W&amp;#34; &amp;#34;Y&amp;#34; &amp;#34;Z&amp;#34; &amp;#34;ZH&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, I think we will want a Set of phonemes, instead of a list, since there is really no order to these entries.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(set (take-nth &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; (mapcat &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;clojure.string/split&lt;/span&gt; % &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\t&amp;#34;&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;clojure.string/split-lines&lt;/span&gt; (slurp &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;resources/cmudict-0.7b.phones&amp;#34;&lt;/span&gt;)))))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#{&amp;#34;T&amp;#34; &amp;#34;CH&amp;#34; &amp;#34;K&amp;#34; &amp;#34;HH&amp;#34; &amp;#34;UH&amp;#34; &amp;#34;AY&amp;#34; &amp;#34;AH&amp;#34; &amp;#34;OW&amp;#34; &amp;#34;L&amp;#34; &amp;#34;JH&amp;#34; &amp;#34;UW&amp;#34; &amp;#34;G&amp;#34; &amp;#34;EH&amp;#34; &amp;#34;M&amp;#34; &amp;#34;OY&amp;#34; &amp;#34;S&amp;#34; &amp;#34;Y&amp;#34; &amp;#34;EY&amp;#34; &amp;#34;Z&amp;#34; &amp;#34;R&amp;#34; &amp;#34;F&amp;#34; &amp;#34;AW&amp;#34; &amp;#34;IY&amp;#34; &amp;#34;B&amp;#34; &amp;#34;SH&amp;#34; &amp;#34;P&amp;#34; &amp;#34;V&amp;#34; &amp;#34;TH&amp;#34; &amp;#34;IH&amp;#34; &amp;#34;AA&amp;#34; &amp;#34;AO&amp;#34; &amp;#34;N&amp;#34; &amp;#34;DH&amp;#34; &amp;#34;W&amp;#34; &amp;#34;ZH&amp;#34; &amp;#34;NG&amp;#34; &amp;#34;D&amp;#34; &amp;#34;ER&amp;#34; &amp;#34;AE&amp;#34;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That looks pretty good, let&amp;rsquo;s save it into a variable:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;def &lt;/span&gt;phonemes (set (take-nth &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; (mapcat &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;clojure.string/split&lt;/span&gt; % &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\t&amp;#34;&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;clojure.string/split-lines&lt;/span&gt; (slurp &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;resources/cmudict-0.7b.phones&amp;#34;&lt;/span&gt;))))))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#&amp;#39;user/phonemes
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
 &lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Fixing the &amp;ldquo;nested s-expressions&amp;rdquo; problem&lt;/p&gt;
&lt;p&gt;One ugly thing about the solution we just composed is that every time we want to apply a new function to the previous result, we have to nest that previous result &lt;em&gt;inside&lt;/em&gt; the new function call.
This leads to deeply nested expressions which can be difficult to read.&lt;/p&gt;
&lt;p&gt;Clojure&amp;rsquo;s answer to this problem is called the &amp;ldquo;threading macro&amp;rdquo; &lt;code&gt;-&amp;gt;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The below expression is equivalent to what we created above:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;def &lt;/span&gt;phonemes
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#a6e22e&#34;&gt;-&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   (slurp &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;resources/cmudict-0.7b.phones&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   (&lt;span style=&#34;color:#a6e22e&#34;&gt;clojure.string/split-lines&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   (mapcat &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;clojure.string/split&lt;/span&gt; % &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\t&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   (take-nth &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   (&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;)))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#&amp;#39;user/phonemes
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Dict&lt;/p&gt;
&lt;p&gt;This is the mapping of English words to their phonemes, using the phones described above.&lt;/p&gt;
&lt;p&gt;It begins with a few lines of licensing comments (denoted by &amp;lsquo;;;;&amp;rsquo;).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;;;; # CMUdict  --  Major Version: 0.07
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;;;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;;;; # $HeadURL: http://svn.code.sf.net/p/cmusphinx/code/trunk/cmudict/cmudict-0.7b $
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;;;; # $Date:: 2015-02-18 20:42:08 -0500 (Wed, 18 Feb 2015)      $:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;;;; # $Id:: cmudict-0.7b 12857 2015-02-19 01:42:08Z air         $:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;;;; # $Rev:: 12857                                              $:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;;;; # $Author:: air                                             $:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;;;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;;;; #
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;;;; # ========================================================================
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;;;; # Copyright (C) 1993-2015 Carnegie Mellon University. All rights reserved.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;;;; #
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;;;; # Redistribution and use in source and binary forms, with or without
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;;;; # modification, are permitted provided that the following conditions
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;;;; # are met:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;;;; #
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;;;; # 1. Redistributions of source code must retain the above copyright
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;;;; #    notice, this list of conditions and the following disclaimer.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;;;; #    The contents of this file are deemed to be source code.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;;;; #
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;;;; # 2. Redistributions in binary form must reproduce the above copyright
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;;;; #    notice, this list of conditions and the following disclaimer in
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;;;; #    the documentation and/or other materials provided with the
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;;;; #    distribution.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;;;; #
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;;;; # This work was supported in part by funding from the Defense Advanced
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;;;; # Research Projects Agency, the Office of Naval Research and the National
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;;;; # Science Foundation of the United States of America, and by member
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;;;; # companies of the Carnegie Mellon Sphinx Speech Consortium. We acknowledge
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;;;; # the contributions of many volunteers to the expansion and improvement of
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;;;; # this dictionary.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;;;; #
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;;;; # THIS SOFTWARE IS PROVIDED BY CARNEGIE MELLON UNIVERSITY ``AS IS&amp;#39;&amp;#39; AND
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;;;; # ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;;;; # THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;;;; # PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL CARNEGIE MELLON UNIVERSITY
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;;;; # NOR ITS EMPLOYEES BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;;;; # SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;;;; # LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;;;; # DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;;;; # THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;;;; # (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;;;; # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;;;; #
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;;;; # ========================================================================
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;;;; #
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;;;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;;;;  NOTES  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;;;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;;;;  [20080401] (air)  New dict file format introduced
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;;;;   - comments (like this section) are allowed
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;;;;   - file name is major version; vers/rev information is now in the header
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;;;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;;;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;;;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;;;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And then continues to the dictionary itself, &lt;code&gt;cmudict-0.7b&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The first few-dozen lines are actually the phonetic pronunciations of symbols like &amp;ldquo;!&amp;rdquo;, &amp;ldquo;#&amp;rdquo;, etc. so they are a bit strange, but we can still see the structure the dictionary:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;!EXCLAMATION-POINT  EH2 K S K L AH0 M EY1 SH AH0 N P OY2 N T
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;#34;CLOSE-QUOTE  K L OW1 Z K W OW1 T
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;#34;DOUBLE-QUOTE  D AH1 B AH0 L K W OW1 T
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;#34;END-OF-QUOTE  EH1 N D AH0 V K W OW1 T
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;#34;END-QUOTE  EH1 N D K W OW1 T
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You might be asking &amp;ldquo;Why do some of the phonemes have numbers?&amp;rdquo;,
this is meant to indicate which phonemes are stressed, something I want to completely disregard (the whole point of a mondegreen is to stress different phonemes from the statement being deciphered).&lt;/p&gt;
&lt;p&gt;So, when we parse the dictionary, let&amp;rsquo;s make sure not to include those characters:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;def &lt;/span&gt;dictionary-chars &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;^[A-Z&amp;#39;\-\.\_]+&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;normalize-string
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Converts a symbol found in the dictionary to just it&amp;#39;s phonetic part
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  (i.e. no stress)&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  [sym]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (re-find dictionary-chars sym))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;#&amp;lsquo;user/dictionary-chars&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;#&amp;lsquo;user/normalize-string&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;normalize-string&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AH0&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;#34;AH&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s test some examples in the repl to make sure the substitutions produce valid phonemes.
First, we need to get a list of all the lines in the dictionary:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;def &lt;/span&gt;dictionary-lines
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#a6e22e&#34;&gt;-&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (slurp &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;resources/cmudict-0.7b&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   (&lt;span style=&#34;color:#a6e22e&#34;&gt;clojure.string/split-lines&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   (filter (complement &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;.startsWith&lt;/span&gt; % &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;;&amp;#34;&lt;/span&gt;)))))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#&amp;#39;user/dictionary-lines
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(take &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; dictionary-lines)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&amp;#34;!EXCLAMATION-POINT  EH2 K S K L AH0 M EY1 SH AH0 N P OY2 N T&amp;#34; &amp;#34;\&amp;#34;CLOSE-QUOTE  K L OW1 Z K W OW1 T&amp;#34; &amp;#34;\&amp;#34;DOUBLE-QUOTE  D AH1 B AH0 L K W OW1 T&amp;#34; &amp;#34;\&amp;#34;END-OF-QUOTE  EH1 N D AH0 V K W OW1 T&amp;#34; &amp;#34;\&amp;#34;END-QUOTE  EH1 N D K W OW1 T&amp;#34; &amp;#34;\&amp;#34;IN-QUOTES  IH1 N K W OW1 T S&amp;#34; &amp;#34;\&amp;#34;QUOTE  K W OW1 T&amp;#34; &amp;#34;\&amp;#34;UNQUOTE  AH1 N K W OW1 T&amp;#34; &amp;#34;#HASH-MARK  HH AE1 M AA2 R K&amp;#34; &amp;#34;#POUND-SIGN  P AW1 N D S AY2 N&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, what happens when a word has multiple possible pronunciations?
Let&amp;rsquo;s look at the entry for &amp;ldquo;THE&amp;rdquo;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;THE  DH AH0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;THE(1)  DH AH1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;THE(2)  DH IY0
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We need to remove the &lt;code&gt;(1)&lt;/code&gt; and &lt;code&gt;(2)&lt;/code&gt; so that these spellings will be the same.
Luckily, we can normalize the spellings in the same way we normalized the phonemes, by disallowing numerics and parentheses.&lt;/p&gt;
&lt;p&gt;Then, we ought to split the dictionary lines into &lt;code&gt;(spelling phonemes)&lt;/code&gt; pairs, being sure to transform the spellings and phonemes into the normalized form we want (no numbered spellings, and no stress indicators on phonemes):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;def &lt;/span&gt;spellings+phonemes
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (map (&lt;span style=&#34;color:#66d9ef&#34;&gt;fn &lt;/span&gt;[line]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         (&lt;span style=&#34;color:#a6e22e&#34;&gt;-&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          (&lt;span style=&#34;color:#a6e22e&#34;&gt;clojure.string/split&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\s&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;; split lines by space&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          (filter &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;not-empty&lt;/span&gt; %))           &lt;span style=&#34;color:#75715e&#34;&gt;; remove empty strings (from whitespace separation)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          (map normalize-string)            &lt;span style=&#34;color:#75715e&#34;&gt;; normalize&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          (split-at &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)                      &lt;span style=&#34;color:#75715e&#34;&gt;; split into spelling + phonemes&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          ((&lt;span style=&#34;color:#66d9ef&#34;&gt;fn &lt;/span&gt;[[[spelling] phonemes]] [spelling phonemes])))) &lt;span style=&#34;color:#75715e&#34;&gt;; destructure the spelling list&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       dictionary-lines))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#&amp;#39;user/spellings+phonemes
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;rand-nth&lt;/span&gt; spellings+phonemes)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&amp;#34;SOUTHERN&amp;#39;S&amp;#34; (&amp;#34;S&amp;#34; &amp;#34;AH&amp;#34; &amp;#34;DH&amp;#34; &amp;#34;ER&amp;#34; &amp;#34;N&amp;#34; &amp;#34;Z&amp;#34;)]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Much better.
I should check that all the &amp;ldquo;spellings&amp;rdquo; and &amp;ldquo;phonemes&amp;rdquo; are each non-empty, in case there were some other data anomalies I didn&amp;rsquo;t find at the beginning of the file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(filter (&lt;span style=&#34;color:#66d9ef&#34;&gt;fn &lt;/span&gt;[[spelling phonemes]] (or (&lt;span style=&#34;color:#a6e22e&#34;&gt;empty?&lt;/span&gt; spelling) (&lt;span style=&#34;color:#a6e22e&#34;&gt;empty?&lt;/span&gt; phonemes))) spellings+phonemes)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;(EH K S K L AH M EY SH AH N P OY N T)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;(K L OW Z K W OW T)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(D AH B AH L K W OW T)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(EH N D AH V K W OW T)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(EH N D K W OW T)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(IH N K W OW T S)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(K W OW T)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(AH N K W OW T)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(HH AE M AA R K)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(P AW N D S AY N)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(SH AA R P S AY N)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(P ER S EH N T)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(AE M P ER S AE N D)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(B IH G IH N P ER EH N Z)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(IH N P ER EH N TH AH S IY Z)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(L EH F T P ER EH N)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(OW P AH N P ER EH N TH AH S IY Z)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(P ER EH N)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(P ER EH N Z)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(P ER EH N TH AH S IY Z)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(K L OW Z P ER EH N)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(K L OW Z P ER EH N TH AH S IY Z)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(EH N D P ER EH N)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(EH N D P ER EH N Z)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(EH N D P ER EH N TH AH S IY Z)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(EH N D DH AH P ER EH N)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(P ER EH N)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(P ER EH N Z)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(R AY T P EH R AH N)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(AH N P ER EH N TH AH S IY Z)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(P L UH S)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(K AA M AH)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(S L AE SH)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(TH R IY D IY)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(TH R IY D IY)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(K OW L AH N)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(K W EH S CH AH N M AA R K)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(B R EY S)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(L EH F T B R EY S)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(OW P EH N B R EY S)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(K L OW Z B R EY S)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(R AY T B R EY S)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Ah, because those first bunch of entries in the dictionary contain special characters, their spelling maps to &lt;code&gt;nil&lt;/code&gt;. That&amp;rsquo;s fine, we can adjust our definition to simply omit the pairs starting with &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;def &lt;/span&gt;spellings+phonemes
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#a6e22e&#34;&gt;-&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   dictionary-lines
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   (map (&lt;span style=&#34;color:#66d9ef&#34;&gt;fn &lt;/span&gt;[line]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          (&lt;span style=&#34;color:#a6e22e&#34;&gt;-&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           (&lt;span style=&#34;color:#a6e22e&#34;&gt;clojure.string/split&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\s&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;; split lines by space&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           (filter &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;not-empty&lt;/span&gt; %))           &lt;span style=&#34;color:#75715e&#34;&gt;; remove empty strings (from whitespace separation)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           (map normalize-string)            &lt;span style=&#34;color:#75715e&#34;&gt;; normalize&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           (split-at &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)                      &lt;span style=&#34;color:#75715e&#34;&gt;; split into spelling + phonemes&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           ((&lt;span style=&#34;color:#66d9ef&#34;&gt;fn &lt;/span&gt;[[[spelling] phonemes]] [spelling phonemes]))))) &lt;span style=&#34;color:#75715e&#34;&gt;; destructure the spelling list&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   (filter &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;((complement nil?) (first %)))))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#&amp;#39;user/spellings+phonemes
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;homo-phone-graph-s&#34;&gt;Homo[phone|graph]s&lt;/h2&gt;
&lt;p&gt;Something we haven&amp;rsquo;t contended with yet are &lt;em&gt;homophones&lt;/em&gt;, that is, words which have the same pronunciation, but distinct spellings (e.g. red and read).&lt;/p&gt;
&lt;p&gt;Dually, there is the problem of &lt;em&gt;homographs&lt;/em&gt;, that is, words which have the same spelling, but distinct pronunciations (e.g. the &amp;ldquo;long-e&amp;rdquo; read and the &amp;ldquo;short-e&amp;rdquo; read).&lt;/p&gt;
&lt;p&gt;Our dictionary has entries of each kind, let&amp;rsquo;s check them out&lt;/p&gt;
&lt;h3 id=&#34;homophones&#34;&gt;Homophones&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s look at homophones first.
Finding these things is not actually a trivial thing with such a large data set.
A naive solution might go through each entry and check the rest of the list to see if that spelling occurs again.&lt;/p&gt;
&lt;p&gt;However, because &lt;code&gt;spellings+phonemes&lt;/code&gt; is a list, this would mean &lt;code&gt;n&lt;/code&gt; comparisons for each of the &lt;code&gt;n&lt;/code&gt; entries, that&amp;rsquo;s &lt;code&gt;O(n^2)&lt;/code&gt;, and in this case &lt;code&gt;n&lt;/code&gt; is a large number (all words in the English dictionary), so that&amp;rsquo;s not quite going to work out for us.&lt;/p&gt;
&lt;p&gt;Luckily this is a &lt;em&gt;classic&lt;/em&gt; algorithms problem, and probably, like, question 3 on hackerrank or leetcode. I&amp;rsquo;ll spoil it for you.&lt;/p&gt;
&lt;p&gt;The answer is to use a map.&lt;/p&gt;
&lt;p&gt;As we traverse the list of &lt;code&gt;[spelling phonemes]&lt;/code&gt;, we insert each &lt;code&gt;spelling&lt;/code&gt; as the key of a map (ostensibly a constant-time operation), and use the &lt;code&gt;[phonemes]&lt;/code&gt; as the value. If we find another &lt;code&gt;spelling&lt;/code&gt; which is exactly the same, the key will match in our list, and we can append the newer &lt;code&gt;phonemes&lt;/code&gt; to the value.&lt;/p&gt;
&lt;p&gt;Clojure has an awesome standard library, and maps are bread-and-butter Clojure data structures, so I can avoid the whole &amp;ldquo;look up the key in the map, if it does not exist insert an array, otherwise append to that array&amp;rdquo; by using the standard function &lt;code&gt;merge-with&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the clojuredoc for &lt;code&gt;merge-with&lt;/code&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;clojure.core/merge-with
[f &amp;amp; maps]
Added in 1.0
Returns a map that consists of the rest of the maps conj-ed onto
the first.  If a key occurs in more than one map, the mapping(s)
from the latter (left-to-right) will be combined with the mapping in
the result by calling (f val-in-result val-in-latter).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ok, so how am I going to use this function to solve my problem?
I am going to convert each &lt;code&gt;[spelling phonemes]&lt;/code&gt; pair (which at this point more accurately represents a &lt;code&gt;[spelling pronunciation]&lt;/code&gt; pair) into a map of &lt;code&gt;{spelling [pronunciation]}&lt;/code&gt;, and then merge &lt;em&gt;all of those maps&lt;/em&gt; using the &lt;code&gt;into&lt;/code&gt; function to conjoin all the &lt;code&gt;[pronunciations]&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(into [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] [&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[1 2 3 4 5 6]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s try it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;rand-nth&lt;/span&gt; (map (&lt;span style=&#34;color:#66d9ef&#34;&gt;fn &lt;/span&gt; [[spelling pronunciation]] {spelling [pronunciation]}) spellings+phonemes))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&amp;#34;HUGGED&amp;#34; [(&amp;#34;HH&amp;#34; &amp;#34;AH&amp;#34; &amp;#34;G&amp;#34; &amp;#34;D&amp;#34;)]}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Cool, so now we have a list of maps with 1 key-value pair each, we have to &lt;code&gt;reduce&lt;/code&gt; that to a single map with &lt;code&gt;merge-with&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;def &lt;/span&gt;word-&amp;gt;pronunciations
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#a6e22e&#34;&gt;reduce&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   (partial merge-with into)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   (map (&lt;span style=&#34;color:#66d9ef&#34;&gt;fn &lt;/span&gt; [[spelling pronunciation]] {spelling [pronunciation]}) spellings+phonemes)))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#&amp;#39;user/word-&amp;gt;pronunciations
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;.get&lt;/span&gt; word-&amp;gt;pronunciations &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ICE&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;.get&lt;/span&gt; word-&amp;gt;pronunciations &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CREAM&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;[(&amp;ldquo;AY&amp;rdquo; &amp;ldquo;S&amp;rdquo;)]&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;[(&amp;ldquo;K&amp;rdquo; &amp;ldquo;R&amp;rdquo; &amp;ldquo;IY&amp;rdquo; &amp;ldquo;M&amp;rdquo;)]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Hooray! We can now find the pronunciation for any English word.&lt;/p&gt;
&lt;h4 id=&#34;exploring-the-pronunciations&#34;&gt;Exploring the pronunciations&lt;/h4&gt;
&lt;p&gt;Let&amp;rsquo;s see if we can get a word with multiple pronunciations:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;rand-nth&lt;/span&gt; (filter (&lt;span style=&#34;color:#66d9ef&#34;&gt;fn &lt;/span&gt;[[k v]] (&amp;gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;.length&lt;/span&gt; v) &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)) word-&amp;gt;pronunciations))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&amp;#34;AYDAR&amp;#34; [(&amp;#34;AY&amp;#34; &amp;#34;D&amp;#34; &amp;#34;AA&amp;#34; &amp;#34;R&amp;#34;) (&amp;#34;EY&amp;#34; &amp;#34;D&amp;#34; &amp;#34;AA&amp;#34; &amp;#34;R&amp;#34;)]]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Hmm, I&amp;rsquo;m curious which word has the most pronunciations?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;[maxlen (apply max (map (&lt;span style=&#34;color:#66d9ef&#34;&gt;fn &lt;/span&gt;[[k v]] (&lt;span style=&#34;color:#a6e22e&#34;&gt;.length&lt;/span&gt; v)) word-&amp;gt;pronunciations))]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (filter (&lt;span style=&#34;color:#66d9ef&#34;&gt;fn &lt;/span&gt;[[k v]] (&lt;span style=&#34;color:#a6e22e&#34;&gt;.equals&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;.length&lt;/span&gt; v) maxlen)) word-&amp;gt;pronunciations))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;([&amp;#34;M&amp;#34; [(&amp;#34;EH&amp;#34; &amp;#34;M&amp;#34;) (&amp;#34;EH&amp;#34; &amp;#34;M&amp;#34; &amp;#34;W&amp;#34; &amp;#34;AH&amp;#34; &amp;#34;N&amp;#34;) (&amp;#34;EH&amp;#34; &amp;#34;M&amp;#34; &amp;#34;T&amp;#34; &amp;#34;UW&amp;#34;) (&amp;#34;EH&amp;#34; &amp;#34;M&amp;#34; &amp;#34;TH&amp;#34; &amp;#34;R&amp;#34; &amp;#34;IY&amp;#34;) (&amp;#34;EH&amp;#34; &amp;#34;M&amp;#34; &amp;#34;F&amp;#34; &amp;#34;AO&amp;#34; &amp;#34;R&amp;#34;) (&amp;#34;EH&amp;#34; &amp;#34;M&amp;#34; &amp;#34;F&amp;#34; &amp;#34;AY&amp;#34; &amp;#34;V&amp;#34;)]] [&amp;#34;C&amp;#34; [(&amp;#34;S&amp;#34; &amp;#34;IY&amp;#34;) (&amp;#34;S&amp;#34; &amp;#34;IY&amp;#34; &amp;#34;W&amp;#34; &amp;#34;AH&amp;#34; &amp;#34;N&amp;#34;) (&amp;#34;S&amp;#34; &amp;#34;IY&amp;#34; &amp;#34;T&amp;#34; &amp;#34;UW&amp;#34;) (&amp;#34;S&amp;#34; &amp;#34;IY&amp;#34; &amp;#34;TH&amp;#34; &amp;#34;R&amp;#34; &amp;#34;IY&amp;#34;) (&amp;#34;S&amp;#34; &amp;#34;IY&amp;#34; &amp;#34;F&amp;#34; &amp;#34;AO&amp;#34; &amp;#34;R&amp;#34;) (&amp;#34;S&amp;#34; &amp;#34;IY&amp;#34; &amp;#34;F&amp;#34; &amp;#34;AY&amp;#34; &amp;#34;V&amp;#34;)]])
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Oh, I guess &amp;ldquo;M1&amp;rdquo;, &amp;ldquo;M2&amp;rdquo;, &amp;ldquo;M3&amp;rdquo;&amp;hellip; and &amp;ldquo;C1&amp;rdquo;, &amp;ldquo;C2&amp;rdquo;, &amp;ldquo;C3&amp;rdquo; &amp;hellip; are all valid words in the dictionary and I broke them by removing the numbers. Whatever.&lt;/p&gt;
&lt;p&gt;How about the next-most pronunciations?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;[maxlen (apply max (map (&lt;span style=&#34;color:#66d9ef&#34;&gt;fn &lt;/span&gt;[[k v]] (&lt;span style=&#34;color:#a6e22e&#34;&gt;.length&lt;/span&gt; v)) word-&amp;gt;pronunciations))]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (filter (&lt;span style=&#34;color:#66d9ef&#34;&gt;fn &lt;/span&gt;[[k v]] (= (&lt;span style=&#34;color:#a6e22e&#34;&gt;.length&lt;/span&gt; v) (- maxlen &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))) word-&amp;gt;pronunciations))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;([&amp;#34;CAT-&amp;#34; [(&amp;#34;K&amp;#34; &amp;#34;AE&amp;#34; &amp;#34;T&amp;#34; &amp;#34;W&amp;#34; &amp;#34;AO&amp;#34; &amp;#34;N&amp;#34;) (&amp;#34;K&amp;#34; &amp;#34;AE&amp;#34; &amp;#34;T&amp;#34; &amp;#34;T&amp;#34; &amp;#34;UW&amp;#34;) (&amp;#34;K&amp;#34; &amp;#34;AE&amp;#34; &amp;#34;T&amp;#34; &amp;#34;TH&amp;#34; &amp;#34;R&amp;#34; &amp;#34;IY&amp;#34;) (&amp;#34;K&amp;#34; &amp;#34;AE&amp;#34; &amp;#34;T&amp;#34; &amp;#34;F&amp;#34; &amp;#34;AO&amp;#34; &amp;#34;R&amp;#34;) (&amp;#34;K&amp;#34; &amp;#34;AE&amp;#34; &amp;#34;T&amp;#34; &amp;#34;S&amp;#34; &amp;#34;IH&amp;#34; &amp;#34;K&amp;#34; &amp;#34;S&amp;#34;)]])
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Hurricanes, cool. Again, I removed the numeric value from the word itself, but that shouldn&amp;rsquo;t really matter.&lt;/p&gt;
&lt;p&gt;I want to find the first real word though&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;[maxlen (apply max (map (&lt;span style=&#34;color:#66d9ef&#34;&gt;fn &lt;/span&gt;[[k v]] (&lt;span style=&#34;color:#a6e22e&#34;&gt;.length&lt;/span&gt; v)) word-&amp;gt;pronunciations))]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (take &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; (filter (&lt;span style=&#34;color:#66d9ef&#34;&gt;fn &lt;/span&gt;[[k v]] (= (&lt;span style=&#34;color:#a6e22e&#34;&gt;.length&lt;/span&gt; v) (- maxlen &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;))) word-&amp;gt;pronunciations)))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;([&amp;#34;GRANTED&amp;#34; [(&amp;#34;G&amp;#34; &amp;#34;R&amp;#34; &amp;#34;AE&amp;#34; &amp;#34;N&amp;#34; &amp;#34;T&amp;#34; &amp;#34;AH&amp;#34; &amp;#34;D&amp;#34;) (&amp;#34;G&amp;#34; &amp;#34;R&amp;#34; &amp;#34;AE&amp;#34; &amp;#34;N&amp;#34; &amp;#34;T&amp;#34; &amp;#34;IH&amp;#34; &amp;#34;D&amp;#34;) (&amp;#34;G&amp;#34; &amp;#34;R&amp;#34; &amp;#34;AE&amp;#34; &amp;#34;N&amp;#34; &amp;#34;AH&amp;#34; &amp;#34;D&amp;#34;) (&amp;#34;G&amp;#34; &amp;#34;R&amp;#34; &amp;#34;AE&amp;#34; &amp;#34;N&amp;#34; &amp;#34;IH&amp;#34; &amp;#34;D&amp;#34;)]])
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is pretty interesting! The last two pronunciations completely omit the &amp;ldquo;T&amp;rdquo; sound from &amp;ldquo;GRANTED&amp;rdquo;, which is known linguistically as &lt;em&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Elision&#34;&gt;elision&lt;/a&gt;&lt;/em&gt;.
We say that the &amp;ldquo;T&amp;rdquo; was &lt;em&gt;elided&lt;/em&gt; from the pronunciation of &amp;ldquo;GRANTED&amp;rdquo;.&lt;/p&gt;
&lt;h4 id=&#34;what-makes-a-map&#34;&gt;What makes a Map?&lt;/h4&gt;
&lt;p&gt;Why did I name our data structure &lt;code&gt;word-&amp;gt;pronunciations&lt;/code&gt;?
The &lt;code&gt;A-&amp;gt;B&lt;/code&gt; naming convention is common in Lisp-like languages to describe functions which map one data type to another, but what we&amp;rsquo;ve created is supposed to be a map, not a function, right?
Well, Clojure doesn&amp;rsquo;t make the distinction so severe, since the map data structure is basically a function that converts from the &lt;code&gt;key&lt;/code&gt; type to the &lt;code&gt;value&lt;/code&gt; type.&lt;/p&gt;
&lt;p&gt;In most languages, (like JavaScript), if you want to get a value out of a map (object in JavaScript), you have to write code that looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;my_map&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and to call a function you have to write code that looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;my_function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;but in Clojure, if you have a map, you can call it like you would a function (since it &lt;em&gt;is&lt;/em&gt; a function):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;({&lt;span style=&#34;color:#e6db74&#34;&gt;:a&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;} &lt;span style=&#34;color:#e6db74&#34;&gt;:a&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We are using this fact to our advantage in our definition of &lt;code&gt;word-&amp;gt;pronunciations&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; A map is a data structure (object)...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;.get&lt;/span&gt; word-&amp;gt;pronunciations &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ICE&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; ...but also a function!&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;word-&amp;gt;pronunciations&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ICE&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;[(&amp;ldquo;AY&amp;rdquo; &amp;ldquo;S&amp;rdquo;)]&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;[(&amp;ldquo;AY&amp;rdquo; &amp;ldquo;S&amp;rdquo;)]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;homographs&#34;&gt;Homographs&lt;/h3&gt;
&lt;p&gt;Now, homographs are a very similar problem, except in reverse. This time, we want words which have the same pronunciation to be associated.&lt;/p&gt;
&lt;p&gt;Lucky for us, Clojure&amp;rsquo;s maps and lists are fantastic data structures, and compose beautifully.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(= &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AY&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;S&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AY&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;S&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;true
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is awesome. If two lists contain the same strings, then they&amp;rsquo;re treated as equivalent!&lt;/p&gt;
&lt;p&gt;JavaScript (arrays, since there are no &amp;ldquo;lists&amp;rdquo;) is not so friendly:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AY&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;S&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AY&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;S&amp;#34;&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AY&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;S&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AY&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;S&amp;#34;&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;false
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;false
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;undefined
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The implication here is that our lists &lt;strong&gt;will collide in our map&lt;/strong&gt;, meaning to get a function mapping &lt;code&gt;pronunciation-&amp;gt;words&lt;/code&gt;, all we need to do is reverse the keys and values:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;def &lt;/span&gt;pronunciation-&amp;gt;words
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#a6e22e&#34;&gt;reduce&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   (partial merge-with into)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   (map (&lt;span style=&#34;color:#66d9ef&#34;&gt;fn &lt;/span&gt; [[spelling pronunciation]] {pronunciation [spelling]}) spellings+phonemes)))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#&amp;#39;user/pronunciation-&amp;gt;words
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;pronunciation-&amp;gt;words&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AY&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;S&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&amp;#34;ICE&amp;#34;]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;sentence-pronunciations&#34;&gt;&lt;code&gt;sentence-&amp;gt;pronunciations&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Now that we can go from a word to a list of pronunciations (&lt;code&gt;word-&amp;gt;pronunciation&lt;/code&gt;), it shouldn&amp;rsquo;t be too hard to go from a list of words (AKA a sentence) to a list of pronunciations (&lt;code&gt;sentence-&amp;gt;pronunciations&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;The only complication: what should we do if a word has multiple pronunciations? How should you pronounce that sentence?&lt;/p&gt;
&lt;p&gt;Well, each time a word has multiple pronunciations, we should probably return a new pronunciation for the whole sentence.
The word &amp;ldquo;READ&amp;rdquo; has 2 pronunciations:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;word-&amp;gt;pronunciations&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;READ&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[(&amp;#34;R&amp;#34; &amp;#34;EH&amp;#34; &amp;#34;D&amp;#34;) (&amp;#34;R&amp;#34; &amp;#34;IY&amp;#34; &amp;#34;D&amp;#34;)]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So the (nonsensical) sentence &amp;ldquo;READ READ&amp;rdquo; should produce 4 pronunciations:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&amp;#34;R&amp;#34; &amp;#34;EH&amp;#34; &amp;#34;D&amp;#34; &amp;#34;R&amp;#34; &amp;#34;EH&amp;#34; &amp;#34;D&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&amp;#34;R&amp;#34; &amp;#34;EH&amp;#34; &amp;#34;D&amp;#34; &amp;#34;R&amp;#34; &amp;#34;IY&amp;#34; &amp;#34;D&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&amp;#34;R&amp;#34; &amp;#34;IY&amp;#34; &amp;#34;D&amp;#34; &amp;#34;R&amp;#34; &amp;#34;EH&amp;#34; &amp;#34;D&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&amp;#34;R&amp;#34; &amp;#34;IY&amp;#34; &amp;#34;D&amp;#34; &amp;#34;R&amp;#34; &amp;#34;IY&amp;#34; &amp;#34;D&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This type of combination is a &lt;em&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Cartesian_product&#34;&gt;cartesian product&lt;/a&gt;&lt;/em&gt;, and Clojure has an implementation built into the &lt;code&gt;clojure.math.combinatorics&lt;/code&gt; &lt;a href=&#34;https://github.com/clojure/math.combinatorics&#34;&gt;namespace&lt;/a&gt;.
Unfortunately that namespace needs to be included as a leiningen dependency, and I haven&amp;rsquo;t figured out yet how to get that to work correctly with the literate programming environment I&amp;rsquo;m using (org-babel), so I&amp;rsquo;ll just include a cartesian-product function in this script&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;cart [colls]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Cartesian product on the list of collections&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;empty?&lt;/span&gt; colls)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (for [more (&lt;span style=&#34;color:#a6e22e&#34;&gt;cart&lt;/span&gt; (rest colls))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          x (first colls)]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      (cons x more))))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#&amp;#39;user/cart
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;cart&lt;/span&gt; [[]])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;cart&lt;/span&gt; [[] [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;cart&lt;/span&gt; [[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;cart&lt;/span&gt; [[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;cart&lt;/span&gt; [[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;cart&lt;/span&gt; [[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] [&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;]])
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;()&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;((1 2))&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;((1 2) (3 2))&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;((1 2) (3 2) (1 4) (3 4))&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;((1 2 5) (3 2 5) (1 4 5) (3 4 5) (1 2 6) (3 2 6) (1 4 6) (3 4 6))&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Given this definition, the pronunciations of a sentence are merely the cartesian product of the pronunciations of all the words (normalized to capital letters and split by spaces, of course):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;sentence-&amp;gt;words
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  [sentence]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#a6e22e&#34;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   sentence
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   (&lt;span style=&#34;color:#a6e22e&#34;&gt;clojure.string/upper-case&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   (&lt;span style=&#34;color:#a6e22e&#34;&gt;clojure.string/split&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\s&amp;#34;&lt;/span&gt;)))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#&amp;#39;user/sentence-&amp;gt;words
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sentence-&amp;gt;words&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Luke I am your father.&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&amp;#34;LUKE&amp;#34; &amp;#34;I&amp;#34; &amp;#34;AM&amp;#34; &amp;#34;YOUR&amp;#34; &amp;#34;FATHER.&amp;#34;]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;sentence-&amp;gt;pronunciation
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  [sentence]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#a6e22e&#34;&gt;cart&lt;/span&gt; (map word-&amp;gt;pronunciations (&lt;span style=&#34;color:#a6e22e&#34;&gt;sentence-&amp;gt;words&lt;/span&gt; sentence))))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#&amp;#39;user/sentence-&amp;gt;pronunciation
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sentence-&amp;gt;pronunciation&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;READ READ&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(((&amp;#34;R&amp;#34; &amp;#34;EH&amp;#34; &amp;#34;D&amp;#34;) (&amp;#34;R&amp;#34; &amp;#34;EH&amp;#34; &amp;#34;D&amp;#34;)) ((&amp;#34;R&amp;#34; &amp;#34;IY&amp;#34; &amp;#34;D&amp;#34;) (&amp;#34;R&amp;#34; &amp;#34;EH&amp;#34; &amp;#34;D&amp;#34;)) ((&amp;#34;R&amp;#34; &amp;#34;EH&amp;#34; &amp;#34;D&amp;#34;) (&amp;#34;R&amp;#34; &amp;#34;IY&amp;#34; &amp;#34;D&amp;#34;)) ((&amp;#34;R&amp;#34; &amp;#34;IY&amp;#34; &amp;#34;D&amp;#34;) (&amp;#34;R&amp;#34; &amp;#34;IY&amp;#34; &amp;#34;D&amp;#34;)))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Actually, we should flatten each of those results as well, to get a list of strings instead:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;sentence-&amp;gt;pronunciation
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  [sentence]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (map flatten (&lt;span style=&#34;color:#a6e22e&#34;&gt;cart&lt;/span&gt; (map word-&amp;gt;pronunciations (&lt;span style=&#34;color:#a6e22e&#34;&gt;sentence-&amp;gt;words&lt;/span&gt; sentence)))))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#&amp;#39;user/sentence-&amp;gt;pronunciation
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sentence-&amp;gt;pronunciation&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;READ READ&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;R&lt;/th&gt;
&lt;th&gt;EH&lt;/th&gt;
&lt;th&gt;D&lt;/th&gt;
&lt;th&gt;R&lt;/th&gt;
&lt;th&gt;EH&lt;/th&gt;
&lt;th&gt;D&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;R&lt;/td&gt;
&lt;td&gt;IY&lt;/td&gt;
&lt;td&gt;D&lt;/td&gt;
&lt;td&gt;R&lt;/td&gt;
&lt;td&gt;EH&lt;/td&gt;
&lt;td&gt;D&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;R&lt;/td&gt;
&lt;td&gt;EH&lt;/td&gt;
&lt;td&gt;D&lt;/td&gt;
&lt;td&gt;R&lt;/td&gt;
&lt;td&gt;IY&lt;/td&gt;
&lt;td&gt;D&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;R&lt;/td&gt;
&lt;td&gt;IY&lt;/td&gt;
&lt;td&gt;D&lt;/td&gt;
&lt;td&gt;R&lt;/td&gt;
&lt;td&gt;IY&lt;/td&gt;
&lt;td&gt;D&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sentence-&amp;gt;pronunciation&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Please not while I&amp;#39;m eating&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;P&lt;/th&gt;
&lt;th&gt;L&lt;/th&gt;
&lt;th&gt;IY&lt;/th&gt;
&lt;th&gt;Z&lt;/th&gt;
&lt;th&gt;N&lt;/th&gt;
&lt;th&gt;AA&lt;/th&gt;
&lt;th&gt;T&lt;/th&gt;
&lt;th&gt;W&lt;/th&gt;
&lt;th&gt;AY&lt;/th&gt;
&lt;th&gt;L&lt;/th&gt;
&lt;th&gt;AY&lt;/th&gt;
&lt;th&gt;M&lt;/th&gt;
&lt;th&gt;IY&lt;/th&gt;
&lt;th&gt;T&lt;/th&gt;
&lt;th&gt;IH&lt;/th&gt;
&lt;th&gt;NG&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;P&lt;/td&gt;
&lt;td&gt;L&lt;/td&gt;
&lt;td&gt;IY&lt;/td&gt;
&lt;td&gt;Z&lt;/td&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;td&gt;AA&lt;/td&gt;
&lt;td&gt;T&lt;/td&gt;
&lt;td&gt;HH&lt;/td&gt;
&lt;td&gt;W&lt;/td&gt;
&lt;td&gt;AY&lt;/td&gt;
&lt;td&gt;L&lt;/td&gt;
&lt;td&gt;AY&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;IY&lt;/td&gt;
&lt;td&gt;T&lt;/td&gt;
&lt;td&gt;IH&lt;/td&gt;
&lt;td&gt;NG&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P&lt;/td&gt;
&lt;td&gt;L&lt;/td&gt;
&lt;td&gt;IY&lt;/td&gt;
&lt;td&gt;Z&lt;/td&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;td&gt;AA&lt;/td&gt;
&lt;td&gt;T&lt;/td&gt;
&lt;td&gt;W&lt;/td&gt;
&lt;td&gt;AY&lt;/td&gt;
&lt;td&gt;L&lt;/td&gt;
&lt;td&gt;AH&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;IY&lt;/td&gt;
&lt;td&gt;T&lt;/td&gt;
&lt;td&gt;IH&lt;/td&gt;
&lt;td&gt;NG&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P&lt;/td&gt;
&lt;td&gt;L&lt;/td&gt;
&lt;td&gt;IY&lt;/td&gt;
&lt;td&gt;Z&lt;/td&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;td&gt;AA&lt;/td&gt;
&lt;td&gt;T&lt;/td&gt;
&lt;td&gt;HH&lt;/td&gt;
&lt;td&gt;W&lt;/td&gt;
&lt;td&gt;AY&lt;/td&gt;
&lt;td&gt;L&lt;/td&gt;
&lt;td&gt;AH&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;IY&lt;/td&gt;
&lt;td&gt;T&lt;/td&gt;
&lt;td&gt;IH&lt;/td&gt;
&lt;td&gt;NG&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;pronunciation-sentence&#34;&gt;&lt;code&gt;pronunciation-&amp;gt;sentence&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Now that we can generate the pronunciation of a sentence, we will want to be able to go from a pronunciation to a sentence.&lt;/p&gt;
&lt;p&gt;The way I imagine the mondegreen generator working is roughly:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sentence -&amp;gt; pronunciation -&amp;gt; sentence
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;where the first &lt;code&gt;sentence&lt;/code&gt; and last &lt;code&gt;sentence&lt;/code&gt; are different.
Consider the classic:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;I scream -&amp;gt; ice cream
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As we can see, their pronunciations match exactly:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sentence-&amp;gt;pronunciation&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;I scream&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sentence-&amp;gt;pronunciation&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ice cream&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;((&amp;ldquo;AY&amp;rdquo; &amp;ldquo;S&amp;rdquo; &amp;ldquo;K&amp;rdquo; &amp;ldquo;R&amp;rdquo; &amp;ldquo;IY&amp;rdquo; &amp;ldquo;M&amp;rdquo;))&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;((&amp;ldquo;AY&amp;rdquo; &amp;ldquo;S&amp;rdquo; &amp;ldquo;K&amp;rdquo; &amp;ldquo;R&amp;rdquo; &amp;ldquo;IY&amp;rdquo; &amp;ldquo;M&amp;rdquo;))&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;So how can we go from that representation to either of the two sentences?&lt;/p&gt;
&lt;h3 id=&#34;trie&#34;&gt;Trie&lt;/h3&gt;
&lt;p&gt;What we will need is a way to, given a phoneme, get a list of the possible phonemes which are &lt;strong&gt;part of a valid English word&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;So, if given just &lt;code&gt;&amp;quot;AY&amp;quot;&lt;/code&gt;, this function should tell us that, indeed &lt;code&gt;&amp;quot;AY&amp;quot;&lt;/code&gt; is part of the valid word &lt;code&gt;I&lt;/code&gt;, but &lt;em&gt;also&lt;/em&gt; that &lt;code&gt;&amp;quot;S&amp;quot;&lt;/code&gt; is a valid continuation after &lt;code&gt;&amp;quot;AY&amp;quot;&lt;/code&gt; (since &lt;code&gt;&amp;quot;S&amp;quot;&lt;/code&gt; is the next phoneme in &lt;code&gt;&amp;quot;ICE&amp;quot;&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;I think it was my freshman-year &lt;em&gt;Fundamentals of Computer Programming&lt;/em&gt; professor &lt;a href=&#34;https://www.ccs.neu.edu/home/shivers/&#34;&gt;Olin Shivers&lt;/a&gt; (but he might have been quoting someone) who said (and I&amp;rsquo;m probably poorly paraphrasing):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Your data structures must be smart so your algorithms can be dumb.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I thought this was a &lt;em&gt;&lt;a href=&#34;http://www.cs.yale.edu/homes/perlis-alan/quotes.html&#34;&gt;perlism&lt;/a&gt;&lt;/em&gt; (whom professor Shivers was fond of), but I couldn&amp;rsquo;t find it in the list.&lt;/p&gt;
&lt;p&gt;Well, what we want here is a data structure which is smart enough to answer our question.&lt;/p&gt;
&lt;p&gt;I immediately considered the &lt;em&gt;trie&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s awesome, just a nested map, but powerful enough to be the core data structure powering &lt;a href=&#34;https://lucene.apache.org/&#34;&gt;Lucene&lt;/a&gt; (which in turn &lt;a href=&#34;https://www.endava.com/en/blog/Engineering/2021/Elasticsearch-and-apache-lucene-fundamentals-behind-the-relevance-score&#34;&gt;powers ElasticSearch&lt;/a&gt;).
Tries are all about &lt;em&gt;re(trie)val&lt;/em&gt;, they retrieve information based on partial data.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://mjdiloreto.github.io/ox-hugo/2021-12-27_17-59-32_.jpeg&#34; alt=&#34;&#34;&gt;
(excuse the German, it was the best diagram I could find on DuckDuckGo)&lt;/p&gt;
&lt;p&gt;Our trie will be a potentially 26-ary tree (one for each possible next letter), which we will choose to represent as nested maps, with nodes representing either letters or complete terms.&lt;/p&gt;
&lt;p&gt;In our case though, the nodes won&amp;rsquo;t be letters, but phonemes!
That way, we can traverse the trie, looking for the next phoneme in our sentence.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s try constructing the trie.
We can use the same map-merging trick we used to create &lt;code&gt;word-&amp;gt;phonemes&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I want to create the following map for the word &amp;ldquo;READ&amp;rdquo;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{ &amp;#34;R&amp;#34; { &amp;#34;EH&amp;#34; { &amp;#34;D&amp;#34; &amp;#34;What to associate here?&amp;#34; }}}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This should embed the phoneme structure, but when we actually finish a word we have to indicate that, while not blocking any further phonemes.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll choose to use the keyword &lt;code&gt;:word&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{ &amp;#34;R&amp;#34; { &amp;#34;EH&amp;#34; { &amp;#34;D&amp;#34; { :word &amp;#34;RED&amp;#34; &amp;#34;IY&amp;#34; { :word &amp;#34;READY&amp;#34; ... more phonemes ... } } }}}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;word-&amp;gt;nested-map
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  [phones word]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;empty?&lt;/span&gt; phones)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    { &lt;span style=&#34;color:#e6db74&#34;&gt;:word&lt;/span&gt; word }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    { &lt;span style=&#34;color:#e6db74&#34;&gt;:word&lt;/span&gt; nil
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      (first phones) (&lt;span style=&#34;color:#a6e22e&#34;&gt;word-&amp;gt;nested-map&lt;/span&gt; (rest phones) word)}))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#&amp;#39;user/word-&amp;gt;nested-map
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;word-&amp;gt;nested-map&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;R&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;EH&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;D&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RED&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{:word , &amp;#34;R&amp;#34; {:word , &amp;#34;EH&amp;#34; {:word , &amp;#34;D&amp;#34; {:word &amp;#34;RED&amp;#34;}}}}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now to merge.&lt;/p&gt;
&lt;p&gt;Unfortunately Clojure&amp;rsquo;s &lt;code&gt;merge-with&lt;/code&gt; function only works for a single level of map, but we will want to &lt;code&gt;deep-merge&lt;/code&gt; them.
Actually, we&amp;rsquo;ll have to &lt;code&gt;deep-merge-with&lt;/code&gt; them, since some of the phoneme maps are bound to collide.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m not above using other people&amp;rsquo;s code, and the &lt;a href=&#34;https://clojuredocs.org&#34;&gt;clojuredocs&lt;/a&gt; website has awesome comments with community suggestions.
I pulled this implementation from the comments on the built-in &lt;code&gt;merge-with&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;deep-merge-with
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://clojuredocs.org/clojure.core/merge-with#example-5b80843ae4b00ac801ed9e74
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  Like merge-with, but merges maps recursively, applying the given fn
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  only when there&amp;#39;s a non-map at a particular level.&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  [f &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; maps]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#a6e22e&#34;&gt;apply&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   (&lt;span style=&#34;color:#66d9ef&#34;&gt;fn &lt;/span&gt;m [&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; maps]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(every? map? maps)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       (apply merge-with m maps)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       (apply f maps)))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   maps))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#&amp;#39;user/deep-merge-with
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;deep-merge-with&lt;/span&gt; + {&lt;span style=&#34;color:#e6db74&#34;&gt;:a&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;:b&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;:c&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:d&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;:x&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:y&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;}} &lt;span style=&#34;color:#e6db74&#34;&gt;:e&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;} &lt;span style=&#34;color:#e6db74&#34;&gt;:f&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   {&lt;span style=&#34;color:#e6db74&#34;&gt;:a&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;:b&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;:c&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:d&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;:z&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;} &lt;span style=&#34;color:#e6db74&#34;&gt;:z&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;} &lt;span style=&#34;color:#e6db74&#34;&gt;:e&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;}})
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{:a {:b {:c 3, :d {:x 1, :y 2, :z 9}, :z 3}, :e 103}, :f 4}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, we will also need a way to handle our &lt;em&gt;homophones&lt;/em&gt;, so &lt;code&gt;:word&lt;/code&gt; will actually have to be an array, and the function we &lt;code&gt;merge-with&lt;/code&gt; will have to be able to handle insert into that array.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;merge-with-nil
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  [a b]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (cond (nil? a) b
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        (nil? b) a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;:else&lt;/span&gt; (into a b)))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#&amp;#39;user/merge-with-
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;merge-with-nil&lt;/span&gt; nil nil)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;merge-with-nil&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] nil)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;merge-with-nil&lt;/span&gt; nil [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;merge-with-nil&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;[1]&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;[1]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[1 2]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;So now creating our trie is simple:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;def &lt;/span&gt;pronunciations-trie
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#a6e22e&#34;&gt;apply&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   deep-merge-with
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   merge-with-nil
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   (map (&lt;span style=&#34;color:#66d9ef&#34;&gt;fn &lt;/span&gt;[[pronunciation word]] (&lt;span style=&#34;color:#a6e22e&#34;&gt;word-&amp;gt;nested-map&lt;/span&gt; pronunciation word)) pronunciation-&amp;gt;words)))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#&amp;#39;user/pronunciations-trie
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To get at words in the trie, we need to recursively &lt;code&gt;get&lt;/code&gt; phonemes, and finally select the word:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; pronunciations-trie
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;.get&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;R&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;.get&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;EH&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;.get&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;D&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;:word&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&amp;#34;READ&amp;#34; &amp;#34;READE&amp;#34; &amp;#34;RED&amp;#34; &amp;#34;REDD&amp;#34;]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can use Clojure&amp;rsquo;s &lt;code&gt;loop&lt;/code&gt; macro to define a function which will check if a list of phonemes is a valid pronunciation of some English word.&lt;/p&gt;
&lt;p&gt;In our case we don&amp;rsquo;t just want to return &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;, but the actual trie structure that the pronunciation results in.
This will let us continue to look up words based on where we leave off.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;lookup-pronunciation
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  [pronunciation]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#66d9ef&#34;&gt;loop &lt;/span&gt;[remaining pronunciation
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         trie pronunciations-trie]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (cond (&lt;span style=&#34;color:#a6e22e&#34;&gt;empty?&lt;/span&gt; remaining) trie
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          (nil? trie) nil
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#e6db74&#34;&gt;:else&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;recur&lt;/span&gt; (rest remaining) (&lt;span style=&#34;color:#a6e22e&#34;&gt;trie&lt;/span&gt; (first remaining))))))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#&amp;#39;user/lookup-pronunciation
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;:word&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;lookup-pronunciation&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;R&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;EH&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;D&amp;#34;&lt;/span&gt;]))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;:word&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;lookup-pronunciation&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;D&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;EY&amp;#34;&lt;/span&gt;]))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;[&amp;ldquo;READ&amp;rdquo; &amp;ldquo;READE&amp;rdquo; &amp;ldquo;RED&amp;rdquo; &amp;ldquo;REDD&amp;rdquo;]&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;[&amp;ldquo;DAE&amp;rdquo; &amp;ldquo;DAY&amp;rdquo; &amp;ldquo;DAYE&amp;rdquo; &amp;ldquo;DE&amp;rdquo; &amp;ldquo;DEY&amp;rdquo;]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;weird-results&#34;&gt;Weird Results&lt;/h4&gt;
&lt;p&gt;Honestly, some of  these results are weird.
If I was playing this game and came across &amp;ldquo;DE&amp;rdquo; I would probably pronounce it as &lt;code&gt;[&amp;quot;D&amp;quot; &amp;quot;EE&amp;quot;]&lt;/code&gt; not &lt;code&gt;[&amp;quot;D&amp;quot; &amp;quot;EY&amp;quot;]&lt;/code&gt;.
One way we can consider fixing this is by finding a list of the &lt;em&gt;most common&lt;/em&gt; English words, and filter our original dictionary to only include those words.
That &lt;em&gt;ought&lt;/em&gt; to exclude the weirder words like &lt;code&gt;&amp;quot;DE&amp;quot;, &amp;quot;READE&amp;quot;, &amp;quot;REDD&amp;quot;&lt;/code&gt; etc.&lt;/p&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt;  Do that. I don&amp;rsquo;t have a list of the most common words yet.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;substitutions&#34;&gt;Substitutions&lt;/h3&gt;
&lt;p&gt;A key aspect of the Mondegreens which I haven&amp;rsquo;t discussed yet are sound substitutions.
For example, many Mondegreens will slightly change a syllable here or there to through the reader off slightly, but usually the sound will be sufficiently close so the reader can still guess correctly.
The type of substitutions I see are usually phonetically similar, like &lt;code&gt;&amp;quot;D&amp;quot;-&amp;gt;&amp;quot;T&amp;quot;&lt;/code&gt; (both are known linguistically as &lt;code&gt;frontal stops&lt;/code&gt;, where &lt;code&gt;&amp;quot;D&amp;quot;&lt;/code&gt; is the &lt;em&gt;alveolar stop&lt;/em&gt; and &lt;code&gt;&amp;quot;T&amp;quot;&lt;/code&gt; is the &lt;em&gt;dental stop&lt;/em&gt;. &lt;code&gt;&amp;quot;D&amp;quot;&lt;/code&gt; is &lt;em&gt;voiced&lt;/em&gt; (your throat hums when you pronounce it), and &lt;code&gt;&amp;quot;T&amp;quot;&lt;/code&gt; is &lt;em&gt;unvoiced&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Mathematically, when we want to express equivalence between objects, we can put them in the same &lt;em&gt;Set&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve created a list of Sets of phonemes which I consider to be valid substitutions for each other in our game, but these, while guided by my limited knowledge of phonetics, are more or less arbitrary.&lt;/p&gt;
&lt;p&gt;Singleton classes represent phonemes which I don&amp;rsquo;t think should be replaced with anything else.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;def &lt;/span&gt;equivalence-classes
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;It would be better to base these substitutions on some kind of linguistic data. I bet it exists.&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  [&lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AA&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AO&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AW&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AH&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;UH&amp;#34;&lt;/span&gt;} &lt;span style=&#34;color:#75715e&#34;&gt;; all pretty similar vowel sounds&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AY&amp;#34;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;B&amp;#34;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CH&amp;#34;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;D&amp;#34;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DH&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TH&amp;#34;&lt;/span&gt;} &lt;span style=&#34;color:#75715e&#34;&gt;; The difference in the &amp;#34;TH&amp;#34; sound between &amp;#34;these&amp;#34; and &amp;#34;teeth&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;EH&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IH&amp;#34;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;EY&amp;#34;&lt;/span&gt;} &lt;span style=&#34;color:#75715e&#34;&gt;; Maybe can be paired up?&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ER&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;R&amp;#34;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;F&amp;#34;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;G&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;K&amp;#34;&lt;/span&gt;} &lt;span style=&#34;color:#75715e&#34;&gt;; voiced vs. unvoiced glottal stops&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HH&amp;#34;&lt;/span&gt; nil} &lt;span style=&#34;color:#75715e&#34;&gt;; The &amp;#34;H&amp;#34; sounds often gets deleted from mondegreens, so this indicates it is equivalent to no sound.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IY&amp;#34;&lt;/span&gt;} &lt;span style=&#34;color:#75715e&#34;&gt;; Maybe goes with &amp;#34;IH&amp;#34;, but probably not &amp;#34;EH&amp;#34;... Maybe these shouldn&amp;#39;t be sets?&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;JH&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ZH&amp;#34;&lt;/span&gt;} &lt;span style=&#34;color:#75715e&#34;&gt;; I forget the linguistic difference between these, but it&amp;#39;s &amp;#34;EDGE&amp;#34; vs. &amp;#34;JACQUE&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;L&amp;#34;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;M&amp;#34;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;N&amp;#34;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NG&amp;#34;&lt;/span&gt;} &lt;span style=&#34;color:#75715e&#34;&gt;; Can go with N+G when splitting one phoneme into multiple is allowed.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;OW&amp;#34;&lt;/span&gt;} &lt;span style=&#34;color:#75715e&#34;&gt;; All diphthongs can probably go with their constituent monophthongs. e.g. AA+UW&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;OY&amp;#34;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;P&amp;#34;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SH&amp;#34;&lt;/span&gt;} &lt;span style=&#34;color:#75715e&#34;&gt;; Maybe belongs with &amp;#34;S&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;T&amp;#34;&lt;/span&gt;} &lt;span style=&#34;color:#75715e&#34;&gt;; Can this go with &amp;#34;D&amp;#34;? Is that too jarring?&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;V&amp;#34;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;W&amp;#34;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Y&amp;#34;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;S&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Z&amp;#34;&lt;/span&gt;}])
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#&amp;#39;user/equivalence-classes
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is honestly a pretty conservative interpretation of which phonemes are close enough for our game, and if I were to really perfect this program, this is where I would focus.&lt;/p&gt;
&lt;p&gt;Now that we have the classes, we can answer the question &amp;ldquo;Given a phoneme, what are its valid replacements for our game?&amp;rdquo;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;valid-replacements
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  [phoneme]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (mapcat (partial apply vector) (filter &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;%&lt;/span&gt; phoneme) equivalence-classes)))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#&amp;#39;user/valid-replacements
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;valid-replacements&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AY&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;valid-replacements&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AA&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;valid-replacements&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;S&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;valid-replacements&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Z&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;valid-replacements&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HH&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;(&amp;ldquo;AY&amp;rdquo;)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;(&amp;ldquo;UH&amp;rdquo; &amp;ldquo;AH&amp;rdquo; &amp;ldquo;AW&amp;rdquo; &amp;ldquo;AA&amp;rdquo; &amp;ldquo;AO&amp;rdquo;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(&amp;ldquo;S&amp;rdquo; &amp;ldquo;Z&amp;rdquo;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(&amp;ldquo;S&amp;rdquo; &amp;ldquo;Z&amp;rdquo;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;( &amp;ldquo;HH&amp;rdquo;)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;finding-a-sentence-given-a-pronunciation&#34;&gt;Finding a sentence given a pronunciation&lt;/h3&gt;
&lt;p&gt;Now to combine what we have done so far.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s manually walk through an example sentence that we know works so that we can piece together our algorithm.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;#34;I SCREAM&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;First, we turn it into a pronunciation:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sentence-&amp;gt;pronunciation&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;I SCREAM&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;((&amp;#34;AY&amp;#34; &amp;#34;S&amp;#34; &amp;#34;K&amp;#34; &amp;#34;R&amp;#34; &amp;#34;IY&amp;#34; &amp;#34;M&amp;#34;))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Cool, only 1 possible pronunciation to worry about.&lt;/p&gt;
&lt;p&gt;Next, we need to recursively ask whether our phonemes make up a word:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;lookup-pronunciation&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AY&amp;#34;&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;; no?&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;lookup-pronunciation&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AY&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;S&amp;#34;&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;; no?&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;lookup-pronunciation&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AY&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;S&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;K&amp;#34;&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Or whether any of the valid replacements for each of our phonemes make up a word:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;pronunciation-&amp;gt;sentence
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  [pronunciation]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#a6e22e&#34;&gt;letfn&lt;/span&gt; [(&lt;span style=&#34;color:#a6e22e&#34;&gt;find-pronuns&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            [prev-phones next-phones]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;[answer (&lt;span style=&#34;color:#e6db74&#34;&gt;:word&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;lookup-pronunciation&lt;/span&gt; prev-phones))]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              (cond (&lt;span style=&#34;color:#a6e22e&#34;&gt;empty?&lt;/span&gt; next-phones) answer  &lt;span style=&#34;color:#75715e&#34;&gt;; whether or not it is valid, we have no more phonemes to work with&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    answer (cons answer (&lt;span style=&#34;color:#a6e22e&#34;&gt;find-pronuns&lt;/span&gt; [] next-phones)) &lt;span style=&#34;color:#75715e&#34;&gt;; we found a real word, just worry about the next set of phonemes then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#e6db74&#34;&gt;:else&lt;/span&gt; (reduce (&lt;span style=&#34;color:#66d9ef&#34;&gt;fn &lt;/span&gt;[acc x] (or acc (&lt;span style=&#34;color:#a6e22e&#34;&gt;find-pronuns&lt;/span&gt; (conj prev-phones x) (rest next-phones))))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                  nil
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                  (&lt;span style=&#34;color:#a6e22e&#34;&gt;valid-replacements&lt;/span&gt; (first next-phones))))))]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#a6e22e&#34;&gt;find-pronuns&lt;/span&gt; [] pronunciation)))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#&amp;#39;user/pronunciation-&amp;gt;sentence
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;pronunciation-&amp;gt;sentence&lt;/span&gt; (first (&lt;span style=&#34;color:#a6e22e&#34;&gt;sentence-&amp;gt;pronunciation&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;I SCREAM&amp;#34;&lt;/span&gt;)))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;([&amp;#34;AI&amp;#34; &amp;#34;AY&amp;#34; &amp;#34;AYE&amp;#34; &amp;#34;EYE&amp;#34; &amp;#34;I&amp;#34; &amp;#34;I.&amp;#34;] &amp;#34;SCREAM&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ok, so we got our original sentence more or less.
To prevent that, let&amp;rsquo;s pass in the a set of the words in the original sentence, and make sure we don&amp;rsquo;t return any of those.
Technically this will exclude a set of potential solutions where a word in the original sentence occurs somewhere completely different in the Mondegreen sentence, e.g. if you had the sentence &amp;ldquo;I SCREAM ICE-CREAM&amp;rdquo;, a valid Mondegreen would technically be &amp;ldquo;ICE-CREAM I SCREAM&amp;rdquo;, but I&amp;rsquo;ll just ignore that set of solutions in favor of something which doesn&amp;rsquo;t contain &lt;em&gt;any&lt;/em&gt; words from the original.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;pronunciation-&amp;gt;sentence
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Can this series of phonemes be parsed as a collection of English words? Find one answer containing no words from the set of words in the original sentence.&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  [pronunciation original-sentence]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#a6e22e&#34;&gt;letfn&lt;/span&gt; [(&lt;span style=&#34;color:#a6e22e&#34;&gt;word?&lt;/span&gt; [phones]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;[words (&lt;span style=&#34;color:#e6db74&#34;&gt;:word&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;lookup-pronunciation&lt;/span&gt; phones))]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              (and (not (some &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;original-sentence&lt;/span&gt; %) words)) (first words))))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          (&lt;span style=&#34;color:#a6e22e&#34;&gt;search-substitutions&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            [prev-phones next-phones]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            (reduce (&lt;span style=&#34;color:#66d9ef&#34;&gt;fn &lt;/span&gt;[acc x] (or acc (&lt;span style=&#34;color:#a6e22e&#34;&gt;find-pronuns&lt;/span&gt; (conj prev-phones x) (rest next-phones))))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    nil
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    (&lt;span style=&#34;color:#a6e22e&#34;&gt;valid-replacements&lt;/span&gt; (first next-phones))))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          (&lt;span style=&#34;color:#a6e22e&#34;&gt;find-pronuns&lt;/span&gt; [prev-phones next-phones]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;[answer (&lt;span style=&#34;color:#a6e22e&#34;&gt;word?&lt;/span&gt; prev-phones)]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                (&lt;span style=&#34;color:#a6e22e&#34;&gt;empty?&lt;/span&gt; next-phones) (when answer (list answer))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                answer (if-let [rest-of-sentence (&lt;span style=&#34;color:#a6e22e&#34;&gt;find-pronuns&lt;/span&gt; [] next-phones)]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                         (cons answer rest-of-sentence)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                         (&lt;span style=&#34;color:#a6e22e&#34;&gt;search-substitutions&lt;/span&gt; prev-phones next-phones))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#e6db74&#34;&gt;:else&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;search-substitutions&lt;/span&gt; prev-phones next-phones))))]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#a6e22e&#34;&gt;find-pronuns&lt;/span&gt; [] pronunciation)))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#&amp;#39;user/pronunciation-&amp;gt;sentence
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We achieve this by taking the set of words from the original sentence and comparing the possible word for the phonemes so far against that set.&lt;/p&gt;
&lt;p&gt;So in the &lt;code&gt;&amp;quot;I SCREAM&amp;quot;&lt;/code&gt; example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;pronunciation-&amp;gt;sentence&lt;/span&gt; (first (&lt;span style=&#34;color:#a6e22e&#34;&gt;sentence-&amp;gt;pronunciation&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;I SCREAM&amp;#34;&lt;/span&gt;)) (set (&lt;span style=&#34;color:#a6e22e&#34;&gt;sentence-&amp;gt;words&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;I SCREAM&amp;#34;&lt;/span&gt;)))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&amp;#34;ICE&amp;#34; &amp;#34;CREAM&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So in this case, the algorithm found &lt;code&gt;&amp;quot;I&amp;quot;&lt;/code&gt; as a possible word for the phoneme list  &lt;code&gt;&#39;(&amp;quot;AY&amp;quot;)&lt;/code&gt;, but since that was part of our original sentence, it disregarded it and continued until it found &lt;code&gt;&amp;quot;ICE&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(set (&lt;span style=&#34;color:#a6e22e&#34;&gt;sentence-&amp;gt;words&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;I SCREAM&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;:word&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;lookup-pronunciation&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AY&amp;#34;&lt;/span&gt;)))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(some &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;((set (&lt;span style=&#34;color:#a6e22e&#34;&gt;sentence-&amp;gt;words&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;I SCREAM&amp;#34;&lt;/span&gt;)) %) (&lt;span style=&#34;color:#e6db74&#34;&gt;:word&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;lookup-pronunciation&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AY&amp;#34;&lt;/span&gt;))))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;#{&amp;ldquo;SCREAM&amp;rdquo; &amp;ldquo;I&amp;rdquo;}&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;[&amp;ldquo;AI&amp;rdquo; &amp;ldquo;AY&amp;rdquo; &amp;ldquo;AYE&amp;rdquo; &amp;ldquo;EYE&amp;rdquo; &amp;ldquo;I&amp;rdquo; &amp;ldquo;I.&amp;rdquo;]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ldquo;I&amp;rdquo;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;mondegreen&#34;&gt;Mondegreen&lt;/h2&gt;
&lt;p&gt;Now that we have &lt;code&gt;pronunciation-&amp;gt;sentence&lt;/code&gt;, we basically have our entire mondegreen generator.
All that&amp;rsquo;s left is to expose a convenient wrapper to do the parsing of inputs.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;mondegreen
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  [sentence]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;[sentence-phonemes (&lt;span style=&#34;color:#a6e22e&#34;&gt;sentence-&amp;gt;pronunciation&lt;/span&gt; sentence)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        sentence-words (set (&lt;span style=&#34;color:#a6e22e&#34;&gt;sentence-&amp;gt;words&lt;/span&gt; sentence))]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#a6e22e&#34;&gt;pronunciation-&amp;gt;sentence&lt;/span&gt; (first sentence-phonemes) sentence-words)))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#&amp;#39;user/mondegreen
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;mondegreen&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;I SCREAM&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;mondegreen&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ICE-CREAM&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;mondegreen&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PLEASE NOT WHILE I&amp;#39;M EATING&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;mondegreen&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SOMEONE STOLE MY LEMON TREE&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;(&amp;ldquo;ICE&amp;rdquo; &amp;ldquo;CREAM&amp;rdquo;)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;(&amp;ldquo;AI&amp;rdquo; &amp;ldquo;SCREAM&amp;rdquo;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(&amp;ldquo;PLEA&amp;rdquo; &amp;ldquo;SNOUT&amp;rdquo; &amp;ldquo;WAI&amp;rdquo; &amp;ldquo;LAI&amp;rdquo; &amp;ldquo;ME&amp;rdquo; &amp;ldquo;TENG&amp;rdquo;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(&amp;ldquo;SOME&amp;rdquo; &amp;ldquo;ONCE&amp;rdquo; &amp;ldquo;TOAL&amp;rdquo; &amp;ldquo;MILE&amp;rdquo; &amp;ldquo;EH&amp;rdquo; &amp;ldquo;MUN&amp;rdquo; &amp;ldquo;TER&amp;rdquo; &amp;ldquo;E&amp;rdquo;)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;One of the implications of this particular algorithm is that it will prefer the shortest words first. This also decreases search time, but could lead to boring results over time. The same short words, like &amp;ldquo;EH&amp;rdquo;, &amp;ldquo;E&amp;rdquo;, &amp;ldquo;TER&amp;rdquo;, comprising only one or two phonemes will appear most often. You would be hard-pressed to find two- or three-syllable results ever appear. Maybe these will be improvements I will make, but I&amp;rsquo;m actually working on an implementation of the same exact program in SBCL Prolog, so I might never need to put in that work here ;)&lt;/p&gt;
</description>
       </item>
       
       <item>
         <title>Meditations: Selected Quotations</title>
         <link>https://mjdiloreto.github.io/posts/meditations-quotations/</link>
         <pubDate>Sun, 25 Jul 2021 20:26:00 -0500</pubDate>
         
         <guid>https://mjdiloreto.github.io/posts/meditations-quotations/</guid>
         <description>&lt;p&gt;While reading Marcus Aurelius&amp;rsquo;s &lt;em&gt;Meditations&lt;/em&gt;, I was struck by the consistent focus on a few central themes.
It reminded me of the propaganda technique, &amp;ldquo;What I say three times is true&amp;rdquo;.
Marcus repeated the same ideas over and over, drilling into himself the mindset he was trying to cultivate.
It&amp;rsquo;s a glimpse not only into the life of a great man, but a personal journey into the person he &lt;span class=&#34;underline&#34;&gt;strove&lt;/span&gt; to be.&lt;/p&gt;
&lt;p&gt;I picked up the Gregory Hays translation at Barnes and Noble by chance.
I was about to go on vacation, it was a paperback for under $10, and I needed something to read on the beach. I recommend this translation over the older translations for ease of reading, and the excellent introduction.&lt;/p&gt;
&lt;p&gt;During my first reading I only managed a few pages in each sitting, since I would often have to think through the terse yet illuminating verses, but I quickly found myself returning to the book after a few hours for another session.
I&amp;rsquo;m normally a habitual reader, only reading for an hour or so each night, and half-an-hour in the morning, but with &lt;em&gt;Meditations&lt;/em&gt; I was captivated.&lt;/p&gt;
&lt;p&gt;Immediately after I finished the twelfth book (each book comprising only around a dozen pages), I knew I had to start back at the beginning, rereading every sentence with an understanding of the gestalt the first readthrough had given me.
I felt the repetition solidify my understanding, and like dogma, strengthen my confidence in the ancient truths revealed by the short passages.&lt;/p&gt;
&lt;p&gt;I was reminded of men I admired in my life.
I saw the strongest features of my mother - her steadfastness and indifference to the opinions of others.&lt;/p&gt;
&lt;p&gt;On this second reading I began to mark passages that I found particularly poignant.
On the third, I again marked passages in the same way.
After the third reading, I kept the set of quotations which I had marked on both my second and third readings, resulting in the list of meditations which I found most compelling.
With this list I ascribed names to the themes that I saw in each one, things like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Self-Determination&lt;/li&gt;
&lt;li&gt;Work&lt;/li&gt;
&lt;li&gt;Virtue&lt;/li&gt;
&lt;li&gt;Truth&lt;/li&gt;
&lt;li&gt;Death&lt;/li&gt;
&lt;li&gt;Eternity&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The rest of this document is that list of meditations, marked with the themes I found and small notes I wrote along the way. They are presented in the order they appear in the book. I have also marked some as &lt;em&gt;favorites&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Like Hunter S. Thompson&amp;rsquo;s practice of copying Hemingway and Fitzgerald hoping that reenacting their genius would have some profound effect on his own writing, I hope that the practice of writing (and rewriting) this selection of meditations will help me think and act in their principled way.&lt;/p&gt;
&lt;div class=&#34;icons&#34; data-icons=&#34;sins virtue&#34; data-chapter=&#34;2.10&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;In comparing sins (the way people do) Theophrastus says that the ones committed out of desire are worse than the ones committed out of anger: which is good philosophy. The angry man seems to turn his back on reason out of a kind of pain and inner convulsion. But the man motivated by desire, who is mastered by pleasure, seems somehow more self-indulgent, less manly in his sins. Theophrastus is right, and philosophically sound, to say that the sin committed out of pleasure deserves a harsher rebuke than the one committed out of pain. The angry man is more like a victim of wrongdoing, provoked by pain to anger. The other man rushes into wrongdoing on his own, moved to action by desire.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;Hays notes that this technically is not a stoic viewpoint, since stoicism maintains no metric on the &amp;ldquo;wrongness&amp;rdquo; of sins. Somehow it seems even more stoic for Marcus to hold positions contrary to the school he is associated with. Even if contradictory, whatever resonates with Reason, or aligns with his own nature is truthful.&lt;/p&gt;
&lt;div class=&#34;icons&#34; data-icons=&#34;work happiness expedience&#34; data-chapter=&#34;3.12&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;If you do the job in a principled way, with diligence, energy and patience, if you keep yourself free of distractions, and keep the spirit inside you undamaged, as if you might have to give it back at any moment &amp;ndash;
If you can embrace this without fear or expectation &amp;ndash; can find fulfillment in what you&amp;rsquo;re doing now, as Nature intended, and in superhuman truthfulness (every word, every utterance) &amp;ndash; then your life will be happy.
No one can prevent that.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;I love that Marcus uses &amp;ldquo;diligence, energy and patience&amp;rdquo; here. I find it very easy - when I&amp;rsquo;m eager - to let energy take over, and lead me down the wrong path, whether it&amp;rsquo;s biting off more than I can chew, &lt;em&gt;scope creep&lt;/em&gt;, or just doing a rushed job.&lt;/p&gt;
&lt;p&gt;There is something very appealing about the type of absolute focus Marcus displays in his meditations, as though his every waking moment is spent reflecting on his nature and on doing the right things.&lt;/p&gt;
&lt;div class=&#34;icons&#34; data-icons=&#34;harm self-determination&#34; data-chapter=&#34;4.7&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;Choose not to be harmed &amp;ndash; and you won&amp;rsquo;t feel harmed.
Don&amp;rsquo;t feel harmed &amp;ndash; and you haven&amp;rsquo;t been harmed.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;A principle I&amp;rsquo;ve held since I was a child, taught to me by my mother.&lt;/p&gt;
&lt;div class=&#34;icons&#34; data-icons=&#34;harm character&#34; data-chapter=&#34;4.8&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;It can ruin your life only if it ruins your character.
Otherwise it cannot harm you &amp;ndash; inside or out.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;!--quoteend--&gt;
&lt;div class=&#34;icons&#34; data-icons=&#34;death&#34; data-chapter=&#34;4.41&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;A little wisp of soul carrying a corpse.&amp;rdquo; - Epictetus&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Memento mori&lt;/em&gt; - a powerful motivator too often ignored as macabre. We can choose to accept and remind ourselves of our mortality, or ignore it until the terrifying day we cannot, wishing we had, and acted on it.&lt;/p&gt;
&lt;div class=&#34;icons&#34; data-icons=&#34;eternity favorite&#34; data-chapter=&#34;4.43&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;Time is a river, a violent current of events, glimpsed once and already carried past us.
Another follows and is gone.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;I reread this meditation more than any other - memorized it and repeated it to myself.&lt;/p&gt;
&lt;p&gt;I like the imagery here, and strangely recognized its relation to software.&lt;/p&gt;
&lt;p&gt;Rich Hickey&amp;rsquo;s opinion of software design centers around time as a process, &amp;ldquo;a violent current of events&amp;rdquo;, and holds that software should &lt;em&gt;glimpse&lt;/em&gt; the immutable world in those instances, and let the world continue to evolve as events carry it forward. Software should not stop the world in order to change it, just as we cannot stop the world to impose our will on it.&lt;/p&gt;
&lt;div class=&#34;icons&#34; data-icons=&#34;self-determination&#34; data-chapter=&#34;5.19&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;Things have no hold on the soul. They have no access to it, cannot move or direct it. It is moved and directed by itself alone. It takes the things before it and interprets them as it sees fit.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;!--quoteend--&gt;
&lt;div class=&#34;icons&#34; data-icons=&#34;truth&#34; data-chapter=&#34;6.3&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;Look inward. Don&amp;rsquo;t let the true nature or value of anything elude you.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;This meditation is a good example of why the Gregory Hays translation is the best in my opinion for modern readers. The older translations are:&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Look to what is within: do not allow the intrinsic quality or the worth of any one fact to escape you.&amp;rdquo; translated by Arthur Spenser Loat Farquharson in his 1994 &lt;em&gt;The Meditations of the Empereror Marcus Antoninus&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The George Long translation &lt;em&gt;The Meditations of Marcus Aurelius&lt;/em&gt; written in 1910, says &amp;ldquo;Look within. Let neither the peculiar quality of anything nor its value escape thee.&amp;rdquo; All the other meditations are obscured in this translation as well.&lt;/p&gt;
&lt;p&gt;Even older is Meric Casaubon&amp;rsquo;s 1634 translation in &lt;em&gt;Marcus Aurelius Antoninus, His Meditations concerning himselfe&lt;/em&gt;, &amp;ldquo;Look in, let not either the proper quality, or the true worth
of anything pass thee, before thou hast fully apprehended it&amp;rdquo;. I actually prefer this particular translation to the George Long one.&lt;/p&gt;
&lt;p&gt;If I had read any of these older translations first I might not have been as enthralled as I was with the &lt;em&gt;Meditations&lt;/em&gt;. Hays clearly substituted modern phrases, and took great care to simplify the translation as clearly and concisely as possible. I think the shorter passage has the greatest impact as well.&lt;/p&gt;
&lt;div class=&#34;icons&#34; data-icons=&#34;virtue favorite&#34; data-chapter=&#34;6.6&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;The best revenge is not to be like that.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;!--quoteend--&gt;
&lt;div class=&#34;icons&#34; data-icons=&#34;virtue favorite&#34; data-chapter=&#34;6.16&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;What is it in ourselves that we should prize?&lt;/p&gt;
&lt;p&gt;Not just transpiration (even plants do that).
Or respiration (even beasts and wild animals breathe).
Or being struck by passing thoughts.
Or jerked like a puppet by your own impulses.
Or moving in herds.
Or eating, and relieving yourself afterwards.&lt;/p&gt;
&lt;p&gt;Then what is to be prized?
An audience clapping? No. No more than the clacking of their tongues. Which is all that public praise amounts to &amp;ndash; a clacking of tongues.
So we throw out other people&amp;rsquo;s recognition. What&amp;rsquo;s left for us to prize?
I think it&amp;rsquo;s this: to do (and not do) what we were designed for.
That&amp;rsquo;s the goal of all trades, all arts, and what each of them aims at: that the thing they create should do what it was designed to do. The nurseryman who cares for the vines, the horse trainer, the dog breeder &amp;ndash; this is what they aim at. And teaching and education &amp;ndash; what else are they trying to accomplish?
So that&amp;rsquo;s what we should prize. Hold on to that, and you won&amp;rsquo;t be tempted to aim at anything else.
And if you can&amp;rsquo;t stop prizing a lot of other things? Then you&amp;rsquo;ll never be free &amp;ndash; free, independent, imperturbable. Because you&amp;rsquo;ll always be envious and jealous, afraid that people might come and take it all away from you. Plotting against those who have them &amp;ndash; those things you prize. People who need those things are bound to be a mess &amp;ndash; and bound to take out their frustrations on the gods. Whereas to respect your own mind &amp;ndash; to prize it &amp;ndash; will leave you satisfied with your own self, well integrated into your community and in tune with the gods as well &amp;ndash; embracing what they allot you, and what they ordain.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;If only one meditation could have an effect on me, I hope it would be this one.&lt;/p&gt;
&lt;div class=&#34;icons&#34; data-icons=&#34;work&#34; data-chapter=&#34;6.19&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;Not to assume it&amp;rsquo;s impossible because you find it hard. But to recognize that if it&amp;rsquo;s humanly possible, you can do it too.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;!--quoteend--&gt;
&lt;div class=&#34;icons&#34; data-icons=&#34;truth harm&#34; data-chapter=&#34;6.21&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;If you can refute me &amp;ndash; show me I&amp;rsquo;m making a mistake or looking at things from the wrong perspective &amp;ndash; I&amp;rsquo;ll gladly change. It&amp;rsquo;s the truth I&amp;rsquo;m after, and the truth never harmed anyone. What harms us is to persist in self-deceit and ignorance.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;Important to keep in mind during the ongoing culture wars.&lt;/p&gt;
&lt;div class=&#34;icons&#34; data-icons=&#34;eternity change&#34; data-chapter=&#34;6.37&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;If you&amp;rsquo;ve seen the present then you&amp;rsquo;ve seen everything &amp;ndash; as it&amp;rsquo;s been since the beginning, as it will be forever. The same substance, the same form. All of it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;I&amp;rsquo;m amazed by the &lt;em&gt;correctness&lt;/em&gt; of Marcus&amp;rsquo;s view of eternity. Over a thousand years before the discovery of the laws of thermodynamics, he saw that processes &amp;ldquo;in the small&amp;rdquo; never changed the whole.&lt;/p&gt;
&lt;div class=&#34;icons&#34; data-icons=&#34;optimism virtue&#34; data-chapter=&#34;6.48&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;When you need encouragement, think of the qualities the people around you have: this one&amp;rsquo;s energy, that one&amp;rsquo;s modesty, another&amp;rsquo;s generosity, and so on. Nothing is as encouraging as when virtues are visibly embodied in the people around us, when we&amp;rsquo;re practically showered with them
It&amp;rsquo;s good to keep this in mind.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;I would like to live this way.&lt;/p&gt;
&lt;div class=&#34;icons&#34; data-icons=&#34;help favorite&#34; data-chapter=&#34;7.7&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;Don&amp;rsquo;t be ashamed to need help. Like a soldier storming a wall, you have a mission to accomplish. And if you&amp;rsquo;ve been wounded and you need a comrade to pull you up? So what?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;!--quoteend--&gt;
&lt;div class=&#34;icons&#34; data-icons=&#34;present&#34; data-chapter=&#34;7.8&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;Forget the future. When and if it comes, you&amp;rsquo;ll have the same resources to draw on &amp;ndash; the same &lt;em&gt;logos&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;I have actually successfully implemented this meditation in my daily life since reading it, at least as it applies to software development. In that light it&amp;rsquo;s a bit like the addage &amp;ldquo;premature optimization is the root of all evil&amp;rdquo;. More generally I guess that would be &amp;ldquo;prematurely thinking about the future is unhelpful&amp;rdquo;.&lt;/p&gt;
&lt;div class=&#34;icons&#34; data-icons=&#34;character virtue favorite&#34; data-chapter=&#34;7.12&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;Straight, not straightened.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;The best people I know live this way. Doing the right thing not because of &lt;em&gt;any&lt;/em&gt; external motivator. It just seems to be a part of &lt;em&gt;who they are&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&#34;icons&#34; data-icons=&#34;possessions&#34; data-chapter=&#34;7.27&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;Treat what you don&amp;rsquo;t have as nonexistent. Look at what you have, the things you value most, and think of how much you&amp;rsquo;d crave them if you didn&amp;rsquo;t have them. But be careful. Don&amp;rsquo;t feel such satisfaction that you start to overvalue them &amp;ndash; that it would upset you to lose them.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;I&amp;rsquo;ve always been unsentimental about my belongings.
Maybe it&amp;rsquo;s a learned behavior from moving six times in the last six years - every thing I have is another thing I have to &lt;em&gt;move&lt;/em&gt;.
But I do have things I feel protective of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;my cast iron pans&lt;/li&gt;
&lt;li&gt;my collection of books&lt;/li&gt;
&lt;li&gt;my leather boots and hiking pants&lt;/li&gt;
&lt;li&gt;an engraved watch from my fiance (girlfriend at the time)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All these things are technically replaceable, but it would upset me to lose them.
But the point here is that even &lt;em&gt;irreplaceable&lt;/em&gt; things should not be valued so highly.
My takeaway is not to own nothing and live like Diogenes, but to be content &lt;em&gt;no matter what I do (or do not) have&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&#34;icons&#34; data-icons=&#34;virtue truth self-determination&#34; data-chapter=&#34;7.29&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;Discard your misconceptions.
Stop being jerked like a puppet.
Limit yourself to the present.
Understand what happens &amp;ndash; to you, to others.
Analyze what exists, break it all down: material and cause.
Anticipate your final hours.
Other people&amp;rsquo;s mistakes? Leave them to their masters.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;I quit social media altogether after reading &lt;em&gt;Meditations&lt;/em&gt;. I felt like I &lt;em&gt;was&lt;/em&gt; being &amp;ldquo;jerked like a puppet&amp;rdquo;, especially in 2020 when every post, video, and article inflamed me. For what?&lt;/p&gt;
&lt;div class=&#34;icons&#34; data-icons=&#34;virtue self-determination&#34; data-chapter=&#34;7.54&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;Everywhere, at each moment, you have the option:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;to accept this event with humility&lt;/li&gt;
&lt;li&gt;to treat this person as he should be treated&lt;/li&gt;
&lt;li&gt;to approach this thought with care, so that nothing irrational creeps in.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;It always amazes me that these thoughts came from the most powerful man in the most powerful empire the world had ever known - that he should be concerned with humility, and treating others appropriately.&lt;/p&gt;
&lt;p&gt;Even as someone with a more humble life it would be difficult to follow this advice &amp;ldquo;everywhere, at each moment&amp;rdquo;, let alone in his deified position.&lt;/p&gt;
&lt;div class=&#34;icons&#34; data-icons=&#34;acceptance favorite&#34; data-chapter=&#34;7.57&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;To love only what happens, what was destined. No greater harmony.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;I think this maxim summarizes stoicism perfectly. Everything which happens is governed by logos - the &amp;ldquo;violent current of events&amp;rdquo; all predetermined. You have no control over what happens, only the way you react to it. While most people struggle against the inevitable, a stoic doesn&amp;rsquo;t just accept it, but &lt;em&gt;loves&lt;/em&gt; it, even when what happens is terrible or painful.&lt;/p&gt;
&lt;div class=&#34;icons&#34; data-icons=&#34;virtue favorite&#34; data-chapter=&#34;7.69&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;Perfection of character: to live your last day, every day, without frenzy, or sloth, or pretense.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;I think about this passage a lot.
What I like most about it is &amp;ldquo;without frenzy&amp;rdquo;.
Sloth is a well-established sin, even in modern society; Good people place value on hard work, and despise laziness.
But the opposite is also harmful, because we cannot keep up frenetic activity.&lt;/p&gt;
&lt;p&gt;Marcus is warning us about &lt;em&gt;burnout&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&#34;icons&#34; data-icons=&#34;obstacles self-determination&#34; data-chapter=&#34;8.32&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;You have to assemble your life yourself &amp;ndash; action by action. And be satisfied if each one achieves its goal, as far as it can. No one can keep that from happening.&lt;/p&gt;
&lt;p&gt;&amp;ndash; But there are external obstacles&amp;hellip;&lt;/p&gt;
&lt;p&gt;Not to behaving with justice, self-control, and good sense.&lt;/p&gt;
&lt;p&gt;&amp;ndash; Well, but perhaps to some more concrete action.&lt;/p&gt;
&lt;p&gt;But if you accept the obstacle and work with what you&amp;rsquo;re given, an alternative will present itself&lt;/p&gt;
&lt;p&gt;&amp;ndash; another piece of what you&amp;rsquo;re trying to assemble. Action by action.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;!--quoteend--&gt;
&lt;div class=&#34;icons&#34; data-icons=&#34;endurance pain&#34; data-chapter=&#34;8.36&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;Don&amp;rsquo;t let your imagination be crushed by life as a whole. Don&amp;rsquo;t try to picture everything bad that could possibly happen. Stick with the situation at hand, and ask, &amp;ldquo;Why is this so unbearable? Why can&amp;rsquo;t I endure it?&amp;rdquo; You&amp;rsquo;ll be embarrassed to answer.
Then remind yourself that past and future have no power over you. Only the present &amp;ndash; and even that can be minimized. Just mark off its limits. And if your mind tries to claim that it can&amp;rsquo;t hold out against &lt;em&gt;that&lt;/em&gt;&amp;hellip; well, then, heap shame upon it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;There is a movie (or maybe a TV show, I can&amp;rsquo;t remember which) with a quotation that always stuck out to me (though obviously not enough for me to remember the specific film or show itself). A character describes how she tolerates some unpleasant thing. She says something along the lines of, &amp;ldquo;When I feel like I can&amp;rsquo;t take anymore I think, &amp;lsquo;just ten more seconds&amp;rsquo;, and I can inevitably tolerate such a short amount of time. Then, at the end of those ten seconds I think again, &amp;lsquo;just ten more seconds&amp;rsquo;&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;I wanted to say this was from the 2015 movie &lt;em&gt;Room&lt;/em&gt; (not the infamous 2003 &lt;em&gt;The Room&lt;/em&gt;, subject of James Franco&amp;rsquo;s &lt;em&gt;The Disaster Artist&lt;/em&gt;), but searching the script for &amp;ldquo;seconds&amp;rdquo; or &amp;ldquo;minutes&amp;rdquo; didn&amp;rsquo;t turn up anything.&lt;/p&gt;
&lt;p&gt;This meditation reminds me of that strategy, whatever the source.&lt;/p&gt;
&lt;div class=&#34;icons&#34; data-icons=&#34;self-determination control&#34; data-chapter=&#34;8.47&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;External things are not the problem. It&amp;rsquo;s your assessment of them. Which you can erase right now.
If the problem is something in your own character, who&amp;rsquo;s stopping you from setting your mind straight?
And if it&amp;rsquo;s that you&amp;rsquo;re not doing something you think you should be, why not just do it?
&amp;ndash; But there are insuperable obstacles.
Then it&amp;rsquo;s not a problem. The cause of your inaction lies outside you.
&amp;ndash; But how can I go on living with that undone?
Then depart, with a good conscience, as if you&amp;rsquo;d done it, embracing the obstacles too.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;!--quoteend--&gt;
&lt;div class=&#34;icons&#34; data-icons=&#34;truth favorite&#34; data-chapter=&#34;9.17&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;A rock thrown in the air. It loses nothing by coming down, gained nothing by going up.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;It isn&amp;rsquo;t the destination, &lt;em&gt;nor&lt;/em&gt; the journey it would seem.&lt;/p&gt;
&lt;div class=&#34;icons&#34; data-icons=&#34;death&#34; data-chapter=&#34;9.21&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;When we cease from activity, or follow a thought to its conclusion, it&amp;rsquo;s a kind of death. And it doesn&amp;rsquo;t harm us. Think about your life: childhood, boyhood, youth, old age. Every transformation a kind of dying. Was that so terrible?
Think about life with your grandfather, your mother, your adopted father. Realize how many other deaths and transformations and endings there have been and ask youself: Was that so terrible?
Then neither will the close of your life be &amp;ndash; its ending and transformation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;!--quoteend--&gt;
&lt;div class=&#34;icons&#34; data-icons=&#34;eternity&#34; data-chapter=&#34;9.32&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;You can discard most of the junk that clutters your mind &amp;ndash; things that exist only there &amp;ndash; and clear out space for yourself:&lt;/p&gt;
&lt;p&gt;&amp;hellip;by comprehending the scale of the world
&amp;hellip;by contemplating infinite time
&amp;hellip;by thinking of the speed with which things change &amp;ndash; each part of every thing; the narrow space between our birth and death; the infinite time before the equally unbounded time that follows.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;!--quoteend--&gt;
&lt;div class=&#34;icons&#34; data-icons=&#34;eternity&#34; data-chapter=&#34;10.17&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;Continual awareness of all time and space, of the size and life of the things around us. A grape seed in infinite space. A half twist of a corkscrew against eternity.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;The preceding two meditations form an excellent strategy for controlling one&amp;rsquo;s emotions, but it is very difficult to implement. I think it&amp;rsquo;s a prerequisite for developing the &lt;em&gt;superego&lt;/em&gt; - taking oneself out of the current situation and shifting perspective to the macro. With this perspective emotions seem so small.&lt;/p&gt;
&lt;div class=&#34;icons&#34; data-icons=&#34;death&#34; data-chapter=&#34;10.29&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;Stop whatever you&amp;rsquo;re doing for a moment and ask yourself: Am I afraid of death because I won&amp;rsquo;t be able to do &lt;em&gt;this&lt;/em&gt; anymore?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;!--quoteend--&gt;
&lt;div class=&#34;icons&#34; data-icons=&#34;honesty favorite&#34; data-chapter=&#34;11.15&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;The despicable phoniness of people who say, &amp;ldquo;Listen, I&amp;rsquo;m going to level with you here.&amp;rdquo; What does that mean? It shouldn&amp;rsquo;t even need to be said. It should be obvious &amp;ndash; written in block letters on your forehead. It should be audible in your voice, visible in your eyes like a lover who looks into your face and takes in the whole story at a glance. A straightforward, honest person should be like someone who stinks: when you&amp;rsquo;re in the same room with him, you know it. But false straightforwardness is like a knife in the back.
False friendship is the worst, Avoid it at all costs. If you&amp;rsquo;re honest and straightforward and mean well, it should show in your eyes. It should be unmistakable.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;This is one of my favorite pieces of prose in the &lt;em&gt;Meditations&lt;/em&gt;. I&amp;rsquo;d even say it&amp;rsquo;s funny. Sometimes obvious truth can make us laugh.&lt;/p&gt;
&lt;div class=&#34;icons&#34; data-icons=&#34;virtue&#34; data-chapter=&#34;11.19&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;Four habits of thought to watch for, and erase from your mind when you catch them. Tell yourself:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This thought is unnecessary.&lt;/li&gt;
&lt;li&gt;This one is destructive to the people around you.&lt;/li&gt;
&lt;li&gt;This wouldn&amp;rsquo;t be what you really think (to say what you don&amp;rsquo;t think &amp;ndash; the definition of absurdity).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And the fourth reason for self-reproach: that the more divine part of you has been beaten and subdued by the degraded mortal part &amp;ndash; the body and its stupid self-indulgence.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;&amp;ldquo;that the more divine part of you has been beaten and subdued by the degraded mortal part &amp;ndash; the body and its stupid self-indulgence&amp;rdquo; - again the connection with &lt;em&gt;superego&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&#34;icons&#34; data-icons=&#34;self-control&#34; data-chapter=&#34;11.37&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;We need to master the art of acquiescence. We need to pay attention to our impulses, making sure they don&amp;rsquo;t go unmoderated, that they benefit others, that they&amp;rsquo;re worthy of us. We need to steer clear of desire in any form and not try to avoid what&amp;rsquo;s beyond our control.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;!--quoteend--&gt;
&lt;div class=&#34;icons&#34; data-icons=&#34;work&#34; data-chapter=&#34;12.6&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;Practice even what seems impossible.
The left hand is useless at almost everything, for lack of practice. But it guides the reins better than the right. From practice.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;!--quoteend--&gt;
&lt;div class=&#34;icons&#34; data-icons=&#34;death&#34; data-chapter=&#34;12.23&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;A given action that stops when it&amp;rsquo;s supposed to is none the worse for stopping. Nor the person engaged in it either. So too with the succession of actions we call &amp;ldquo;life.&amp;rdquo; If it ends when it&amp;rsquo;s supposed to, it&amp;rsquo;s none the worse for that. And the person who comes to the end of the line has no cause for complaint. The time and stopping point are set by nature &amp;ndash; our own nature, in some cases (death from old age); or nature as a whole, whose parts, shifting and changing, constantly renew the world, and keep it on schedule.
Nothing that benefits all things can be ugly or out of place. The end of life is not an evil &amp;ndash;  it doesn&amp;rsquo;t disgrace us. (Why should we be ashamed of an involuntary act that injures no one?). It&amp;rsquo;s a good thing &amp;ndash; scheduled by the world, promoting it, promoted by it.
This is how we become godlike &amp;ndash; following God&amp;rsquo;s path, and reason&amp;rsquo;s goals.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
</description>
       </item>
       
       <item>
         <title>Problems with Programming Books</title>
         <link>https://mjdiloreto.github.io/posts/problems-with-programming-books/</link>
         <pubDate>Wed, 02 Jun 2021 21:44:00 -0400</pubDate>
         
         <guid>https://mjdiloreto.github.io/posts/problems-with-programming-books/</guid>
         <description>&lt;p&gt;My girlfriend&amp;rsquo;s sister is taking her first programming course using an &amp;ldquo;interactive&amp;rdquo; online textbook (a &lt;a href=&#34;https://www.zybooks.com/&#34;&gt;Zybook&lt;/a&gt;) for school, and I offered to tutor her.&lt;/p&gt;
&lt;p&gt;When she needs help, she usually sends me 3 pictures:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The text of the problem statement,&lt;/li&gt;
&lt;li&gt;Her python code, and&lt;/li&gt;
&lt;li&gt;The error message (there is almost always an error message).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I then decipher what exactly the question is asking for, what the error message says, what her code is doing, and finally write up an explanation to help her understand all of it.&lt;/p&gt;
&lt;p&gt;Sometimes it&amp;rsquo;s easier to facetime.&lt;/p&gt;
&lt;p&gt;Throughout this process I&amp;rsquo;ve maintained notes about what trips her up, because it&amp;rsquo;s been so long since I started programming that I don&amp;rsquo;t actually remember what it was like not to know these things.
I&amp;rsquo;ve come to the conclusion that programming &amp;ldquo;books&amp;rdquo; (usually a hypertext document consisting of long passages of static text followed by graded problems) are seriously flawed.&lt;/p&gt;
&lt;p&gt;My perspective is also colored by my personal experience with &lt;a href=&#34;http://www.codecademy.com&#34;&gt;codecademy&lt;/a&gt; circa 2014, and later in 2019, as well as a few other courses from college (the names of which I cannot recall), so a lot might have changed in some of the better tools, but I&amp;rsquo;m certain there&amp;rsquo;s a lot more that can be done.&lt;/p&gt;
&lt;p&gt;The main ingredient they all seem lack is &lt;em&gt;interactivity&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Any fan of Brett Victor will know the importance of interactivity, but for the unitiated, allow me (him) to enlighten you:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=PUv66718DII&#34;&gt;Brett Victor: Inventing on Principle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://worrydream.com/LadderOfAbstraction/&#34;&gt;The Ladder of Abstraction&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(Seriously, watch the video from Brett, and read this essay too while you&amp;rsquo;re at it. The ideas he presents are wonderfully &lt;em&gt;simple&lt;/em&gt;. I guarantee they will leave a lasting impression.)&lt;/p&gt;
&lt;p&gt;What interactivity does for a first-time programming language learner is remove barriers.
A good programming book empowers her to find answers to her questions on her own.
It provides endless &lt;em&gt;contextual information&lt;/em&gt; for every part of the interface, code, and errors (no, not just some static textual explanation of the topic at-hand 5 pages up in the document).
The fewer buttons she has to click to see a result, the more help she has decoding an error message, the more likely she is to keep going, and keep coding.&lt;/p&gt;
&lt;p&gt;I boiled down my experience tutoring to a few areas for improvement for a truly interactive programming book.&lt;/p&gt;
&lt;h2 id=&#34;language-specific-ergonomics&#34;&gt;Language-specific Ergonomics&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s start with something programming books usually get right &amp;mdash; isolating the beginner from the technology.&lt;/p&gt;
&lt;p&gt;As software developers, we love tinkering on the command line.
We like to connect services and write scripts and run test suites and version control source code files.
We like to be in control of a system.&lt;/p&gt;
&lt;p&gt;This is anathema to the first-time programming language learner.&lt;/p&gt;
&lt;p&gt;A beginner should not have to set up anything.
She should be presented immediately with the opportunity to read, execute, and write programs without any effort.
Most books at least solve this problem by providing code execution tools (a bare text-editor and a &amp;ldquo;RUN CODE&amp;rdquo; button usually) from the browser, and some tools like &lt;a href=&#34;http://www.repl.it&#34;&gt;repl.it&lt;/a&gt; are doing very cool things in this space.&lt;/p&gt;
&lt;p&gt;I do think there is more work to be done regarding in-context documentation of language features, though.&lt;/p&gt;
&lt;h2 id=&#34;partial-results&#34;&gt;Partial Results&lt;/h2&gt;
&lt;p&gt;One thing I wish more books emphasized is the &lt;em&gt;substitution model&lt;/em&gt; of programming.
That is, the iterative process of substituting subexpressions for their results to make up larger results in a program, e.g;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(+ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; (+ &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;; becomes&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(+ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;; becomes&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Technically this model only applies to expressions, so in a language like Python there are exceptions, but the same basic principle carries over at least somewhat in every programming language, and it is not an obvious principle.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s not obvious to a beginner that:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;age_input &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; input()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;age &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(age_input)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;is exactly the same as:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;age &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(input())
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;unless she is explicitly told so.
But the abstract knowledge does not stick immediately, because she will then balk at:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;names &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; input()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The code editor should show the results of each part of chained method calls, and of each subexpression in an expression.&lt;/p&gt;
&lt;p&gt;As a side note, when describing the previous example I was asked, &amp;ldquo;How come it isn&amp;rsquo;t&amp;rdquo;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ages &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; split(input())
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What a good question, and the explanation will be completely incomprehensible to a beginner:&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Well in Python everything is an object (except for primitives), and those objects have methods, which are really just functions whose first argument is always the object instance itself. Isn&amp;rsquo;t programming fun?&amp;rdquo;&lt;/p&gt;
&lt;p&gt;This is a huge WTF for beginners, and I remember spending hours googling &amp;ldquo;what is an object in programming&amp;rdquo; when I first started to code.
It&amp;rsquo;s irrelevant to teach a beginner these things, but languages like Python force this confusion from the start.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s why &lt;a href=&#34;https://htdp.org/&#34;&gt;How To Design Programs&lt;/a&gt; uses a Lisp as its teaching language.
Any syntax is overhead which distracts from the essence of programming.&lt;/p&gt;
&lt;p&gt;A good interactive programming book might not want to teach Lisp, but it should give insight into the results of each part of every expression.&lt;/p&gt;
&lt;h2 id=&#34;error-messages&#34;&gt;Error Messages&lt;/h2&gt;
&lt;p&gt;This is what infuriates me about every single book I&amp;rsquo;ve come across &amp;mdash; they all forward the bare error messages from the interpreter/compiler/VM/whatever straight to the user.
This in and of itself is not really an issue since becoming familiar with error messages is a part of software development, but the problem is that they all &lt;em&gt;stop&lt;/em&gt; there.&lt;/p&gt;
&lt;p&gt;What do software developers do when they get an error message?
Well, it depends on the error:&lt;/p&gt;
&lt;h4 id=&#34;syntax-errors&#34;&gt;Syntax errors:&lt;/h4&gt;
&lt;p&gt;My IDE catches this &lt;em&gt;in context&lt;/em&gt; AND usually provides a quick fix.
A beginner is already used to this common paradigm (e.g. spellcheck).
There is no reason for any programming book not to have this feature (Zybooks does not have it).&lt;/p&gt;
&lt;h4 id=&#34;runtime-errors&#34;&gt;Runtime errors:&lt;/h4&gt;
&lt;p&gt;StackOverflow.
There is no avoiding the value of google-searching the error message.
I would like to see a book that does this on behalf of the user, suggesting a search whenever an error occurs; or preferably suggesting a &lt;em&gt;useful&lt;/em&gt; search from a previous user of the book i.e. a post which solved &lt;em&gt;this&lt;/em&gt; specific error in &lt;em&gt;this&lt;/em&gt; specific graded problem.&lt;/p&gt;
&lt;p&gt;One error message is usually tolerable, but it&amp;rsquo;s when the beginner tries 2, 3, or 4 different things, and gets &lt;em&gt;different&lt;/em&gt; errors that she quits.
My role as a tutor is essentially an error explainer.
I explain what the error means generally, then what it means in this context, then &lt;em&gt;why&lt;/em&gt; it happened in this context, what line of code is &lt;em&gt;really&lt;/em&gt; to blame (you got a SynaxError on line 11 because you forgot a &lt;code&gt;:&lt;/code&gt; on line 10), and finally prompt with a leading question toward a solution (or just give the solution if it isn&amp;rsquo;t obvious).
There&amp;rsquo;s no reason the book can&amp;rsquo;t do a lot of this work, especially considering it is a document visited almost exclusively by beginners who generate and ultimately resolve the same errors over and over again.
There is opportunity to leverage the book&amp;rsquo;s data collection to help solve this problem.&lt;/p&gt;
&lt;h2 id=&#34;case-analysis&#34;&gt;Case Analysis&lt;/h2&gt;
&lt;p&gt;This is where the actual programming work begins.
Alan Perlis famously &lt;a href=&#34;http://www.cs.yale.edu/homes/perlis-alan/quotes.html&#34;&gt;said&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Programmers are not to be measured by their ingenuity and their logic but by the completeness of their case analysis.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The problem is that it&amp;rsquo;s very difficult for beginners to differentiate between errors due to incomplete case analysis and &amp;ldquo;programming&amp;rdquo; errors (like using the wrong variable, forgetting a &lt;code&gt;+1&lt;/code&gt; somewhere, etc.)&lt;/p&gt;
&lt;p&gt;Software developers write tests in order to increase their confidence in their case analysis, and run those tests when the relevant code changes.
Beginners do not write tests, because they do not yet know the value of doing so.&lt;/p&gt;
&lt;p&gt;Most books I&amp;rsquo;ve come across usually provide some mechanism for user-supplied inputs, and typically include a short test suite for graded problems, but this is not enough.
Books should provide this list of cases and run the tests whenever the code is updated.
The beginner should know &lt;em&gt;immediately&lt;/em&gt; whenever one of her changes influenced the outcome of a test case.&lt;/p&gt;
&lt;p&gt;The book should also provide test cases for the functions relevant to a solution, i.e. I should be able to hover over `pow` in some Python code and see:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pow(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# -&amp;gt; 4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pow(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# -&amp;gt; 8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pow(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# -&amp;gt; 16&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pow(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# -&amp;gt; 27&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# ... etc.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So far I have not come across any books which have immediate feedback like this.&lt;/p&gt;
&lt;h2 id=&#34;exploration&#34;&gt;Exploration&lt;/h2&gt;
&lt;p&gt;This is by far the most important aspect of programming that books fail at.
Almost every one of my tutoring texts includes the phrase &amp;ldquo;open up your terminal and type &lt;code&gt;python3&lt;/code&gt;&amp;rdquo; (I demonstrated the REPL live a couple times; I&amp;rsquo;m not a sadist).
I then say, &amp;ldquo;See what happens when you do:&amp;rdquo; and provide a verbatim copy of a repl session demonstrating whatever concept I was discussing.&lt;/p&gt;
&lt;p&gt;You might be skeptical about the merits of REPL-driven development as a style of software-engineering, and prefer TDD or something. That&amp;rsquo;s fine.
It is undeniable though that a repl is &lt;em&gt;more interactive&lt;/em&gt; than TDD, and in our hypothetical programming book we&amp;rsquo;ve already provided the user with a live test suite.
The code editors these programming books use really need to integrate something like &lt;a href=&#34;https://quokkajs.com/&#34;&gt;Quokka&lt;/a&gt; or &lt;a href=&#34;http://lighttable.com/&#34;&gt;Lighttable&lt;/a&gt; for whatever language the book uses.&lt;/p&gt;
&lt;p&gt;They should also suggest other things to try.
This might have to be problem-specific, but if the preceding chapter discusses the &lt;code&gt;split&lt;/code&gt; and &lt;code&gt;join&lt;/code&gt; functions, then wherever a list appears in the code, the editor should show it &lt;code&gt;join&lt;/code&gt;&amp;lsquo;ed, and wherever there is a string, the editor should show it &lt;code&gt;split&lt;/code&gt;&amp;lsquo;ed.
If there is a string in the code, the editor should show how it is made up of characters and how to access them.&lt;/p&gt;
&lt;p&gt;I imagine this type of interactivity could prove overwhelming, so I think it would be best to limit its scope to just the topics discussed in the chapter.
For example, one chapter might discuss character codes (in Python using &lt;code&gt;ord&lt;/code&gt; and &lt;code&gt;chr&lt;/code&gt;), so should show the structure of all the strings in the code with their &lt;code&gt;ord&lt;/code&gt;, and translate numeric literals using &lt;code&gt;chr&lt;/code&gt;.
The next chapter would not need to show this same context for numeric literals, but instead might discuss modular arithmetic, so numeric literals should then show their result modulo some base.&lt;/p&gt;
&lt;p&gt;I assumed since the REPL is such a simple piece of interactive software that it would be super useful for a beginner, but what I noticed is that, when presented with an empty prompt, she just didn&amp;rsquo;t know what to type next.
I realized suggestions for things to try are imperative.&lt;/p&gt;
&lt;h2 id=&#34;memory&#34;&gt;Memory&lt;/h2&gt;
&lt;p&gt;Disclaimer: I&amp;rsquo;ve never seen &lt;em&gt;any&lt;/em&gt; programming interface (let alone a beginner&amp;rsquo;s programming book) which solves this problem.
Once the beginner has solved a problem and submitted her program, it is lost in the ether.
She goes about her life and (to no fault of her own) effectively purges whatever she learned.
This is really more of a problem with books in general, because there is no place other than your own brain to keep the knowledge you learned.&lt;/p&gt;
&lt;p&gt;Well, computers have memory, and a sufficiently interactive programming environment should really &lt;em&gt;remember&lt;/em&gt; the code it runs.&lt;/p&gt;
&lt;p&gt;Whenever a beginner correctly uses a function, syntactic construct, or other piece of source code, the book ought to remember that.
Whenever a beginner writes some code that generates an error, and then fixes that error with a code change, that&amp;rsquo;s a huge success! The book ought to congratulate and remember that also.
She should then have the immediate ability to recall that success in another context.&lt;/p&gt;
&lt;p&gt;If I used &lt;code&gt;input().split()&lt;/code&gt; on problem 1.c, I should be reminded of it when I write &lt;code&gt;input().split()&lt;/code&gt; on problem 13.a.
Because the amount of code the beginner will write while following the book will be low (maybe 500 lines total?), and will usually consist of the same basic functions, I don&amp;rsquo;t see any reason this should not be feasible.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;m sure there is a ton of work going on in the digital textbook space, but from what I see, the majority of &amp;ldquo;Teach yourself Python!&amp;rdquo; books/courses online fall into the MVP-product with superstar-marketing category.
Maybe that&amp;rsquo;s simply the economics of the space, but I can&amp;rsquo;t help but feel we as software developers could do a lot more to craft a wholly interactive and integrated guided experience to learning programming.
There seem to be tons of books, videos, and blog posts for every concept a beginner would ever want to know about Python, but none satisfy the level of interactivity I feel is really needed.
My sister&amp;rsquo;s girlfriend said to me &amp;ldquo;I have no idea how the other students are managing without a &lt;em&gt;professional software engineer&lt;/em&gt; helping them.&amp;rdquo;
I don&amp;rsquo;t know either, but the books are definitely not sufficient.&lt;/p&gt;
</description>
       </item>
       
       <item>
         <title>Libraries for Web Development</title>
         <link>https://mjdiloreto.github.io/posts/libraries-for-web-development/</link>
         <pubDate>Sun, 18 Apr 2021 21:09:00 -0400</pubDate>
         
         <guid>https://mjdiloreto.github.io/posts/libraries-for-web-development/</guid>
         <description>&lt;p&gt;A list of neat and nifty libraries I&amp;rsquo;ve stumbled across which have piqued my interest enough for me to save them.
Keeping track of them here in this list for my future reference.&lt;/p&gt;
&lt;h2 id=&#34;in-the-browser&#34;&gt;In the Browser&lt;/h2&gt;
&lt;h3 id=&#34;analytics&#34;&gt;Analytics&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://counter.dev&#34;&gt;counter.dev&lt;/a&gt;: Simple, open-source, free (as in beer), privacy-focused analytics.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;built-on-react&#34;&gt;Built on React&lt;/h3&gt;
&lt;p&gt;React wins the web by converting the problem of UI to a function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;V = F(D)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here are some projects which compose with that simple function.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blitzjs.com&#34;&gt;Blitz.js&lt;/a&gt;: Full-stack batteries-included React Framework. 0-API. Comes with Routing, Authentication (sign-up, log in, password reset) preconfigured. Would use for a hackathon project.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;data-visualization&#34;&gt;Data Visualization&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://formidable.com/open-source/victory/&#34;&gt;Victory&lt;/a&gt;: Easy to use Charts and data visualization components for React. Works with React Native too(!)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.highcharts.com/demo&#34;&gt;Highcharts&lt;/a&gt;: Modular library of many chart types with React or plain js bindings.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chartscss.org/&#34;&gt;Charts.scss&lt;/a&gt;: Boom, no need for React at all. Charts directly in css baby. Could be really cool in conjuction with htmx.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://reactflow.dev/examples&#34;&gt;React flow&lt;/a&gt;: Node editor for building flowcharts / graph-based diagrams with interactive editing, minimap, and more.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://riccardoscalco.it/textures/&#34;&gt;Textures.js&lt;/a&gt;: SVG patterns for data visualization. Trivial to use and beautiful.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dates&#34;&gt;Dates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;//js-joda.github.io/js-joda/&#34;&gt;JS-Joda&lt;/a&gt;: Lower adoption than date-fns.
Immutable implementation of dates (Does not wrap the native JS &lt;code&gt;Date&lt;/code&gt; object.
Different classes of dates for different use-cases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LocalDate (dates like birthdays or holidays)&lt;/li&gt;
&lt;li&gt;Period (between 2 dates)&lt;/li&gt;
&lt;li&gt;Duration (scalar time)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://date-fns.org&#34;&gt;Date-fns:&lt;/a&gt; Consistent, complete, immutable.&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;org6911992&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;High adoption (recommended from &lt;code&gt;moment.js&lt;/code&gt; (the easiest/most intuitive date library I&amp;rsquo;ve encountered)).
Wraps the Native &lt;code&gt;Date&lt;/code&gt; object.
Has an FP submodule providing convenience for functional-style programming.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dom-styling&#34;&gt;DOM styling&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://styled-components.com&#34;&gt;Styled Components&lt;/a&gt;: Directly associate React Components with styles without the need for global style sheets.
Good for building highly modular (read standalone) components.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://react.semantic-ui.com&#34;&gt;Semantic UI:&lt;/a&gt; words &lt;code&gt;=&lt;/code&gt; classnames. Create highly readable &amp;ldquo;semantic&amp;rdquo; UI code with a decent selection of components&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dwyl/learn-tachyons&#34;&gt;Tachyons&lt;/a&gt;: Functional terse css classes. Might be based off tailwind, not sure.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://roughnotation.com/&#34;&gt;Rough Notation&lt;/a&gt;: Create + animate &amp;ldquo;hand-drawn&amp;rdquo; annotations on top of html.
Super simple and cool effect.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dope-stylesheets&#34;&gt;Dope stylesheets&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://nostalgic-css.github.io/NES.css/&#34;&gt;NES.css&lt;/a&gt;: Stylesheet to emulate old NES style interface. Certified dope.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;react-alternatives&#34;&gt;React alternatives&lt;/h3&gt;
&lt;p&gt;Alternatives to the classic client-side rendered react SPA.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://htmx.org/examples/&#34;&gt;htmx&lt;/a&gt;: Build SPAs directly onto html elements using attributes.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;htmx allows you to access AJAX, CSS Transitions, WebSockets and Server Sent Events directly in HTML, using attributes, so you can build modern user interfaces with the simplicity and power of hypertext.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;small - 10k minified + gzipped. Cool author.&lt;/p&gt;
&lt;h3 id=&#34;misc-dot&#34;&gt;Misc.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://quotebacks.net/&#34;&gt;Quotebacks&lt;/a&gt;: Create nice-looking and functional quotes to external resources. Mostly used in the blogosphere.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;not-the-browser&#34;&gt;Not the Browser&lt;/h2&gt;
&lt;h3 id=&#34;web-hosting&#34;&gt;Web hosting&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.netlify.com/&#34;&gt;Netlify&lt;/a&gt;: The best. use it.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://coollabs.io/coolify&#34;&gt;Coolify&lt;/a&gt;: Open-source, indie-hacker-esque Netlify alternative. Not clear what pricing is like.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githack.com/&#34;&gt;raw.githack.com&lt;/a&gt;: CDN for files hosted in github repos. Good for indie-dev type projects.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;databases&#34;&gt;Databases&lt;/h3&gt;
&lt;h4 id=&#34;sql&#34;&gt;SQL&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://walkable.gitlab.io&#34;&gt;Walkable&lt;/a&gt;: hiccup-style sql (use EDN to describe SQL statements).&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://massivejs.org/&#34;&gt;Massive.js&lt;/a&gt;: A powerful &lt;code&gt;Node.js&lt;/code&gt; wrapper for (only) &lt;code&gt;postgres&lt;/code&gt; that doesn&amp;rsquo;t get in the way.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;replication&#34;&gt;Replication&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://litestream.io/getting-started/&#34;&gt;litestream&lt;/a&gt;: Replicate SQLite databases automatically in the background as a separate process.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;fun--data-sources&#34;&gt;(Fun) Data sources&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.rijksmuseum.nl/en/rijksstudio&#34;&gt;Rijksmuseum&lt;/a&gt;: Searchable compilation of over 700k high-res copies of famous paintings.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://omar.website/tabfs/&#34;&gt;Tabfs&lt;/a&gt;: Mount browser tabs as a local filesystem.
Allows easy querying of multiple open tabs, saving+reloading tabs + manipulating + communicating with browser.
Your own browsing sessions become the data source.
Literally endless possibilities for scripting.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://everynoise.com/&#34;&gt;Everynoise&lt;/a&gt;: Literally every spotify genre, with links to relevant artists / song snippets, and the relations between them all.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;machine-learning&#34;&gt;Machine learning&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://lobe.ai/&#34;&gt;Lobe&lt;/a&gt;: Easiest (superlative, yes) online training of machine learning models. It&amp;rsquo;s free for now.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/nidhaloff/igel&#34;&gt;Igel&lt;/a&gt;: Train + fit, test + use machine learning models at the command line without writing code.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alicevision.org/#meshroom&#34;&gt;Meshroom&lt;/a&gt;: Reconstruct images as 3D models, aka &lt;code&gt;Photogrammetry&lt;/code&gt; (your $2 word for the day).
Free (as in freedom, and also beer).&lt;/li&gt;
&lt;/ul&gt;
</description>
       </item>
       
       <item>
         <title>Blogs I Like</title>
         <link>https://mjdiloreto.github.io/blogs_i_like/</link>
         <pubDate>Mon, 06 Jul 2020 00:00:00 -0500</pubDate>
         
         <guid>https://mjdiloreto.github.io/blogs_i_like/</guid>
         <description>&lt;h2 id=&#34;blogs-i-like&#34;&gt;Blogs I like&lt;/h2&gt;
&lt;h3 id=&#34;bartosz-ciechanowski-http-ciechanow-dot-ski&#34;&gt;Bartosz Ciechanowski &lt;a href=&#34;http://ciechanow.ski&#34;&gt;http://ciechanow.ski&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;favorite-examples&#34;&gt;Favorite examples:&lt;/h4&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ciechanow.ski/internal-combustion-engine&#34;&gt;http://ciechanow.ski/internal-combustion-engine&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://ciechanow.ski/mechanical-watch&#34;&gt;http://ciechanow.ski/mechanical-watch&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Absolutely incredible visual illustrations of complex physics, made so simple you can&amp;rsquo;t help but to understand.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;jack-rusher-http-jackrusher-dot-com&#34;&gt;Jack Rusher &lt;a href=&#34;http://jackrusher.com/&#34;&gt;http://jackrusher.com/&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Generative art, Clojure, interactive software.&lt;/p&gt;
&lt;h4 id=&#34;favorite-examples&#34;&gt;Favorite examples:&lt;/h4&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jackrusher.com/journal/november-sketchbook.html&#34;&gt;http://jackrusher.com/journal/november-sketchbook.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jackrusher.com/journal/geometer.html&#34;&gt;http://jackrusher.com/journal/geometer.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;maggie-appleton-https-maggieappleton-dot-com&#34;&gt;Maggie Appleton &lt;a href=&#34;https://maggieappleton.com/&#34;&gt;https://maggieappleton.com/&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Software and UX design, evolution, and fascinating visual essays.&lt;/p&gt;
&lt;h4 id=&#34;favorite-examples&#34;&gt;Favorite examples:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://maggieappleton.com/programming-portals&#34;&gt;https://maggieappleton.com/programming-portals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://maggieappleton.com/folk-interfaces&#34;&gt;https://maggieappleton.com/folk-interfaces&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;jezen-thomas-https-jezenthomas-dot-com-posts&#34;&gt;* Jezen Thomas &lt;a href=&#34;https://jezenthomas.com/posts/&#34;&gt;https://jezenthomas.com/posts/&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Software development, Haskell, conversational writing style.&lt;/p&gt;
&lt;h3 id=&#34;dragan-djuric-https-dragan-dot-rocks&#34;&gt;* Dragan Djuric &lt;a href=&#34;https://dragan.rocks/&#34;&gt;https://dragan.rocks/&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Clojure, specifically high performance and GPU programming with Clojure.&lt;/p&gt;
&lt;h3 id=&#34;steven-wittens-http-acko-dot-net&#34;&gt;Steven Wittens &lt;a href=&#34;http://acko.net/&#34;&gt;http://acko.net/&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Beatiful visualizations, interacive math, and neat hacks.&lt;/p&gt;
&lt;h3 id=&#34;lambda-walks-http-lambdaway-dot-free-dot-fr-lambdawalks-view-start&#34;&gt;Lambda Walks &lt;a href=&#34;http://lambdaway.free.fr/lambdawalks/?view=start&#34;&gt;http://lambdaway.free.fr/lambdawalks/?view=start&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Not a blog per-se, but an absolute adventure in the lambda calculaus and computation.&lt;/p&gt;
&lt;p&gt;A particularly intriguing post &lt;a href=&#34;http://lambdaway.free.fr/lambdawalks/?view=meta4&#34;&gt;http://lambdaway.free.fr/lambdawalks/?view=meta4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;\* I first found out about this blog via &lt;a href=&#34;https://www.reddit.com/r/hnblogs&#34;&gt;hnblogs on reddit&lt;/a&gt;.&lt;/p&gt;
</description>
       </item>
       
       <item>
         <title>What Am I Listening to?</title>
         <link>https://mjdiloreto.github.io/music_i_like/</link>
         <pubDate>Mon, 06 Jul 2020 00:00:00 -0400</pubDate>
         
         <guid>https://mjdiloreto.github.io/music_i_like/</guid>
         <description>&lt;h2 id=&#34;what-am-i-listening-to&#34;&gt;What am I Listening to?&lt;/h2&gt;
&lt;h3 id=&#34;jazz-fusion&#34;&gt;Jazz Fusion&lt;/h3&gt;
&lt;h4 id=&#34;the-comet-is-coming&#34;&gt;The Comet is Coming&lt;/h4&gt;
&lt;h4 id=&#34;sons-of-kemet&#34;&gt;Sons of Kemet&lt;/h4&gt;
&lt;h4 id=&#34;mouse-on-the-keys&#34;&gt;mouse on the keys&lt;/h4&gt;
&lt;h4 id=&#34;the-physics-house-band&#34;&gt;The Physics House Band&lt;/h4&gt;
&lt;h4 id=&#34;gogo-penguin&#34;&gt;GoGo Penguin&lt;/h4&gt;
&lt;h4 id=&#34;christian-scott-atunde-adjuah&#34;&gt;Christian Scott aTunde Adjuah&lt;/h4&gt;
&lt;h4 id=&#34;the-bad-plus&#34;&gt;The Bad Plus&lt;/h4&gt;
&lt;h3 id=&#34;electronic-music-synthesis&#34;&gt;Electronic Music Synthesis&lt;/h3&gt;
&lt;h4 id=&#34;umberto&#34;&gt;Umberto&lt;/h4&gt;
&lt;h4 id=&#34;jonwayne&#34;&gt;Jonwayne&lt;/h4&gt;
&lt;h4 id=&#34;zola-blood&#34;&gt;Zola Blood&lt;/h4&gt;
&lt;h4 id=&#34;ólafur-arnalds&#34;&gt;Ólafur Arnalds&lt;/h4&gt;
&lt;h4 id=&#34;brad-mehldau&#34;&gt;Brad Mehldau&lt;/h4&gt;
&lt;p&gt;And probably something else too&amp;hellip;&lt;/p&gt;
</description>
       </item>
       
       <item>
         <title>About Me</title>
         <link>https://mjdiloreto.github.io/about/</link>
         <pubDate>Fri, 01 May 2020 00:00:00 -0500</pubDate>
         
         <guid>https://mjdiloreto.github.io/about/</guid>
         <description>&lt;p&gt;Check out &lt;a href=&#34;https://mjdiloreto.github.io/ox-hugo/resume.pdf&#34;&gt;my resume!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m not a superstar, but I love programming.
I&amp;rsquo;m far from a designer or architect, but I would like to design complex systems.
I read more than I do, but I&amp;rsquo;m trying to change that.
I appreciate the beauty and simplicity of Lisp.
Functional programming excites me.
I am constantly recommending music.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m always learning &lt;em&gt;something&lt;/em&gt;, right now it&amp;rsquo;s:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Elixir&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;rsquo;m always learning about Emacs.&lt;/p&gt;
&lt;h2 id=&#34;about-this-blog&#34;&gt;About this Blog&lt;/h2&gt;
&lt;p&gt;I write a lot for myself, and I want to formalize the process with a blog. I hope this effort has these effects:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Make my writing better.&lt;/li&gt;
&lt;li&gt;Make the collection of my thoughts in writing easier and more convenient to access.&lt;/li&gt;
&lt;li&gt;Motivate me to finish more projects.&lt;/li&gt;
&lt;/ol&gt;
</description>
       </item>
       
       <item>
         <title>Emacs and Org-Mode</title>
         <link>https://mjdiloreto.github.io/posts/org-mode/</link>
         <pubDate>Sun, 01 Mar 2020 15:41:00 -0500</pubDate>
         
         <guid>https://mjdiloreto.github.io/posts/org-mode/</guid>
         <description>&lt;p&gt;Before this year I was always a vim guy.
I used vim for almost everything except JVM programming (Java, Scala. For those tasks I really prefer IntelliJ), but this year I installed emacs.
I figured if I really wanted to participate in the &lt;a href=&#34;https://wiki.c2.com/?EmacsVsVi&#34;&gt;holy flame war&lt;/a&gt; I better spend some time learning the other tool as well.
I used a few different tool for all my electronic tasks, and here&amp;rsquo;s what that landscape looked like for me before emacs:&lt;/p&gt;
&lt;h2 id=&#34;before-emacs&#34;&gt;Before Emacs&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Task&lt;/th&gt;
&lt;th&gt;Software&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Taking Notes&lt;/td&gt;
&lt;td&gt;vim, Github-flavored Markdown&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Keeping an agenda&lt;/td&gt;
&lt;td&gt;A simple note widget on my phone, Google Tasks&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Text file manipulation&lt;/td&gt;
&lt;td&gt;vim&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;python, C++&lt;/td&gt;
&lt;td&gt;vim with &lt;a href=&#34;https://github.com/ycm-core/YouCompleteMe&#34;&gt;YouCompleteMe&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Java, Scala, javascript&lt;/td&gt;
&lt;td&gt;IntelliJ&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;I was generally happy using this configuration, with the exception of my agenda.
I was too disorganized, with short-term tasks on a note widget on my phone&amp;rsquo;s home screen, and longer term tasks in Google Tasks.
Putting time constraints on the short-term tasks was basically impossible since the note app had no integrations with the calendar, and putting those things in Google Tasks was too onerous.
Also, I do most of my work on my laptop, so having to keep my phone by my side while working was a big pain.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;d recently watched a talk from &lt;a href=&#34;https://www.youtube.com/watch?v=SzA2YODtgK4&amp;amp;t=2851s&#34;&gt;Harry Schwartz&lt;/a&gt; on org-mode, and the simple plain-text markup with powerful keyboard shortcuts convinced me to give it a shot.
Actually, the keyboard shortcut for inserting timestamps, &lt;code&gt;C-u C-c .&lt;/code&gt;, is the single thing I saw in that talk that I &lt;em&gt;had&lt;/em&gt; to try.
So I opened emacs and&amp;hellip; couldn&amp;rsquo;t figure out how to make a new file.
So back to what I knew, &lt;code&gt;vim agenda.org&lt;/code&gt;, insert some markup, save, &lt;em&gt;then&lt;/em&gt; &lt;code&gt;emacs agenda.org&lt;/code&gt;.
I haven&amp;rsquo;t gone back to another way of organizing my tasks.&lt;/p&gt;
&lt;p&gt;I ought to write about my workflow with org-mode, but that&amp;rsquo;s for another day.
In fact, I liked it so much that I started taking all my class notes with emacs too.
So it begins, I&amp;rsquo;ve chosen a side on the holy war, and emacs is slowly conquering territory that used to belong firmly to vim.&lt;/p&gt;
&lt;h2 id=&#34;now-3-months-of-emacs&#34;&gt;Now, 3 months of emacs&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Task&lt;/th&gt;
&lt;th&gt;Software&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Taking Notes&lt;/td&gt;
&lt;td&gt;emacs, org-mode&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Keeping an agenda&lt;/td&gt;
&lt;td&gt;emacs, org-mode&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Text file manipulation&lt;/td&gt;
&lt;td&gt;vim&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;python, C++&lt;/td&gt;
&lt;td&gt;vim with &lt;a href=&#34;https://github.com/ycm-core/YouCompleteMe&#34;&gt;YouCompleteMe&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Java, Scala, javascript&lt;/td&gt;
&lt;td&gt;IntelliJ&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Actually, these changes coincided with me teaching myself Clojure, so the landscape &lt;em&gt;really&lt;/em&gt; looks like:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Task&lt;/th&gt;
&lt;th&gt;Software&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Taking Notes&lt;/td&gt;
&lt;td&gt;emacs, org-mode&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Keeping an agenda&lt;/td&gt;
&lt;td&gt;emacs, org-mode&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Clojure&lt;/td&gt;
&lt;td&gt;emacs, CIDR&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Text file manipulation&lt;/td&gt;
&lt;td&gt;vim&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;python, C++&lt;/td&gt;
&lt;td&gt;vim with &lt;a href=&#34;https://github.com/ycm-core/YouCompleteMe&#34;&gt;YouCompleteMe&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Java, Scala, javascript&lt;/td&gt;
&lt;td&gt;IntelliJ&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;And it&amp;rsquo;s definitely not looking good for vim down the road.
Right now my vim/emacs ratio is around 1:1, but I imagine this will shift more in emacs&amp;rsquo;s favor soon.
I &lt;em&gt;really&lt;/em&gt; like emacs.
It&amp;rsquo;s almost apples and oranges to vim, or maybe a more apt analogy would be &lt;em&gt;crab-apples&lt;/em&gt; to oranges, where you&amp;rsquo;ve only been eating crab-apples for years and didn&amp;rsquo;t know how good oranges tasted yet.&lt;/p&gt;
</description>
       </item>
       
     </channel>
   </rss>
